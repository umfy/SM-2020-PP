
Projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b62c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f0  0800b800  0800b800  0001b800  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800baf0  0800baf0  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800baf0  0800baf0  0001baf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800baf8  0800baf8  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800baf8  0800baf8  0001baf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bafc  0800bafc  0001bafc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800bb00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000614  200001dc  0800bcdc  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007f0  0800bcdc  000207f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b094  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003875  00000000  00000000  0003b2a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015a8  00000000  00000000  0003eb18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013c0  00000000  00000000  000400c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000291c6  00000000  00000000  00041480  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013ed8  00000000  00000000  0006a646  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f8733  00000000  00000000  0007e51e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00176c51  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006704  00000000  00000000  00176ccc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b7e4 	.word	0x0800b7e4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	0800b7e4 	.word	0x0800b7e4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b972 	b.w	8000fc4 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9e08      	ldr	r6, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	4688      	mov	r8, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d14b      	bne.n	8000d9e <__udivmoddi4+0xa6>
 8000d06:	428a      	cmp	r2, r1
 8000d08:	4615      	mov	r5, r2
 8000d0a:	d967      	bls.n	8000ddc <__udivmoddi4+0xe4>
 8000d0c:	fab2 f282 	clz	r2, r2
 8000d10:	b14a      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d12:	f1c2 0720 	rsb	r7, r2, #32
 8000d16:	fa01 f302 	lsl.w	r3, r1, r2
 8000d1a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d1e:	4095      	lsls	r5, r2
 8000d20:	ea47 0803 	orr.w	r8, r7, r3
 8000d24:	4094      	lsls	r4, r2
 8000d26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d2a:	0c23      	lsrs	r3, r4, #16
 8000d2c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d30:	fa1f fc85 	uxth.w	ip, r5
 8000d34:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d38:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d3c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d40:	4299      	cmp	r1, r3
 8000d42:	d909      	bls.n	8000d58 <__udivmoddi4+0x60>
 8000d44:	18eb      	adds	r3, r5, r3
 8000d46:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d4a:	f080 811b 	bcs.w	8000f84 <__udivmoddi4+0x28c>
 8000d4e:	4299      	cmp	r1, r3
 8000d50:	f240 8118 	bls.w	8000f84 <__udivmoddi4+0x28c>
 8000d54:	3f02      	subs	r7, #2
 8000d56:	442b      	add	r3, r5
 8000d58:	1a5b      	subs	r3, r3, r1
 8000d5a:	b2a4      	uxth	r4, r4
 8000d5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d68:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d6c:	45a4      	cmp	ip, r4
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x8c>
 8000d70:	192c      	adds	r4, r5, r4
 8000d72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d76:	f080 8107 	bcs.w	8000f88 <__udivmoddi4+0x290>
 8000d7a:	45a4      	cmp	ip, r4
 8000d7c:	f240 8104 	bls.w	8000f88 <__udivmoddi4+0x290>
 8000d80:	3802      	subs	r0, #2
 8000d82:	442c      	add	r4, r5
 8000d84:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d88:	eba4 040c 	sub.w	r4, r4, ip
 8000d8c:	2700      	movs	r7, #0
 8000d8e:	b11e      	cbz	r6, 8000d98 <__udivmoddi4+0xa0>
 8000d90:	40d4      	lsrs	r4, r2
 8000d92:	2300      	movs	r3, #0
 8000d94:	e9c6 4300 	strd	r4, r3, [r6]
 8000d98:	4639      	mov	r1, r7
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0xbe>
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	f000 80eb 	beq.w	8000f7e <__udivmoddi4+0x286>
 8000da8:	2700      	movs	r7, #0
 8000daa:	e9c6 0100 	strd	r0, r1, [r6]
 8000dae:	4638      	mov	r0, r7
 8000db0:	4639      	mov	r1, r7
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f783 	clz	r7, r3
 8000dba:	2f00      	cmp	r7, #0
 8000dbc:	d147      	bne.n	8000e4e <__udivmoddi4+0x156>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0xd0>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80fa 	bhi.w	8000fbc <__udivmoddi4+0x2c4>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0303 	sbc.w	r3, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	4698      	mov	r8, r3
 8000dd2:	2e00      	cmp	r6, #0
 8000dd4:	d0e0      	beq.n	8000d98 <__udivmoddi4+0xa0>
 8000dd6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dda:	e7dd      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000ddc:	b902      	cbnz	r2, 8000de0 <__udivmoddi4+0xe8>
 8000dde:	deff      	udf	#255	; 0xff
 8000de0:	fab2 f282 	clz	r2, r2
 8000de4:	2a00      	cmp	r2, #0
 8000de6:	f040 808f 	bne.w	8000f08 <__udivmoddi4+0x210>
 8000dea:	1b49      	subs	r1, r1, r5
 8000dec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000df0:	fa1f f885 	uxth.w	r8, r5
 8000df4:	2701      	movs	r7, #1
 8000df6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dfa:	0c23      	lsrs	r3, r4, #16
 8000dfc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb08 f10c 	mul.w	r1, r8, ip
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0x124>
 8000e0c:	18eb      	adds	r3, r5, r3
 8000e0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x122>
 8000e14:	4299      	cmp	r1, r3
 8000e16:	f200 80cd 	bhi.w	8000fb4 <__udivmoddi4+0x2bc>
 8000e1a:	4684      	mov	ip, r0
 8000e1c:	1a59      	subs	r1, r3, r1
 8000e1e:	b2a3      	uxth	r3, r4
 8000e20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e24:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e28:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e2c:	fb08 f800 	mul.w	r8, r8, r0
 8000e30:	45a0      	cmp	r8, r4
 8000e32:	d907      	bls.n	8000e44 <__udivmoddi4+0x14c>
 8000e34:	192c      	adds	r4, r5, r4
 8000e36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e3a:	d202      	bcs.n	8000e42 <__udivmoddi4+0x14a>
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	f200 80b6 	bhi.w	8000fae <__udivmoddi4+0x2b6>
 8000e42:	4618      	mov	r0, r3
 8000e44:	eba4 0408 	sub.w	r4, r4, r8
 8000e48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e4c:	e79f      	b.n	8000d8e <__udivmoddi4+0x96>
 8000e4e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e52:	40bb      	lsls	r3, r7
 8000e54:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e58:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e5c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e60:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e64:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e68:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e6c:	4325      	orrs	r5, r4
 8000e6e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e72:	0c2c      	lsrs	r4, r5, #16
 8000e74:	fb08 3319 	mls	r3, r8, r9, r3
 8000e78:	fa1f fa8e 	uxth.w	sl, lr
 8000e7c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e80:	fb09 f40a 	mul.w	r4, r9, sl
 8000e84:	429c      	cmp	r4, r3
 8000e86:	fa02 f207 	lsl.w	r2, r2, r7
 8000e8a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e8e:	d90b      	bls.n	8000ea8 <__udivmoddi4+0x1b0>
 8000e90:	eb1e 0303 	adds.w	r3, lr, r3
 8000e94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e98:	f080 8087 	bcs.w	8000faa <__udivmoddi4+0x2b2>
 8000e9c:	429c      	cmp	r4, r3
 8000e9e:	f240 8084 	bls.w	8000faa <__udivmoddi4+0x2b2>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4473      	add	r3, lr
 8000ea8:	1b1b      	subs	r3, r3, r4
 8000eaa:	b2ad      	uxth	r5, r5
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3310 	mls	r3, r8, r0, r3
 8000eb4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000eb8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ebc:	45a2      	cmp	sl, r4
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x1da>
 8000ec0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ec4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ec8:	d26b      	bcs.n	8000fa2 <__udivmoddi4+0x2aa>
 8000eca:	45a2      	cmp	sl, r4
 8000ecc:	d969      	bls.n	8000fa2 <__udivmoddi4+0x2aa>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4474      	add	r4, lr
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eda:	eba4 040a 	sub.w	r4, r4, sl
 8000ede:	454c      	cmp	r4, r9
 8000ee0:	46c2      	mov	sl, r8
 8000ee2:	464b      	mov	r3, r9
 8000ee4:	d354      	bcc.n	8000f90 <__udivmoddi4+0x298>
 8000ee6:	d051      	beq.n	8000f8c <__udivmoddi4+0x294>
 8000ee8:	2e00      	cmp	r6, #0
 8000eea:	d069      	beq.n	8000fc0 <__udivmoddi4+0x2c8>
 8000eec:	ebb1 050a 	subs.w	r5, r1, sl
 8000ef0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ef4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ef8:	40fd      	lsrs	r5, r7
 8000efa:	40fc      	lsrs	r4, r7
 8000efc:	ea4c 0505 	orr.w	r5, ip, r5
 8000f00:	e9c6 5400 	strd	r5, r4, [r6]
 8000f04:	2700      	movs	r7, #0
 8000f06:	e747      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f08:	f1c2 0320 	rsb	r3, r2, #32
 8000f0c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f10:	4095      	lsls	r5, r2
 8000f12:	fa01 f002 	lsl.w	r0, r1, r2
 8000f16:	fa21 f303 	lsr.w	r3, r1, r3
 8000f1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f1e:	4338      	orrs	r0, r7
 8000f20:	0c01      	lsrs	r1, r0, #16
 8000f22:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f26:	fa1f f885 	uxth.w	r8, r5
 8000f2a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f32:	fb07 f308 	mul.w	r3, r7, r8
 8000f36:	428b      	cmp	r3, r1
 8000f38:	fa04 f402 	lsl.w	r4, r4, r2
 8000f3c:	d907      	bls.n	8000f4e <__udivmoddi4+0x256>
 8000f3e:	1869      	adds	r1, r5, r1
 8000f40:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f44:	d22f      	bcs.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f46:	428b      	cmp	r3, r1
 8000f48:	d92d      	bls.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f4a:	3f02      	subs	r7, #2
 8000f4c:	4429      	add	r1, r5
 8000f4e:	1acb      	subs	r3, r1, r3
 8000f50:	b281      	uxth	r1, r0
 8000f52:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f56:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f5e:	fb00 f308 	mul.w	r3, r0, r8
 8000f62:	428b      	cmp	r3, r1
 8000f64:	d907      	bls.n	8000f76 <__udivmoddi4+0x27e>
 8000f66:	1869      	adds	r1, r5, r1
 8000f68:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f6c:	d217      	bcs.n	8000f9e <__udivmoddi4+0x2a6>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	d915      	bls.n	8000f9e <__udivmoddi4+0x2a6>
 8000f72:	3802      	subs	r0, #2
 8000f74:	4429      	add	r1, r5
 8000f76:	1ac9      	subs	r1, r1, r3
 8000f78:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f7c:	e73b      	b.n	8000df6 <__udivmoddi4+0xfe>
 8000f7e:	4637      	mov	r7, r6
 8000f80:	4630      	mov	r0, r6
 8000f82:	e709      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f84:	4607      	mov	r7, r0
 8000f86:	e6e7      	b.n	8000d58 <__udivmoddi4+0x60>
 8000f88:	4618      	mov	r0, r3
 8000f8a:	e6fb      	b.n	8000d84 <__udivmoddi4+0x8c>
 8000f8c:	4541      	cmp	r1, r8
 8000f8e:	d2ab      	bcs.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f90:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f94:	eb69 020e 	sbc.w	r2, r9, lr
 8000f98:	3801      	subs	r0, #1
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	e7a4      	b.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f9e:	4660      	mov	r0, ip
 8000fa0:	e7e9      	b.n	8000f76 <__udivmoddi4+0x27e>
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	e795      	b.n	8000ed2 <__udivmoddi4+0x1da>
 8000fa6:	4667      	mov	r7, ip
 8000fa8:	e7d1      	b.n	8000f4e <__udivmoddi4+0x256>
 8000faa:	4681      	mov	r9, r0
 8000fac:	e77c      	b.n	8000ea8 <__udivmoddi4+0x1b0>
 8000fae:	3802      	subs	r0, #2
 8000fb0:	442c      	add	r4, r5
 8000fb2:	e747      	b.n	8000e44 <__udivmoddi4+0x14c>
 8000fb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fb8:	442b      	add	r3, r5
 8000fba:	e72f      	b.n	8000e1c <__udivmoddi4+0x124>
 8000fbc:	4638      	mov	r0, r7
 8000fbe:	e708      	b.n	8000dd2 <__udivmoddi4+0xda>
 8000fc0:	4637      	mov	r7, r6
 8000fc2:	e6e9      	b.n	8000d98 <__udivmoddi4+0xa0>

08000fc4 <__aeabi_idiv0>:
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	6039      	str	r1, [r7, #0]

  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	ed93 7a06 	vldr	s14, [r3, #24]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	edd3 7a07 	vldr	s15, [r3, #28]
 8000fde:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	edd3 7a08 	vldr	s15, [r3, #32]
 8000fe8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0 * S->Kd);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	edd3 7a06 	vldr	s15, [r3, #24]
 8000ff8:	eeb1 7a67 	vneg.f32	s14, s15
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	edd3 7a08 	vldr	s15, [r3, #32]
 8001002:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001006:	ee77 7a67 	vsub.f32	s15, s14, s15
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6a1a      	ldr	r2, [r3, #32]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if(resetStateFlag)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d006      	beq.n	800102c <arm_pid_init_f32+0x64>
  {
    /* Clear the state buffer.  The size will be always 3 samples */
    memset(S->state, 0, 3u * sizeof(float32_t));
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	330c      	adds	r3, #12
 8001022:	220c      	movs	r2, #12
 8001024:	2100      	movs	r1, #0
 8001026:	4618      	mov	r0, r3
 8001028:	f006 fe88 	bl	8007d3c <memset>
  }

}
 800102c:	bf00      	nop
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <BH1750_Init>:

//
//	Initialization.
//
BH1750_STATUS BH1750_Init(I2C_HandleTypeDef *hi2c)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
	bh1750_i2c = hi2c;
 800103c:	4a0a      	ldr	r2, [pc, #40]	; (8001068 <BH1750_Init+0x34>)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6013      	str	r3, [r2, #0]
	if(BH1750_OK == BH1750_Reset())
 8001042:	f000 f813 	bl	800106c <BH1750_Reset>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d107      	bne.n	800105c <BH1750_Init+0x28>
	{
		if(BH1750_OK == BH1750_SetMtreg(BH1750_DEFAULT_MTREG)) // Set default value;
 800104c:	2045      	movs	r0, #69	; 0x45
 800104e:	f000 f859 	bl	8001104 <BH1750_SetMtreg>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d101      	bne.n	800105c <BH1750_Init+0x28>
			return BH1750_OK;
 8001058:	2300      	movs	r3, #0
 800105a:	e000      	b.n	800105e <BH1750_Init+0x2a>
	}
	return BH1750_ERROR;
 800105c:	2301      	movs	r3, #1
}
 800105e:	4618      	mov	r0, r3
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000208 	.word	0x20000208

0800106c <BH1750_Reset>:

//
//	Reset all registers to default value.
//
BH1750_STATUS BH1750_Reset(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af02      	add	r7, sp, #8
	uint8_t tmp = 0x07;
 8001072:	2307      	movs	r3, #7
 8001074:	71fb      	strb	r3, [r7, #7]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp, 1, 10))
 8001076:	4b09      	ldr	r3, [pc, #36]	; (800109c <BH1750_Reset+0x30>)
 8001078:	6818      	ldr	r0, [r3, #0]
 800107a:	1dfa      	adds	r2, r7, #7
 800107c:	230a      	movs	r3, #10
 800107e:	9300      	str	r3, [sp, #0]
 8001080:	2301      	movs	r3, #1
 8001082:	2146      	movs	r1, #70	; 0x46
 8001084:	f002 fa52 	bl	800352c <HAL_I2C_Master_Transmit>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d101      	bne.n	8001092 <BH1750_Reset+0x26>
		return BH1750_OK;
 800108e:	2300      	movs	r3, #0
 8001090:	e000      	b.n	8001094 <BH1750_Reset+0x28>

	return BH1750_ERROR;
 8001092:	2301      	movs	r3, #1
}
 8001094:	4618      	mov	r0, r3
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20000208 	.word	0x20000208

080010a0 <BH1750_SetMode>:

//
//	Set the mode of converting. Look into bh1750_mode enum.
//
BH1750_STATUS BH1750_SetMode(bh1750_mode Mode)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af02      	add	r7, sp, #8
 80010a6:	4603      	mov	r3, r0
 80010a8:	71fb      	strb	r3, [r7, #7]
	if(!((Mode >> 4) || (Mode >> 5))) return BH1750_ERROR;
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	091b      	lsrs	r3, r3, #4
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d106      	bne.n	80010c2 <BH1750_SetMode+0x22>
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	095b      	lsrs	r3, r3, #5
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d101      	bne.n	80010c2 <BH1750_SetMode+0x22>
 80010be:	2301      	movs	r3, #1
 80010c0:	e018      	b.n	80010f4 <BH1750_SetMode+0x54>
	if((Mode & 0x0F) > 3) return BH1750_ERROR;
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	f003 030f 	and.w	r3, r3, #15
 80010c8:	2b03      	cmp	r3, #3
 80010ca:	dd01      	ble.n	80010d0 <BH1750_SetMode+0x30>
 80010cc:	2301      	movs	r3, #1
 80010ce:	e011      	b.n	80010f4 <BH1750_SetMode+0x54>

	Bh1750_Mode = Mode;
 80010d0:	79fa      	ldrb	r2, [r7, #7]
 80010d2:	4b0a      	ldr	r3, [pc, #40]	; (80010fc <BH1750_SetMode+0x5c>)
 80010d4:	701a      	strb	r2, [r3, #0]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &Mode, 1, 10))
 80010d6:	4b0a      	ldr	r3, [pc, #40]	; (8001100 <BH1750_SetMode+0x60>)
 80010d8:	6818      	ldr	r0, [r3, #0]
 80010da:	1dfa      	adds	r2, r7, #7
 80010dc:	230a      	movs	r3, #10
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	2301      	movs	r3, #1
 80010e2:	2146      	movs	r1, #70	; 0x46
 80010e4:	f002 fa22 	bl	800352c <HAL_I2C_Master_Transmit>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d101      	bne.n	80010f2 <BH1750_SetMode+0x52>
		return BH1750_OK;
 80010ee:	2300      	movs	r3, #0
 80010f0:	e000      	b.n	80010f4 <BH1750_SetMode+0x54>

	return BH1750_ERROR;
 80010f2:	2301      	movs	r3, #1
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000204 	.word	0x20000204
 8001100:	20000208 	.word	0x20000208

08001104 <BH1750_SetMtreg>:

//
//	Set the Measurement Time register. It allows to increase or decrease the sensitivity.
//
BH1750_STATUS BH1750_SetMtreg(uint8_t Mtreg)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af02      	add	r7, sp, #8
 800110a:	4603      	mov	r3, r0
 800110c:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef retCode;
	if (Mtreg < 31 || Mtreg > 254) {
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	2b1e      	cmp	r3, #30
 8001112:	d902      	bls.n	800111a <BH1750_SetMtreg+0x16>
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	2bff      	cmp	r3, #255	; 0xff
 8001118:	d101      	bne.n	800111e <BH1750_SetMtreg+0x1a>
		return BH1750_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e037      	b.n	800118e <BH1750_SetMtreg+0x8a>
	}

	Bh1750_Mtreg = Mtreg;
 800111e:	4a1e      	ldr	r2, [pc, #120]	; (8001198 <BH1750_SetMtreg+0x94>)
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	7013      	strb	r3, [r2, #0]

	uint8_t tmp[2];

	tmp[0] = (0x40 | (Mtreg >> 5));
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	095b      	lsrs	r3, r3, #5
 8001128:	b2db      	uxtb	r3, r3
 800112a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800112e:	b2db      	uxtb	r3, r3
 8001130:	733b      	strb	r3, [r7, #12]
	tmp[1] = (0x60 | (Mtreg & 0x1F));
 8001132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001136:	f003 031f 	and.w	r3, r3, #31
 800113a:	b25b      	sxtb	r3, r3
 800113c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001140:	b25b      	sxtb	r3, r3
 8001142:	b2db      	uxtb	r3, r3
 8001144:	737b      	strb	r3, [r7, #13]

	retCode = HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp[0], 1, 10);
 8001146:	4b15      	ldr	r3, [pc, #84]	; (800119c <BH1750_SetMtreg+0x98>)
 8001148:	6818      	ldr	r0, [r3, #0]
 800114a:	f107 020c 	add.w	r2, r7, #12
 800114e:	230a      	movs	r3, #10
 8001150:	9300      	str	r3, [sp, #0]
 8001152:	2301      	movs	r3, #1
 8001154:	2146      	movs	r1, #70	; 0x46
 8001156:	f002 f9e9 	bl	800352c <HAL_I2C_Master_Transmit>
 800115a:	4603      	mov	r3, r0
 800115c:	73fb      	strb	r3, [r7, #15]
	if (HAL_OK != retCode) {
 800115e:	7bfb      	ldrb	r3, [r7, #15]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <BH1750_SetMtreg+0x64>
		return BH1750_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	e012      	b.n	800118e <BH1750_SetMtreg+0x8a>
	}

	retCode = HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp[1], 1, 10);
 8001168:	4b0c      	ldr	r3, [pc, #48]	; (800119c <BH1750_SetMtreg+0x98>)
 800116a:	6818      	ldr	r0, [r3, #0]
 800116c:	f107 030c 	add.w	r3, r7, #12
 8001170:	1c5a      	adds	r2, r3, #1
 8001172:	230a      	movs	r3, #10
 8001174:	9300      	str	r3, [sp, #0]
 8001176:	2301      	movs	r3, #1
 8001178:	2146      	movs	r1, #70	; 0x46
 800117a:	f002 f9d7 	bl	800352c <HAL_I2C_Master_Transmit>
 800117e:	4603      	mov	r3, r0
 8001180:	73fb      	strb	r3, [r7, #15]
	if (HAL_OK == retCode) {
 8001182:	7bfb      	ldrb	r3, [r7, #15]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d101      	bne.n	800118c <BH1750_SetMtreg+0x88>
		return BH1750_OK;
 8001188:	2300      	movs	r3, #0
 800118a:	e000      	b.n	800118e <BH1750_SetMtreg+0x8a>
	}

	return BH1750_ERROR;
 800118c:	2301      	movs	r3, #1
}
 800118e:	4618      	mov	r0, r3
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	2000020c 	.word	0x2000020c
 800119c:	20000208 	.word	0x20000208

080011a0 <BH1750_ReadLight>:

//
//	Read the converted value and calculate the result.
//
BH1750_STATUS BH1750_ReadLight(float *Result)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af02      	add	r7, sp, #8
 80011a6:	6078      	str	r0, [r7, #4]
	float result;
	uint8_t tmp[2];

	if(HAL_OK == HAL_I2C_Master_Receive(bh1750_i2c, BH1750_ADDRESS, tmp, 2, 10))
 80011a8:	4b25      	ldr	r3, [pc, #148]	; (8001240 <BH1750_ReadLight+0xa0>)
 80011aa:	6818      	ldr	r0, [r3, #0]
 80011ac:	f107 0208 	add.w	r2, r7, #8
 80011b0:	230a      	movs	r3, #10
 80011b2:	9300      	str	r3, [sp, #0]
 80011b4:	2302      	movs	r3, #2
 80011b6:	2146      	movs	r1, #70	; 0x46
 80011b8:	f002 faac 	bl	8003714 <HAL_I2C_Master_Receive>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d138      	bne.n	8001234 <BH1750_ReadLight+0x94>
	{
		result = (tmp[0] << 8) | (tmp[1]);
 80011c2:	7a3b      	ldrb	r3, [r7, #8]
 80011c4:	021b      	lsls	r3, r3, #8
 80011c6:	7a7a      	ldrb	r2, [r7, #9]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	ee07 3a90 	vmov	s15, r3
 80011ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011d2:	edc7 7a03 	vstr	s15, [r7, #12]

		if(Bh1750_Mtreg != BH1750_DEFAULT_MTREG)
 80011d6:	4b1b      	ldr	r3, [pc, #108]	; (8001244 <BH1750_ReadLight+0xa4>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	2b45      	cmp	r3, #69	; 0x45
 80011dc:	d00f      	beq.n	80011fe <BH1750_ReadLight+0x5e>
		{
			result *= (float)((uint8_t)BH1750_DEFAULT_MTREG/(float)Bh1750_Mtreg);
 80011de:	4b19      	ldr	r3, [pc, #100]	; (8001244 <BH1750_ReadLight+0xa4>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	ee07 3a90 	vmov	s15, r3
 80011e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011ea:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001248 <BH1750_ReadLight+0xa8>
 80011ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011f2:	ed97 7a03 	vldr	s14, [r7, #12]
 80011f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011fa:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		if(Bh1750_Mode == ONETIME_HIGH_RES_MODE_2 || Bh1750_Mode == CONTINUOUS_HIGH_RES_MODE_2)
 80011fe:	4b13      	ldr	r3, [pc, #76]	; (800124c <BH1750_ReadLight+0xac>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	2b21      	cmp	r3, #33	; 0x21
 8001204:	d003      	beq.n	800120e <BH1750_ReadLight+0x6e>
 8001206:	4b11      	ldr	r3, [pc, #68]	; (800124c <BH1750_ReadLight+0xac>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2b11      	cmp	r3, #17
 800120c:	d107      	bne.n	800121e <BH1750_ReadLight+0x7e>
		{
			result /= 2.0;
 800120e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001212:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001216:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800121a:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		*Result = result / (float)BH1750_CONVERSION_FACTOR;
 800121e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001222:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001250 <BH1750_ReadLight+0xb0>
 8001226:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	edc3 7a00 	vstr	s15, [r3]
		return BH1750_OK;
 8001230:	2300      	movs	r3, #0
 8001232:	e000      	b.n	8001236 <BH1750_ReadLight+0x96>
	}
	return BH1750_ERROR;
 8001234:	2301      	movs	r3, #1
}
 8001236:	4618      	mov	r0, r3
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20000208 	.word	0x20000208
 8001244:	2000020c 	.word	0x2000020c
 8001248:	428a0000 	.word	0x428a0000
 800124c:	20000204 	.word	0x20000204
 8001250:	3f99999a 	.word	0x3f99999a

08001254 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0

  heth.Instance = ETH;
 8001258:	4b1c      	ldr	r3, [pc, #112]	; (80012cc <MX_ETH_Init+0x78>)
 800125a:	4a1d      	ldr	r2, [pc, #116]	; (80012d0 <MX_ETH_Init+0x7c>)
 800125c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800125e:	4b1b      	ldr	r3, [pc, #108]	; (80012cc <MX_ETH_Init+0x78>)
 8001260:	2201      	movs	r2, #1
 8001262:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8001264:	4b19      	ldr	r3, [pc, #100]	; (80012cc <MX_ETH_Init+0x78>)
 8001266:	2200      	movs	r2, #0
 8001268:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 800126a:	4b18      	ldr	r3, [pc, #96]	; (80012cc <MX_ETH_Init+0x78>)
 800126c:	695b      	ldr	r3, [r3, #20]
 800126e:	2200      	movs	r2, #0
 8001270:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8001272:	4b16      	ldr	r3, [pc, #88]	; (80012cc <MX_ETH_Init+0x78>)
 8001274:	695b      	ldr	r3, [r3, #20]
 8001276:	3301      	adds	r3, #1
 8001278:	2280      	movs	r2, #128	; 0x80
 800127a:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 800127c:	4b13      	ldr	r3, [pc, #76]	; (80012cc <MX_ETH_Init+0x78>)
 800127e:	695b      	ldr	r3, [r3, #20]
 8001280:	3302      	adds	r3, #2
 8001282:	22e1      	movs	r2, #225	; 0xe1
 8001284:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8001286:	4b11      	ldr	r3, [pc, #68]	; (80012cc <MX_ETH_Init+0x78>)
 8001288:	695b      	ldr	r3, [r3, #20]
 800128a:	3303      	adds	r3, #3
 800128c:	2200      	movs	r2, #0
 800128e:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8001290:	4b0e      	ldr	r3, [pc, #56]	; (80012cc <MX_ETH_Init+0x78>)
 8001292:	695b      	ldr	r3, [r3, #20]
 8001294:	3304      	adds	r3, #4
 8001296:	2200      	movs	r2, #0
 8001298:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 800129a:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <MX_ETH_Init+0x78>)
 800129c:	695b      	ldr	r3, [r3, #20]
 800129e:	3305      	adds	r3, #5
 80012a0:	2200      	movs	r2, #0
 80012a2:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 80012a4:	4b09      	ldr	r3, [pc, #36]	; (80012cc <MX_ETH_Init+0x78>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80012aa:	4b08      	ldr	r3, [pc, #32]	; (80012cc <MX_ETH_Init+0x78>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80012b0:	4b06      	ldr	r3, [pc, #24]	; (80012cc <MX_ETH_Init+0x78>)
 80012b2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80012b6:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80012b8:	4804      	ldr	r0, [pc, #16]	; (80012cc <MX_ETH_Init+0x78>)
 80012ba:	f001 fa5f 	bl	800277c <HAL_ETH_Init>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_ETH_Init+0x74>
  {
    Error_Handler();
 80012c4:	f000 fdc8 	bl	8001e58 <Error_Handler>
  }

}
 80012c8:	bf00      	nop
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20000210 	.word	0x20000210
 80012d0:	40028000 	.word	0x40028000

080012d4 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b08e      	sub	sp, #56	; 0x38
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	60da      	str	r2, [r3, #12]
 80012ea:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a4e      	ldr	r2, [pc, #312]	; (800142c <HAL_ETH_MspInit+0x158>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	f040 8096 	bne.w	8001424 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80012f8:	4b4d      	ldr	r3, [pc, #308]	; (8001430 <HAL_ETH_MspInit+0x15c>)
 80012fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fc:	4a4c      	ldr	r2, [pc, #304]	; (8001430 <HAL_ETH_MspInit+0x15c>)
 80012fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001302:	6313      	str	r3, [r2, #48]	; 0x30
 8001304:	4b4a      	ldr	r3, [pc, #296]	; (8001430 <HAL_ETH_MspInit+0x15c>)
 8001306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800130c:	623b      	str	r3, [r7, #32]
 800130e:	6a3b      	ldr	r3, [r7, #32]
 8001310:	4b47      	ldr	r3, [pc, #284]	; (8001430 <HAL_ETH_MspInit+0x15c>)
 8001312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001314:	4a46      	ldr	r2, [pc, #280]	; (8001430 <HAL_ETH_MspInit+0x15c>)
 8001316:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800131a:	6313      	str	r3, [r2, #48]	; 0x30
 800131c:	4b44      	ldr	r3, [pc, #272]	; (8001430 <HAL_ETH_MspInit+0x15c>)
 800131e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001320:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001324:	61fb      	str	r3, [r7, #28]
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	4b41      	ldr	r3, [pc, #260]	; (8001430 <HAL_ETH_MspInit+0x15c>)
 800132a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132c:	4a40      	ldr	r2, [pc, #256]	; (8001430 <HAL_ETH_MspInit+0x15c>)
 800132e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001332:	6313      	str	r3, [r2, #48]	; 0x30
 8001334:	4b3e      	ldr	r3, [pc, #248]	; (8001430 <HAL_ETH_MspInit+0x15c>)
 8001336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001338:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800133c:	61bb      	str	r3, [r7, #24]
 800133e:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001340:	4b3b      	ldr	r3, [pc, #236]	; (8001430 <HAL_ETH_MspInit+0x15c>)
 8001342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001344:	4a3a      	ldr	r2, [pc, #232]	; (8001430 <HAL_ETH_MspInit+0x15c>)
 8001346:	f043 0304 	orr.w	r3, r3, #4
 800134a:	6313      	str	r3, [r2, #48]	; 0x30
 800134c:	4b38      	ldr	r3, [pc, #224]	; (8001430 <HAL_ETH_MspInit+0x15c>)
 800134e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001350:	f003 0304 	and.w	r3, r3, #4
 8001354:	617b      	str	r3, [r7, #20]
 8001356:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001358:	4b35      	ldr	r3, [pc, #212]	; (8001430 <HAL_ETH_MspInit+0x15c>)
 800135a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135c:	4a34      	ldr	r2, [pc, #208]	; (8001430 <HAL_ETH_MspInit+0x15c>)
 800135e:	f043 0301 	orr.w	r3, r3, #1
 8001362:	6313      	str	r3, [r2, #48]	; 0x30
 8001364:	4b32      	ldr	r3, [pc, #200]	; (8001430 <HAL_ETH_MspInit+0x15c>)
 8001366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001368:	f003 0301 	and.w	r3, r3, #1
 800136c:	613b      	str	r3, [r7, #16]
 800136e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001370:	4b2f      	ldr	r3, [pc, #188]	; (8001430 <HAL_ETH_MspInit+0x15c>)
 8001372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001374:	4a2e      	ldr	r2, [pc, #184]	; (8001430 <HAL_ETH_MspInit+0x15c>)
 8001376:	f043 0302 	orr.w	r3, r3, #2
 800137a:	6313      	str	r3, [r2, #48]	; 0x30
 800137c:	4b2c      	ldr	r3, [pc, #176]	; (8001430 <HAL_ETH_MspInit+0x15c>)
 800137e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001380:	f003 0302 	and.w	r3, r3, #2
 8001384:	60fb      	str	r3, [r7, #12]
 8001386:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001388:	4b29      	ldr	r3, [pc, #164]	; (8001430 <HAL_ETH_MspInit+0x15c>)
 800138a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138c:	4a28      	ldr	r2, [pc, #160]	; (8001430 <HAL_ETH_MspInit+0x15c>)
 800138e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001392:	6313      	str	r3, [r2, #48]	; 0x30
 8001394:	4b26      	ldr	r3, [pc, #152]	; (8001430 <HAL_ETH_MspInit+0x15c>)
 8001396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800139c:	60bb      	str	r3, [r7, #8]
 800139e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80013a0:	2332      	movs	r3, #50	; 0x32
 80013a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a4:	2302      	movs	r3, #2
 80013a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ac:	2303      	movs	r3, #3
 80013ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013b0:	230b      	movs	r3, #11
 80013b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b8:	4619      	mov	r1, r3
 80013ba:	481e      	ldr	r0, [pc, #120]	; (8001434 <HAL_ETH_MspInit+0x160>)
 80013bc:	f001 fe4a 	bl	8003054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80013c0:	2386      	movs	r3, #134	; 0x86
 80013c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c4:	2302      	movs	r3, #2
 80013c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013cc:	2303      	movs	r3, #3
 80013ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013d0:	230b      	movs	r3, #11
 80013d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d8:	4619      	mov	r1, r3
 80013da:	4817      	ldr	r0, [pc, #92]	; (8001438 <HAL_ETH_MspInit+0x164>)
 80013dc:	f001 fe3a 	bl	8003054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80013e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e6:	2302      	movs	r3, #2
 80013e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ee:	2303      	movs	r3, #3
 80013f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013f2:	230b      	movs	r3, #11
 80013f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80013f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013fa:	4619      	mov	r1, r3
 80013fc:	480f      	ldr	r0, [pc, #60]	; (800143c <HAL_ETH_MspInit+0x168>)
 80013fe:	f001 fe29 	bl	8003054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001402:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001406:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001408:	2302      	movs	r3, #2
 800140a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001410:	2303      	movs	r3, #3
 8001412:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001414:	230b      	movs	r3, #11
 8001416:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001418:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800141c:	4619      	mov	r1, r3
 800141e:	4808      	ldr	r0, [pc, #32]	; (8001440 <HAL_ETH_MspInit+0x16c>)
 8001420:	f001 fe18 	bl	8003054 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8001424:	bf00      	nop
 8001426:	3738      	adds	r7, #56	; 0x38
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40028000 	.word	0x40028000
 8001430:	40023800 	.word	0x40023800
 8001434:	40020800 	.word	0x40020800
 8001438:	40020000 	.word	0x40020000
 800143c:	40020400 	.word	0x40020400
 8001440:	40021800 	.word	0x40021800

08001444 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08c      	sub	sp, #48	; 0x30
 8001448:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144a:	f107 031c 	add.w	r3, r7, #28
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]
 8001454:	609a      	str	r2, [r3, #8]
 8001456:	60da      	str	r2, [r3, #12]
 8001458:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800145a:	4b4c      	ldr	r3, [pc, #304]	; (800158c <MX_GPIO_Init+0x148>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	4a4b      	ldr	r2, [pc, #300]	; (800158c <MX_GPIO_Init+0x148>)
 8001460:	f043 0304 	orr.w	r3, r3, #4
 8001464:	6313      	str	r3, [r2, #48]	; 0x30
 8001466:	4b49      	ldr	r3, [pc, #292]	; (800158c <MX_GPIO_Init+0x148>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	f003 0304 	and.w	r3, r3, #4
 800146e:	61bb      	str	r3, [r7, #24]
 8001470:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001472:	4b46      	ldr	r3, [pc, #280]	; (800158c <MX_GPIO_Init+0x148>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	4a45      	ldr	r2, [pc, #276]	; (800158c <MX_GPIO_Init+0x148>)
 8001478:	f043 0320 	orr.w	r3, r3, #32
 800147c:	6313      	str	r3, [r2, #48]	; 0x30
 800147e:	4b43      	ldr	r3, [pc, #268]	; (800158c <MX_GPIO_Init+0x148>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	f003 0320 	and.w	r3, r3, #32
 8001486:	617b      	str	r3, [r7, #20]
 8001488:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800148a:	4b40      	ldr	r3, [pc, #256]	; (800158c <MX_GPIO_Init+0x148>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	4a3f      	ldr	r2, [pc, #252]	; (800158c <MX_GPIO_Init+0x148>)
 8001490:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001494:	6313      	str	r3, [r2, #48]	; 0x30
 8001496:	4b3d      	ldr	r3, [pc, #244]	; (800158c <MX_GPIO_Init+0x148>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800149e:	613b      	str	r3, [r7, #16]
 80014a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a2:	4b3a      	ldr	r3, [pc, #232]	; (800158c <MX_GPIO_Init+0x148>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	4a39      	ldr	r2, [pc, #228]	; (800158c <MX_GPIO_Init+0x148>)
 80014a8:	f043 0301 	orr.w	r3, r3, #1
 80014ac:	6313      	str	r3, [r2, #48]	; 0x30
 80014ae:	4b37      	ldr	r3, [pc, #220]	; (800158c <MX_GPIO_Init+0x148>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ba:	4b34      	ldr	r3, [pc, #208]	; (800158c <MX_GPIO_Init+0x148>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a33      	ldr	r2, [pc, #204]	; (800158c <MX_GPIO_Init+0x148>)
 80014c0:	f043 0302 	orr.w	r3, r3, #2
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b31      	ldr	r3, [pc, #196]	; (800158c <MX_GPIO_Init+0x148>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	60bb      	str	r3, [r7, #8]
 80014d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014d2:	4b2e      	ldr	r3, [pc, #184]	; (800158c <MX_GPIO_Init+0x148>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	4a2d      	ldr	r2, [pc, #180]	; (800158c <MX_GPIO_Init+0x148>)
 80014d8:	f043 0308 	orr.w	r3, r3, #8
 80014dc:	6313      	str	r3, [r2, #48]	; 0x30
 80014de:	4b2b      	ldr	r3, [pc, #172]	; (800158c <MX_GPIO_Init+0x148>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f003 0308 	and.w	r3, r3, #8
 80014e6:	607b      	str	r3, [r7, #4]
 80014e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014ea:	4b28      	ldr	r3, [pc, #160]	; (800158c <MX_GPIO_Init+0x148>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	4a27      	ldr	r2, [pc, #156]	; (800158c <MX_GPIO_Init+0x148>)
 80014f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014f4:	6313      	str	r3, [r2, #48]	; 0x30
 80014f6:	4b25      	ldr	r3, [pc, #148]	; (800158c <MX_GPIO_Init+0x148>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014fe:	603b      	str	r3, [r7, #0]
 8001500:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001502:	2200      	movs	r2, #0
 8001504:	f244 0181 	movw	r1, #16513	; 0x4081
 8001508:	4821      	ldr	r0, [pc, #132]	; (8001590 <MX_GPIO_Init+0x14c>)
 800150a:	f001 ff65 	bl	80033d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800150e:	2200      	movs	r2, #0
 8001510:	2140      	movs	r1, #64	; 0x40
 8001512:	4820      	ldr	r0, [pc, #128]	; (8001594 <MX_GPIO_Init+0x150>)
 8001514:	f001 ff60 	bl	80033d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001518:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800151c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800151e:	4b1e      	ldr	r3, [pc, #120]	; (8001598 <MX_GPIO_Init+0x154>)
 8001520:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001526:	f107 031c 	add.w	r3, r7, #28
 800152a:	4619      	mov	r1, r3
 800152c:	481b      	ldr	r0, [pc, #108]	; (800159c <MX_GPIO_Init+0x158>)
 800152e:	f001 fd91 	bl	8003054 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001532:	f244 0381 	movw	r3, #16513	; 0x4081
 8001536:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001538:	2301      	movs	r3, #1
 800153a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001540:	2300      	movs	r3, #0
 8001542:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001544:	f107 031c 	add.w	r3, r7, #28
 8001548:	4619      	mov	r1, r3
 800154a:	4811      	ldr	r0, [pc, #68]	; (8001590 <MX_GPIO_Init+0x14c>)
 800154c:	f001 fd82 	bl	8003054 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001550:	2340      	movs	r3, #64	; 0x40
 8001552:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001554:	2301      	movs	r3, #1
 8001556:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155c:	2300      	movs	r3, #0
 800155e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001560:	f107 031c 	add.w	r3, r7, #28
 8001564:	4619      	mov	r1, r3
 8001566:	480b      	ldr	r0, [pc, #44]	; (8001594 <MX_GPIO_Init+0x150>)
 8001568:	f001 fd74 	bl	8003054 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800156c:	2380      	movs	r3, #128	; 0x80
 800156e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001570:	2300      	movs	r3, #0
 8001572:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001578:	f107 031c 	add.w	r3, r7, #28
 800157c:	4619      	mov	r1, r3
 800157e:	4805      	ldr	r0, [pc, #20]	; (8001594 <MX_GPIO_Init+0x150>)
 8001580:	f001 fd68 	bl	8003054 <HAL_GPIO_Init>

}
 8001584:	bf00      	nop
 8001586:	3730      	adds	r7, #48	; 0x30
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40023800 	.word	0x40023800
 8001590:	40020400 	.word	0x40020400
 8001594:	40021800 	.word	0x40021800
 8001598:	10110000 	.word	0x10110000
 800159c:	40020800 	.word	0x40020800

080015a0 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af02      	add	r7, sp, #8
 80015a6:	4603      	mov	r3, r0
 80015a8:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	f023 030f 	bic.w	r3, r3, #15
 80015b0:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80015b2:	79fb      	ldrb	r3, [r7, #7]
 80015b4:	011b      	lsls	r3, r3, #4
 80015b6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80015b8:	7bfb      	ldrb	r3, [r7, #15]
 80015ba:	f043 030c 	orr.w	r3, r3, #12
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80015c2:	7bfb      	ldrb	r3, [r7, #15]
 80015c4:	f043 0308 	orr.w	r3, r3, #8
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80015cc:	7bbb      	ldrb	r3, [r7, #14]
 80015ce:	f043 030c 	orr.w	r3, r3, #12
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80015d6:	7bbb      	ldrb	r3, [r7, #14]
 80015d8:	f043 0308 	orr.w	r3, r3, #8
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80015e0:	f107 0208 	add.w	r2, r7, #8
 80015e4:	2364      	movs	r3, #100	; 0x64
 80015e6:	9300      	str	r3, [sp, #0]
 80015e8:	2304      	movs	r3, #4
 80015ea:	214e      	movs	r1, #78	; 0x4e
 80015ec:	4803      	ldr	r0, [pc, #12]	; (80015fc <lcd_send_cmd+0x5c>)
 80015ee:	f001 ff9d 	bl	800352c <HAL_I2C_Master_Transmit>
}
 80015f2:	bf00      	nop
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000258 	.word	0x20000258

08001600 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af02      	add	r7, sp, #8
 8001606:	4603      	mov	r3, r0
 8001608:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800160a:	79fb      	ldrb	r3, [r7, #7]
 800160c:	f023 030f 	bic.w	r3, r3, #15
 8001610:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001612:	79fb      	ldrb	r3, [r7, #7]
 8001614:	011b      	lsls	r3, r3, #4
 8001616:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001618:	7bfb      	ldrb	r3, [r7, #15]
 800161a:	f043 030d 	orr.w	r3, r3, #13
 800161e:	b2db      	uxtb	r3, r3
 8001620:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001622:	7bfb      	ldrb	r3, [r7, #15]
 8001624:	f043 0309 	orr.w	r3, r3, #9
 8001628:	b2db      	uxtb	r3, r3
 800162a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800162c:	7bbb      	ldrb	r3, [r7, #14]
 800162e:	f043 030d 	orr.w	r3, r3, #13
 8001632:	b2db      	uxtb	r3, r3
 8001634:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001636:	7bbb      	ldrb	r3, [r7, #14]
 8001638:	f043 0309 	orr.w	r3, r3, #9
 800163c:	b2db      	uxtb	r3, r3
 800163e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001640:	f107 0208 	add.w	r2, r7, #8
 8001644:	2364      	movs	r3, #100	; 0x64
 8001646:	9300      	str	r3, [sp, #0]
 8001648:	2304      	movs	r3, #4
 800164a:	214e      	movs	r1, #78	; 0x4e
 800164c:	4803      	ldr	r0, [pc, #12]	; (800165c <lcd_send_data+0x5c>)
 800164e:	f001 ff6d 	bl	800352c <HAL_I2C_Master_Transmit>
}
 8001652:	bf00      	nop
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	20000258 	.word	0x20000258

08001660 <lcd_clear>:

void lcd_clear (void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8001666:	2080      	movs	r0, #128	; 0x80
 8001668:	f7ff ff9a 	bl	80015a0 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 800166c:	2300      	movs	r3, #0
 800166e:	607b      	str	r3, [r7, #4]
 8001670:	e005      	b.n	800167e <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8001672:	2020      	movs	r0, #32
 8001674:	f7ff ffc4 	bl	8001600 <lcd_send_data>
	for (int i=0; i<70; i++)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	3301      	adds	r3, #1
 800167c:	607b      	str	r3, [r7, #4]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2b45      	cmp	r3, #69	; 0x45
 8001682:	ddf6      	ble.n	8001672 <lcd_clear+0x12>
	}
}
 8001684:	bf00      	nop
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
    switch (row)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d002      	beq.n	80016a2 <lcd_put_cur+0x16>
 800169c:	2b01      	cmp	r3, #1
 800169e:	d005      	beq.n	80016ac <lcd_put_cur+0x20>
 80016a0:	e009      	b.n	80016b6 <lcd_put_cur+0x2a>
    {
        case 0:
            col |= 0x80;
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016a8:	603b      	str	r3, [r7, #0]
            break;
 80016aa:	e004      	b.n	80016b6 <lcd_put_cur+0x2a>
        case 1:
            col |= 0xC0;
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80016b2:	603b      	str	r3, [r7, #0]
            break;
 80016b4:	bf00      	nop
    }

    lcd_send_cmd (col);
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff ff70 	bl	80015a0 <lcd_send_cmd>
}
 80016c0:	bf00      	nop
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <lcd_init>:


void lcd_init (void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80016cc:	2032      	movs	r0, #50	; 0x32
 80016ce:	f000 feff 	bl	80024d0 <HAL_Delay>
	lcd_send_cmd (0x30);
 80016d2:	2030      	movs	r0, #48	; 0x30
 80016d4:	f7ff ff64 	bl	80015a0 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80016d8:	2005      	movs	r0, #5
 80016da:	f000 fef9 	bl	80024d0 <HAL_Delay>
	lcd_send_cmd (0x30);
 80016de:	2030      	movs	r0, #48	; 0x30
 80016e0:	f7ff ff5e 	bl	80015a0 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80016e4:	2001      	movs	r0, #1
 80016e6:	f000 fef3 	bl	80024d0 <HAL_Delay>
	lcd_send_cmd (0x30);
 80016ea:	2030      	movs	r0, #48	; 0x30
 80016ec:	f7ff ff58 	bl	80015a0 <lcd_send_cmd>
	HAL_Delay(10);
 80016f0:	200a      	movs	r0, #10
 80016f2:	f000 feed 	bl	80024d0 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80016f6:	2020      	movs	r0, #32
 80016f8:	f7ff ff52 	bl	80015a0 <lcd_send_cmd>
	HAL_Delay(10);
 80016fc:	200a      	movs	r0, #10
 80016fe:	f000 fee7 	bl	80024d0 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001702:	2028      	movs	r0, #40	; 0x28
 8001704:	f7ff ff4c 	bl	80015a0 <lcd_send_cmd>
	HAL_Delay(1);
 8001708:	2001      	movs	r0, #1
 800170a:	f000 fee1 	bl	80024d0 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800170e:	2008      	movs	r0, #8
 8001710:	f7ff ff46 	bl	80015a0 <lcd_send_cmd>
	HAL_Delay(1);
 8001714:	2001      	movs	r0, #1
 8001716:	f000 fedb 	bl	80024d0 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800171a:	2001      	movs	r0, #1
 800171c:	f7ff ff40 	bl	80015a0 <lcd_send_cmd>
	HAL_Delay(1);
 8001720:	2001      	movs	r0, #1
 8001722:	f000 fed5 	bl	80024d0 <HAL_Delay>
	HAL_Delay(1);
 8001726:	2001      	movs	r0, #1
 8001728:	f000 fed2 	bl	80024d0 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800172c:	2006      	movs	r0, #6
 800172e:	f7ff ff37 	bl	80015a0 <lcd_send_cmd>
	HAL_Delay(1);
 8001732:	2001      	movs	r0, #1
 8001734:	f000 fecc 	bl	80024d0 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001738:	200c      	movs	r0, #12
 800173a:	f7ff ff31 	bl	80015a0 <lcd_send_cmd>
}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}

08001742 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b082      	sub	sp, #8
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800174a:	e006      	b.n	800175a <lcd_send_string+0x18>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	1c5a      	adds	r2, r3, #1
 8001750:	607a      	str	r2, [r7, #4]
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff ff53 	bl	8001600 <lcd_send_data>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d1f4      	bne.n	800174c <lcd_send_string+0xa>
}
 8001762:	bf00      	nop
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
	...

0800176c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001770:	4b1b      	ldr	r3, [pc, #108]	; (80017e0 <MX_I2C1_Init+0x74>)
 8001772:	4a1c      	ldr	r2, [pc, #112]	; (80017e4 <MX_I2C1_Init+0x78>)
 8001774:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 8001776:	4b1a      	ldr	r3, [pc, #104]	; (80017e0 <MX_I2C1_Init+0x74>)
 8001778:	4a1b      	ldr	r2, [pc, #108]	; (80017e8 <MX_I2C1_Init+0x7c>)
 800177a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800177c:	4b18      	ldr	r3, [pc, #96]	; (80017e0 <MX_I2C1_Init+0x74>)
 800177e:	2200      	movs	r2, #0
 8001780:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001782:	4b17      	ldr	r3, [pc, #92]	; (80017e0 <MX_I2C1_Init+0x74>)
 8001784:	2201      	movs	r2, #1
 8001786:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001788:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <MX_I2C1_Init+0x74>)
 800178a:	2200      	movs	r2, #0
 800178c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800178e:	4b14      	ldr	r3, [pc, #80]	; (80017e0 <MX_I2C1_Init+0x74>)
 8001790:	2200      	movs	r2, #0
 8001792:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001794:	4b12      	ldr	r3, [pc, #72]	; (80017e0 <MX_I2C1_Init+0x74>)
 8001796:	2200      	movs	r2, #0
 8001798:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800179a:	4b11      	ldr	r3, [pc, #68]	; (80017e0 <MX_I2C1_Init+0x74>)
 800179c:	2200      	movs	r2, #0
 800179e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017a0:	4b0f      	ldr	r3, [pc, #60]	; (80017e0 <MX_I2C1_Init+0x74>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017a6:	480e      	ldr	r0, [pc, #56]	; (80017e0 <MX_I2C1_Init+0x74>)
 80017a8:	f001 fe30 	bl	800340c <HAL_I2C_Init>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80017b2:	f000 fb51 	bl	8001e58 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017b6:	2100      	movs	r1, #0
 80017b8:	4809      	ldr	r0, [pc, #36]	; (80017e0 <MX_I2C1_Init+0x74>)
 80017ba:	f002 ff76 	bl	80046aa <HAL_I2CEx_ConfigAnalogFilter>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80017c4:	f000 fb48 	bl	8001e58 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80017c8:	2100      	movs	r1, #0
 80017ca:	4805      	ldr	r0, [pc, #20]	; (80017e0 <MX_I2C1_Init+0x74>)
 80017cc:	f002 ffb8 	bl	8004740 <HAL_I2CEx_ConfigDigitalFilter>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80017d6:	f000 fb3f 	bl	8001e58 <Error_Handler>
  }

}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000258 	.word	0x20000258
 80017e4:	40005400 	.word	0x40005400
 80017e8:	00808cd2 	.word	0x00808cd2

080017ec <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 80017f0:	4b1b      	ldr	r3, [pc, #108]	; (8001860 <MX_I2C2_Init+0x74>)
 80017f2:	4a1c      	ldr	r2, [pc, #112]	; (8001864 <MX_I2C2_Init+0x78>)
 80017f4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00808CD2;
 80017f6:	4b1a      	ldr	r3, [pc, #104]	; (8001860 <MX_I2C2_Init+0x74>)
 80017f8:	4a1b      	ldr	r2, [pc, #108]	; (8001868 <MX_I2C2_Init+0x7c>)
 80017fa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80017fc:	4b18      	ldr	r3, [pc, #96]	; (8001860 <MX_I2C2_Init+0x74>)
 80017fe:	2200      	movs	r2, #0
 8001800:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001802:	4b17      	ldr	r3, [pc, #92]	; (8001860 <MX_I2C2_Init+0x74>)
 8001804:	2201      	movs	r2, #1
 8001806:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001808:	4b15      	ldr	r3, [pc, #84]	; (8001860 <MX_I2C2_Init+0x74>)
 800180a:	2200      	movs	r2, #0
 800180c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800180e:	4b14      	ldr	r3, [pc, #80]	; (8001860 <MX_I2C2_Init+0x74>)
 8001810:	2200      	movs	r2, #0
 8001812:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001814:	4b12      	ldr	r3, [pc, #72]	; (8001860 <MX_I2C2_Init+0x74>)
 8001816:	2200      	movs	r2, #0
 8001818:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800181a:	4b11      	ldr	r3, [pc, #68]	; (8001860 <MX_I2C2_Init+0x74>)
 800181c:	2200      	movs	r2, #0
 800181e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001820:	4b0f      	ldr	r3, [pc, #60]	; (8001860 <MX_I2C2_Init+0x74>)
 8001822:	2200      	movs	r2, #0
 8001824:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001826:	480e      	ldr	r0, [pc, #56]	; (8001860 <MX_I2C2_Init+0x74>)
 8001828:	f001 fdf0 	bl	800340c <HAL_I2C_Init>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001832:	f000 fb11 	bl	8001e58 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001836:	2100      	movs	r1, #0
 8001838:	4809      	ldr	r0, [pc, #36]	; (8001860 <MX_I2C2_Init+0x74>)
 800183a:	f002 ff36 	bl	80046aa <HAL_I2CEx_ConfigAnalogFilter>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001844:	f000 fb08 	bl	8001e58 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001848:	2100      	movs	r1, #0
 800184a:	4805      	ldr	r0, [pc, #20]	; (8001860 <MX_I2C2_Init+0x74>)
 800184c:	f002 ff78 	bl	8004740 <HAL_I2CEx_ConfigDigitalFilter>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001856:	f000 faff 	bl	8001e58 <Error_Handler>
  }

}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	200002a4 	.word	0x200002a4
 8001864:	40005800 	.word	0x40005800
 8001868:	00808cd2 	.word	0x00808cd2

0800186c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b08c      	sub	sp, #48	; 0x30
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001874:	f107 031c 	add.w	r3, r7, #28
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	609a      	str	r2, [r3, #8]
 8001880:	60da      	str	r2, [r3, #12]
 8001882:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a3e      	ldr	r2, [pc, #248]	; (8001984 <HAL_I2C_MspInit+0x118>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d139      	bne.n	8001902 <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800188e:	4b3e      	ldr	r3, [pc, #248]	; (8001988 <HAL_I2C_MspInit+0x11c>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	4a3d      	ldr	r2, [pc, #244]	; (8001988 <HAL_I2C_MspInit+0x11c>)
 8001894:	f043 0302 	orr.w	r3, r3, #2
 8001898:	6313      	str	r3, [r2, #48]	; 0x30
 800189a:	4b3b      	ldr	r3, [pc, #236]	; (8001988 <HAL_I2C_MspInit+0x11c>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	61bb      	str	r3, [r7, #24]
 80018a4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80018a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018ac:	2312      	movs	r3, #18
 80018ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018b0:	2301      	movs	r3, #1
 80018b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b4:	2303      	movs	r3, #3
 80018b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018b8:	2304      	movs	r3, #4
 80018ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018bc:	f107 031c 	add.w	r3, r7, #28
 80018c0:	4619      	mov	r1, r3
 80018c2:	4832      	ldr	r0, [pc, #200]	; (800198c <HAL_I2C_MspInit+0x120>)
 80018c4:	f001 fbc6 	bl	8003054 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018c8:	4b2f      	ldr	r3, [pc, #188]	; (8001988 <HAL_I2C_MspInit+0x11c>)
 80018ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018cc:	4a2e      	ldr	r2, [pc, #184]	; (8001988 <HAL_I2C_MspInit+0x11c>)
 80018ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018d2:	6413      	str	r3, [r2, #64]	; 0x40
 80018d4:	4b2c      	ldr	r3, [pc, #176]	; (8001988 <HAL_I2C_MspInit+0x11c>)
 80018d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018dc:	617b      	str	r3, [r7, #20]
 80018de:	697b      	ldr	r3, [r7, #20]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80018e0:	2200      	movs	r2, #0
 80018e2:	2100      	movs	r1, #0
 80018e4:	201f      	movs	r0, #31
 80018e6:	f000 fef0 	bl	80026ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80018ea:	201f      	movs	r0, #31
 80018ec:	f000 ff09 	bl	8002702 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80018f0:	2200      	movs	r2, #0
 80018f2:	2100      	movs	r1, #0
 80018f4:	2020      	movs	r0, #32
 80018f6:	f000 fee8 	bl	80026ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80018fa:	2020      	movs	r0, #32
 80018fc:	f000 ff01 	bl	8002702 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001900:	e03c      	b.n	800197c <HAL_I2C_MspInit+0x110>
  else if(i2cHandle->Instance==I2C2)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a22      	ldr	r2, [pc, #136]	; (8001990 <HAL_I2C_MspInit+0x124>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d137      	bne.n	800197c <HAL_I2C_MspInit+0x110>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800190c:	4b1e      	ldr	r3, [pc, #120]	; (8001988 <HAL_I2C_MspInit+0x11c>)
 800190e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001910:	4a1d      	ldr	r2, [pc, #116]	; (8001988 <HAL_I2C_MspInit+0x11c>)
 8001912:	f043 0320 	orr.w	r3, r3, #32
 8001916:	6313      	str	r3, [r2, #48]	; 0x30
 8001918:	4b1b      	ldr	r3, [pc, #108]	; (8001988 <HAL_I2C_MspInit+0x11c>)
 800191a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191c:	f003 0320 	and.w	r3, r3, #32
 8001920:	613b      	str	r3, [r7, #16]
 8001922:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001924:	2303      	movs	r3, #3
 8001926:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001928:	2312      	movs	r3, #18
 800192a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800192c:	2301      	movs	r3, #1
 800192e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001930:	2303      	movs	r3, #3
 8001932:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001934:	2304      	movs	r3, #4
 8001936:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001938:	f107 031c 	add.w	r3, r7, #28
 800193c:	4619      	mov	r1, r3
 800193e:	4815      	ldr	r0, [pc, #84]	; (8001994 <HAL_I2C_MspInit+0x128>)
 8001940:	f001 fb88 	bl	8003054 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001944:	4b10      	ldr	r3, [pc, #64]	; (8001988 <HAL_I2C_MspInit+0x11c>)
 8001946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001948:	4a0f      	ldr	r2, [pc, #60]	; (8001988 <HAL_I2C_MspInit+0x11c>)
 800194a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800194e:	6413      	str	r3, [r2, #64]	; 0x40
 8001950:	4b0d      	ldr	r3, [pc, #52]	; (8001988 <HAL_I2C_MspInit+0x11c>)
 8001952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001954:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800195c:	2200      	movs	r2, #0
 800195e:	2100      	movs	r1, #0
 8001960:	2021      	movs	r0, #33	; 0x21
 8001962:	f000 feb2 	bl	80026ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001966:	2021      	movs	r0, #33	; 0x21
 8001968:	f000 fecb 	bl	8002702 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 800196c:	2200      	movs	r2, #0
 800196e:	2100      	movs	r1, #0
 8001970:	2022      	movs	r0, #34	; 0x22
 8001972:	f000 feaa 	bl	80026ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001976:	2022      	movs	r0, #34	; 0x22
 8001978:	f000 fec3 	bl	8002702 <HAL_NVIC_EnableIRQ>
}
 800197c:	bf00      	nop
 800197e:	3730      	adds	r7, #48	; 0x30
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40005400 	.word	0x40005400
 8001988:	40023800 	.word	0x40023800
 800198c:	40020400 	.word	0x40020400
 8001990:	40005800 	.word	0x40005800
 8001994:	40021400 	.word	0x40021400

08001998 <arm_pid_f32>:
   * @return out processed output sample.
   */
  static __INLINE float32_t arm_pid_f32(
  arm_pid_instance_f32 * S,
  float32_t in)
  {
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	ed87 0a00 	vstr	s0, [r7]
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	ed93 7a00 	vldr	s14, [r3]
 80019aa:	edd7 7a00 	vldr	s15, [r7]
 80019ae:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	edd3 6a01 	vldr	s13, [r3, #4]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	edd3 7a03 	vldr	s15, [r3, #12]
 80019be:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 80019c2:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	edd3 6a02 	vldr	s13, [r3, #8]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	edd3 7a04 	vldr	s15, [r3, #16]
 80019d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 80019e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019e4:	edc7 7a03 	vstr	s15, [r7, #12]

    /* Update state */
    S->state[1] = S->state[0];
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	68da      	ldr	r2, [r3, #12]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	683a      	ldr	r2, [r7, #0]
 80019f4:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	68fa      	ldr	r2, [r7, #12]
 80019fa:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	ee07 3a90 	vmov	s15, r3

  }
 8001a02:	eeb0 0a67 	vmov.f32	s0, s15
 8001a06:	3714      	adds	r7, #20
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <Send_Output>:
  * @param  sensor_value is current value read by the sensor.
  * @param  requested_value is reference value set by the user.
  * @retval None
  */
void Send_Output(float sensor_value, float requested_value)
{
 8001a10:	b590      	push	{r4, r7, lr}
 8001a12:	b08b      	sub	sp, #44	; 0x2c
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	ed87 0a01 	vstr	s0, [r7, #4]
 8001a1a:	edc7 0a00 	vstr	s1, [r7]
	char sensor_value_local[16];
	char requested_value_local[16];

	sprintf(sensor_value_local, "%g", sensor_value);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f7fe fdb2 	bl	8000588 <__aeabi_f2d>
 8001a24:	4603      	mov	r3, r0
 8001a26:	460c      	mov	r4, r1
 8001a28:	f107 0018 	add.w	r0, r7, #24
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	4623      	mov	r3, r4
 8001a30:	491a      	ldr	r1, [pc, #104]	; (8001a9c <Send_Output+0x8c>)
 8001a32:	f006 ffcf 	bl	80089d4 <siprintf>
	sprintf(requested_value_local, "%g", requested_value);
 8001a36:	6838      	ldr	r0, [r7, #0]
 8001a38:	f7fe fda6 	bl	8000588 <__aeabi_f2d>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	460c      	mov	r4, r1
 8001a40:	f107 0008 	add.w	r0, r7, #8
 8001a44:	461a      	mov	r2, r3
 8001a46:	4623      	mov	r3, r4
 8001a48:	4914      	ldr	r1, [pc, #80]	; (8001a9c <Send_Output+0x8c>)
 8001a4a:	f006 ffc3 	bl	80089d4 <siprintf>

	lcd_clear ();
 8001a4e:	f7ff fe07 	bl	8001660 <lcd_clear>
	lcd_send_cmd(0x80);
 8001a52:	2080      	movs	r0, #128	; 0x80
 8001a54:	f7ff fda4 	bl	80015a0 <lcd_send_cmd>
	lcd_send_string("VAL:");
 8001a58:	4811      	ldr	r0, [pc, #68]	; (8001aa0 <Send_Output+0x90>)
 8001a5a:	f7ff fe72 	bl	8001742 <lcd_send_string>
	lcd_send_string((uint8_t*)sensor_value_local);
 8001a5e:	f107 0318 	add.w	r3, r7, #24
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7ff fe6d 	bl	8001742 <lcd_send_string>
	lcd_send_string(" lux");
 8001a68:	480e      	ldr	r0, [pc, #56]	; (8001aa4 <Send_Output+0x94>)
 8001a6a:	f7ff fe6a 	bl	8001742 <lcd_send_string>

	lcd_put_cur(1, 0);
 8001a6e:	2100      	movs	r1, #0
 8001a70:	2001      	movs	r0, #1
 8001a72:	f7ff fe0b 	bl	800168c <lcd_put_cur>
	lcd_send_string("REQ:");
 8001a76:	480c      	ldr	r0, [pc, #48]	; (8001aa8 <Send_Output+0x98>)
 8001a78:	f7ff fe63 	bl	8001742 <lcd_send_string>
	lcd_send_string((uint8_t*)requested_value_local);
 8001a7c:	f107 0308 	add.w	r3, r7, #8
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff fe5e 	bl	8001742 <lcd_send_string>
	lcd_send_string(" lux");
 8001a86:	4807      	ldr	r0, [pc, #28]	; (8001aa4 <Send_Output+0x94>)
 8001a88:	f7ff fe5b 	bl	8001742 <lcd_send_string>
	HAL_Delay(200);
 8001a8c:	20c8      	movs	r0, #200	; 0xc8
 8001a8e:	f000 fd1f 	bl	80024d0 <HAL_Delay>
}
 8001a92:	bf00      	nop
 8001a94:	372c      	adds	r7, #44	; 0x2c
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd90      	pop	{r4, r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	0800b800 	.word	0x0800b800
 8001aa0:	0800b804 	.word	0x0800b804
 8001aa4:	0800b80c 	.word	0x0800b80c
 8001aa8:	0800b814 	.word	0x0800b814

08001aac <Sensor_Range>:
  * @brief Sensor_Range sets the maximum value of a sensor as reference for PID.
  * It lights a diode with it's maximum power to measure the max range.
  * @retval max_value (Maximum value of the sensor in lux)
  */
float Sensor_Range()
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
	float max_value=0;
 8001ab2:	f04f 0300 	mov.w	r3, #0
 8001ab6:	607b      	str	r3, [r7, #4]
	TIM3->CCR1=100000;
 8001ab8:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <Sensor_Range+0x40>)
 8001aba:	4a0d      	ldr	r2, [pc, #52]	; (8001af0 <Sensor_Range+0x44>)
 8001abc:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(500);
 8001abe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ac2:	f000 fd05 	bl	80024d0 <HAL_Delay>
	BH1750_ReadLight(&max_value);
 8001ac6:	1d3b      	adds	r3, r7, #4
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff fb69 	bl	80011a0 <BH1750_ReadLight>
	TIM3->CCR1=0;
 8001ace:	4b07      	ldr	r3, [pc, #28]	; (8001aec <Sensor_Range+0x40>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(300);
 8001ad4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001ad8:	f000 fcfa 	bl	80024d0 <HAL_Delay>
	return max_value;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	ee07 3a90 	vmov	s15, r3
}
 8001ae2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ae6:	3708      	adds	r7, #8
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40000400 	.word	0x40000400
 8001af0:	000186a0 	.word	0x000186a0

08001af4 <Button_Pressed>:
/**
  * @brief  Button_Pressed activates when button is pressed in order to set the sensor_max value.
  * @retval None
  */
void Button_Pressed()
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
	 // set edge detection value
		  	  if((button_state == GPIO_PIN_SET)&&(button_state_last == GPIO_PIN_RESET))
 8001af8:	4b0f      	ldr	r3, [pc, #60]	; (8001b38 <Button_Pressed+0x44>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d107      	bne.n	8001b10 <Button_Pressed+0x1c>
 8001b00:	4b0e      	ldr	r3, [pc, #56]	; (8001b3c <Button_Pressed+0x48>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d103      	bne.n	8001b10 <Button_Pressed+0x1c>
		  	  {
		  		  edge_detection = 1;
 8001b08:	4b0d      	ldr	r3, [pc, #52]	; (8001b40 <Button_Pressed+0x4c>)
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	e002      	b.n	8001b16 <Button_Pressed+0x22>
		  	  }
		  	  else
		  	  {
		  		  edge_detection = 0;
 8001b10:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <Button_Pressed+0x4c>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
		  	  }
		  	  button_state_last = button_state;
 8001b16:	4b08      	ldr	r3, [pc, #32]	; (8001b38 <Button_Pressed+0x44>)
 8001b18:	781a      	ldrb	r2, [r3, #0]
 8001b1a:	4b08      	ldr	r3, [pc, #32]	; (8001b3c <Button_Pressed+0x48>)
 8001b1c:	701a      	strb	r2, [r3, #0]


		  	  // set new maximal value of the sensor
		  	  if(edge_detection)
 8001b1e:	4b08      	ldr	r3, [pc, #32]	; (8001b40 <Button_Pressed+0x4c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d006      	beq.n	8001b34 <Button_Pressed+0x40>
		  	  {
		  		sensor_max=Sensor_Range();
 8001b26:	f7ff ffc1 	bl	8001aac <Sensor_Range>
 8001b2a:	eef0 7a40 	vmov.f32	s15, s0
 8001b2e:	4b05      	ldr	r3, [pc, #20]	; (8001b44 <Button_Pressed+0x50>)
 8001b30:	edc3 7a00 	vstr	s15, [r3]
		  	  }
}
 8001b34:	bf00      	nop
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	20000320 	.word	0x20000320
 8001b3c:	20000318 	.word	0x20000318
 8001b40:	2000031c 	.word	0x2000031c
 8001b44:	200002f0 	.word	0x200002f0

08001b48 <Calculate_PWM>:
  * @param  sensor_value is current value read by the sensor.
  * @param  requested_value is reference value set by the user.
  * @retval None
  */
void Calculate_PWM(float sensor_value, float requested_value)
{
 8001b48:	b590      	push	{r4, r7, lr}
 8001b4a:	b087      	sub	sp, #28
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b52:	edc7 0a00 	vstr	s1, [r7]
	float light_delta;    	 // Difference between requested value and actual value of the sensor
	int PWM_duty = 10;       // PWM duty value
 8001b56:	230a      	movs	r3, #10
 8001b58:	617b      	str	r3, [r7, #20]
	float32_t PID_duty = 0;  // PID duty value
 8001b5a:	f04f 0300 	mov.w	r3, #0
 8001b5e:	613b      	str	r3, [r7, #16]
	light_delta = requested_value - sensor_value;
 8001b60:	ed97 7a00 	vldr	s14, [r7]
 8001b64:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b6c:	edc7 7a03 	vstr	s15, [r7, #12]
	PID_duty = arm_pid_f32(&PID, light_delta);
 8001b70:	ed97 0a03 	vldr	s0, [r7, #12]
 8001b74:	481a      	ldr	r0, [pc, #104]	; (8001be0 <Calculate_PWM+0x98>)
 8001b76:	f7ff ff0f 	bl	8001998 <arm_pid_f32>
 8001b7a:	ed87 0a04 	vstr	s0, [r7, #16]
	PWM_duty += (int)(PID_duty*sensor_max / 100000.0);// calculate PWM value
 8001b7e:	4b19      	ldr	r3, [pc, #100]	; (8001be4 <Calculate_PWM+0x9c>)
 8001b80:	ed93 7a00 	vldr	s14, [r3]
 8001b84:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b8c:	ee17 0a90 	vmov	r0, s15
 8001b90:	f7fe fcfa 	bl	8000588 <__aeabi_f2d>
 8001b94:	a310      	add	r3, pc, #64	; (adr r3, 8001bd8 <Calculate_PWM+0x90>)
 8001b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b9a:	f7fe fe77 	bl	800088c <__aeabi_ddiv>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	460c      	mov	r4, r1
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	4621      	mov	r1, r4
 8001ba6:	f7fe fff7 	bl	8000b98 <__aeabi_d2iz>
 8001baa:	4602      	mov	r2, r0
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	4413      	add	r3, r2
 8001bb0:	617b      	str	r3, [r7, #20]
	// check if PWM duty is in range
	if(PWM_duty > 100000){
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	4a0c      	ldr	r2, [pc, #48]	; (8001be8 <Calculate_PWM+0xa0>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	dd02      	ble.n	8001bc0 <Calculate_PWM+0x78>
		PWM_duty = 100000;
 8001bba:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <Calculate_PWM+0xa0>)
 8001bbc:	617b      	str	r3, [r7, #20]
 8001bbe:	e004      	b.n	8001bca <Calculate_PWM+0x82>
	}
	else if(PWM_duty < 0){
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	da01      	bge.n	8001bca <Calculate_PWM+0x82>
		PWM_duty = 0;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	617b      	str	r3, [r7, #20]
	}
	// set calculated PWM value
	TIM3->CCR1 = PWM_duty;
 8001bca:	4a08      	ldr	r2, [pc, #32]	; (8001bec <Calculate_PWM+0xa4>)
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	6353      	str	r3, [r2, #52]	; 0x34
}
 8001bd0:	bf00      	nop
 8001bd2:	371c      	adds	r7, #28
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd90      	pop	{r4, r7, pc}
 8001bd8:	00000000 	.word	0x00000000
 8001bdc:	40f86a00 	.word	0x40f86a00
 8001be0:	200002f4 	.word	0x200002f4
 8001be4:	200002f0 	.word	0x200002f0
 8001be8:	000186a0 	.word	0x000186a0
 8001bec:	40000400 	.word	0x40000400

08001bf0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bf0:	b590      	push	{r4, r7, lr}
 8001bf2:	b099      	sub	sp, #100	; 0x64
 8001bf4:	af00      	add	r7, sp, #0
	//uint8_t UartOut; 				// UART data sending
	char terminal_setpoint[40];  	// UART receiving buffer
	uint8_t terminal_setpoint_size; // size of the UART message
	char buffer[40]; 				// UART sending buffer
	float sensor_value; 			// sensor actual value
	float requested_value=0; 		// Sensor requested value
 8001bf6:	f04f 0300 	mov.w	r3, #0
 8001bfa:	65fb      	str	r3, [r7, #92]	; 0x5c
	/* Rewrite defined PID parameters to PID instance */
	PID.Kp = PID_PARAM_KP;
 8001bfc:	4b42      	ldr	r3, [pc, #264]	; (8001d08 <main+0x118>)
 8001bfe:	4a43      	ldr	r2, [pc, #268]	; (8001d0c <main+0x11c>)
 8001c00:	619a      	str	r2, [r3, #24]
	PID.Ki = PID_PARAM_KI;
 8001c02:	4b41      	ldr	r3, [pc, #260]	; (8001d08 <main+0x118>)
 8001c04:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c08:	61da      	str	r2, [r3, #28]
	PID.Kd = PID_PARAM_KD;
 8001c0a:	4b3f      	ldr	r3, [pc, #252]	; (8001d08 <main+0x118>)
 8001c0c:	4a40      	ldr	r2, [pc, #256]	; (8001d10 <main+0x120>)
 8001c0e:	621a      	str	r2, [r3, #32]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c10:	f000 fc01 	bl	8002416 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c14:	f000 f88c 	bl	8001d30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c18:	f7ff fc14 	bl	8001444 <MX_GPIO_Init>
  MX_ETH_Init();
 8001c1c:	f7ff fb1a 	bl	8001254 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001c20:	f000 faca 	bl	80021b8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001c24:	f000 fb44 	bl	80022b0 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8001c28:	f7ff fda0 	bl	800176c <MX_I2C1_Init>
  MX_I2C2_Init();
 8001c2c:	f7ff fdde 	bl	80017ec <MX_I2C2_Init>
  MX_TIM3_Init();
 8001c30:	f000 fa0a 	bl	8002048 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  /* Start PWM */
  	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001c34:	2100      	movs	r1, #0
 8001c36:	4837      	ldr	r0, [pc, #220]	; (8001d14 <main+0x124>)
 8001c38:	f003 ff98 	bl	8005b6c <HAL_TIM_PWM_Start>
  /* Initialize BH1750 sensor */
  	  BH1750_Init(&hi2c2);
 8001c3c:	4836      	ldr	r0, [pc, #216]	; (8001d18 <main+0x128>)
 8001c3e:	f7ff f9f9 	bl	8001034 <BH1750_Init>
  /* Sets resolution mode to continuous high */
  	  BH1750_SetMode(CONTINUOUS_HIGH_RES_MODE_2);
 8001c42:	2011      	movs	r0, #17
 8001c44:	f7ff fa2c 	bl	80010a0 <BH1750_SetMode>
  /* Initialize LCD */
  	  lcd_init ();
 8001c48:	f7ff fd3e 	bl	80016c8 <lcd_init>
  /* Initialize PID */
  	  arm_pid_init_f32(&PID, 1);
 8001c4c:	2101      	movs	r1, #1
 8001c4e:	482e      	ldr	r0, [pc, #184]	; (8001d08 <main+0x118>)
 8001c50:	f7ff f9ba 	bl	8000fc8 <arm_pid_init_f32>
  /* Adjusts maximum range of sensor based on current light level in the room*/
  	  sensor_max=Sensor_Range();
 8001c54:	f7ff ff2a 	bl	8001aac <Sensor_Range>
 8001c58:	eef0 7a40 	vmov.f32	s15, s0
 8001c5c:	4b2f      	ldr	r3, [pc, #188]	; (8001d1c <main+0x12c>)
 8001c5e:	edc3 7a00 	vstr	s15, [r3]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	  BH1750_ReadLight(&sensor_value); // Reads the converted value and calculates the result.
 8001c62:	1d3b      	adds	r3, r7, #4
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff fa9b 	bl	80011a0 <BH1750_ReadLight>

	  	  button_state = HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin);// read button state
 8001c6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c6e:	482c      	ldr	r0, [pc, #176]	; (8001d20 <main+0x130>)
 8001c70:	f001 fb9a 	bl	80033a8 <HAL_GPIO_ReadPin>
 8001c74:	4603      	mov	r3, r0
 8001c76:	461a      	mov	r2, r3
 8001c78:	4b2a      	ldr	r3, [pc, #168]	; (8001d24 <main+0x134>)
 8001c7a:	701a      	strb	r2, [r3, #0]
	  	  Button_Pressed();
 8001c7c:	f7ff ff3a 	bl	8001af4 <Button_Pressed>

	  	  // calculate PWM duty value
	  	  Calculate_PWM(sensor_value, requested_value);
 8001c80:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c84:	edd7 0a17 	vldr	s1, [r7, #92]	; 0x5c
 8001c88:	eeb0 0a67 	vmov.f32	s0, s15
 8001c8c:	f7ff ff5c 	bl	8001b48 <Calculate_PWM>

	  	  // send current and requested values to LCD
	  	  Send_Output(sensor_value, requested_value);
 8001c90:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c94:	edd7 0a17 	vldr	s1, [r7, #92]	; 0x5c
 8001c98:	eeb0 0a67 	vmov.f32	s0, s15
 8001c9c:	f7ff feb8 	bl	8001a10 <Send_Output>

	  	  // transmit actual sensor value over UART
	  	  terminal_setpoint_size=sprintf (buffer, "%3.2f\n\r", sensor_value);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7fe fc70 	bl	8000588 <__aeabi_f2d>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	460c      	mov	r4, r1
 8001cac:	f107 0008 	add.w	r0, r7, #8
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	4623      	mov	r3, r4
 8001cb4:	491c      	ldr	r1, [pc, #112]	; (8001d28 <main+0x138>)
 8001cb6:	f006 fe8d 	bl	80089d4 <siprintf>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	  	  HAL_UART_Transmit_IT(&huart3,(uint8_t*) buffer, terminal_setpoint_size);
 8001cc0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001cc4:	b29a      	uxth	r2, r3
 8001cc6:	f107 0308 	add.w	r3, r7, #8
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4817      	ldr	r0, [pc, #92]	; (8001d2c <main+0x13c>)
 8001cce:	f004 fde7 	bl	80068a0 <HAL_UART_Transmit_IT>

	  	  // receive wanted sensor value from UART
	  	  HAL_UART_Receive_IT( &huart3, (uint8_t*)&terminal_setpoint, terminal_setpoint_size);
 8001cd2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4813      	ldr	r0, [pc, #76]	; (8001d2c <main+0x13c>)
 8001ce0:	f004 fe3a 	bl	8006958 <HAL_UART_Receive_IT>
	  	  requested_value= atof(terminal_setpoint);
 8001ce4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f005 fff9 	bl	8007ce0 <atof>
 8001cee:	ec54 3b10 	vmov	r3, r4, d0
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	4621      	mov	r1, r4
 8001cf6:	f7fe ff97 	bl	8000c28 <__aeabi_d2f>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	65fb      	str	r3, [r7, #92]	; 0x5c

	  	  HAL_Delay(200);
 8001cfe:	20c8      	movs	r0, #200	; 0xc8
 8001d00:	f000 fbe6 	bl	80024d0 <HAL_Delay>
	  	  BH1750_ReadLight(&sensor_value); // Reads the converted value and calculates the result.
 8001d04:	e7ad      	b.n	8001c62 <main+0x72>
 8001d06:	bf00      	nop
 8001d08:	200002f4 	.word	0x200002f4
 8001d0c:	41c00000 	.word	0x41c00000
 8001d10:	3dcccccd 	.word	0x3dcccccd
 8001d14:	20000324 	.word	0x20000324
 8001d18:	200002a4 	.word	0x200002a4
 8001d1c:	200002f0 	.word	0x200002f0
 8001d20:	40020800 	.word	0x40020800
 8001d24:	20000320 	.word	0x20000320
 8001d28:	0800b81c 	.word	0x0800b81c
 8001d2c:	20000364 	.word	0x20000364

08001d30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b0b4      	sub	sp, #208	; 0xd0
 8001d34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d36:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001d3a:	2230      	movs	r2, #48	; 0x30
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f005 fffc 	bl	8007d3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d44:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	605a      	str	r2, [r3, #4]
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	60da      	str	r2, [r3, #12]
 8001d52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d54:	f107 0308 	add.w	r3, r7, #8
 8001d58:	2284      	movs	r2, #132	; 0x84
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f005 ffed 	bl	8007d3c <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8001d62:	f002 fe75 	bl	8004a50 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d66:	4b39      	ldr	r3, [pc, #228]	; (8001e4c <SystemClock_Config+0x11c>)
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	4a38      	ldr	r2, [pc, #224]	; (8001e4c <SystemClock_Config+0x11c>)
 8001d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d70:	6413      	str	r3, [r2, #64]	; 0x40
 8001d72:	4b36      	ldr	r3, [pc, #216]	; (8001e4c <SystemClock_Config+0x11c>)
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d7a:	607b      	str	r3, [r7, #4]
 8001d7c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001d7e:	4b34      	ldr	r3, [pc, #208]	; (8001e50 <SystemClock_Config+0x120>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001d86:	4a32      	ldr	r2, [pc, #200]	; (8001e50 <SystemClock_Config+0x120>)
 8001d88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d8c:	6013      	str	r3, [r2, #0]
 8001d8e:	4b30      	ldr	r3, [pc, #192]	; (8001e50 <SystemClock_Config+0x120>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d96:	603b      	str	r3, [r7, #0]
 8001d98:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001da0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001da4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001da8:	2302      	movs	r3, #2
 8001daa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001dae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001db2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001db6:	2304      	movs	r3, #4
 8001db8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001dbc:	2348      	movs	r3, #72	; 0x48
 8001dbe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dce:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f002 fe4c 	bl	8004a70 <HAL_RCC_OscConfig>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001dde:	f000 f83b 	bl	8001e58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001de2:	230f      	movs	r3, #15
 8001de4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001de8:	2302      	movs	r3, #2
 8001dea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dee:	2300      	movs	r3, #0
 8001df0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001df4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001df8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e02:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001e06:	2102      	movs	r1, #2
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f003 f8a1 	bl	8004f50 <HAL_RCC_ClockConfig>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8001e14:	f000 f820 	bl	8001e58 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 8001e18:	4b0e      	ldr	r3, [pc, #56]	; (8001e54 <SystemClock_Config+0x124>)
 8001e1a:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001e20:	2300      	movs	r3, #0
 8001e22:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001e24:	2300      	movs	r3, #0
 8001e26:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e2e:	f107 0308 	add.w	r3, r7, #8
 8001e32:	4618      	mov	r0, r3
 8001e34:	f003 fa80 	bl	8005338 <HAL_RCCEx_PeriphCLKConfig>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <SystemClock_Config+0x112>
  {
    Error_Handler();
 8001e3e:	f000 f80b 	bl	8001e58 <Error_Handler>
  }
}
 8001e42:	bf00      	nop
 8001e44:	37d0      	adds	r7, #208	; 0xd0
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	40007000 	.word	0x40007000
 8001e54:	0020c100 	.word	0x0020c100

08001e58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001e5c:	bf00      	nop
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
	...

08001e68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e6e:	4b0f      	ldr	r3, [pc, #60]	; (8001eac <HAL_MspInit+0x44>)
 8001e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e72:	4a0e      	ldr	r2, [pc, #56]	; (8001eac <HAL_MspInit+0x44>)
 8001e74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e78:	6413      	str	r3, [r2, #64]	; 0x40
 8001e7a:	4b0c      	ldr	r3, [pc, #48]	; (8001eac <HAL_MspInit+0x44>)
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e82:	607b      	str	r3, [r7, #4]
 8001e84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e86:	4b09      	ldr	r3, [pc, #36]	; (8001eac <HAL_MspInit+0x44>)
 8001e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8a:	4a08      	ldr	r2, [pc, #32]	; (8001eac <HAL_MspInit+0x44>)
 8001e8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e90:	6453      	str	r3, [r2, #68]	; 0x44
 8001e92:	4b06      	ldr	r3, [pc, #24]	; (8001eac <HAL_MspInit+0x44>)
 8001e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e9a:	603b      	str	r3, [r7, #0]
 8001e9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	40023800 	.word	0x40023800

08001eb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001eb4:	bf00      	nop
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr

08001ebe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ec2:	e7fe      	b.n	8001ec2 <HardFault_Handler+0x4>

08001ec4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ec8:	e7fe      	b.n	8001ec8 <MemManage_Handler+0x4>

08001eca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ece:	e7fe      	b.n	8001ece <BusFault_Handler+0x4>

08001ed0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ed4:	e7fe      	b.n	8001ed4 <UsageFault_Handler+0x4>

08001ed6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001eda:	bf00      	nop
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ee8:	bf00      	nop
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ef6:	bf00      	nop
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f04:	f000 fac4 	bl	8002490 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f08:	bf00      	nop
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001f10:	4802      	ldr	r0, [pc, #8]	; (8001f1c <TIM3_IRQHandler+0x10>)
 8001f12:	f003 fe6f 	bl	8005bf4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001f16:	bf00      	nop
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	20000324 	.word	0x20000324

08001f20 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001f24:	4802      	ldr	r0, [pc, #8]	; (8001f30 <I2C1_EV_IRQHandler+0x10>)
 8001f26:	f001 fceb 	bl	8003900 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001f2a:	bf00      	nop
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	20000258 	.word	0x20000258

08001f34 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001f38:	4802      	ldr	r0, [pc, #8]	; (8001f44 <I2C1_ER_IRQHandler+0x10>)
 8001f3a:	f001 fcfb 	bl	8003934 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001f3e:	bf00      	nop
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	20000258 	.word	0x20000258

08001f48 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001f4c:	4802      	ldr	r0, [pc, #8]	; (8001f58 <I2C2_EV_IRQHandler+0x10>)
 8001f4e:	f001 fcd7 	bl	8003900 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001f52:	bf00      	nop
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	200002a4 	.word	0x200002a4

08001f5c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001f60:	4802      	ldr	r0, [pc, #8]	; (8001f6c <I2C2_ER_IRQHandler+0x10>)
 8001f62:	f001 fce7 	bl	8003934 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001f66:	bf00      	nop
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	200002a4 	.word	0x200002a4

08001f70 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001f74:	4802      	ldr	r0, [pc, #8]	; (8001f80 <USART3_IRQHandler+0x10>)
 8001f76:	f004 fd91 	bl	8006a9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20000364 	.word	0x20000364

08001f84 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001f8c:	4b11      	ldr	r3, [pc, #68]	; (8001fd4 <_sbrk+0x50>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d102      	bne.n	8001f9a <_sbrk+0x16>
		heap_end = &end;
 8001f94:	4b0f      	ldr	r3, [pc, #60]	; (8001fd4 <_sbrk+0x50>)
 8001f96:	4a10      	ldr	r2, [pc, #64]	; (8001fd8 <_sbrk+0x54>)
 8001f98:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001f9a:	4b0e      	ldr	r3, [pc, #56]	; (8001fd4 <_sbrk+0x50>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001fa0:	4b0c      	ldr	r3, [pc, #48]	; (8001fd4 <_sbrk+0x50>)
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	466a      	mov	r2, sp
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d907      	bls.n	8001fbe <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001fae:	f005 fe9b 	bl	8007ce8 <__errno>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	230c      	movs	r3, #12
 8001fb6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8001fbc:	e006      	b.n	8001fcc <_sbrk+0x48>
	}

	heap_end += incr;
 8001fbe:	4b05      	ldr	r3, [pc, #20]	; (8001fd4 <_sbrk+0x50>)
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	4a03      	ldr	r2, [pc, #12]	; (8001fd4 <_sbrk+0x50>)
 8001fc8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001fca:	68fb      	ldr	r3, [r7, #12]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	200001f8 	.word	0x200001f8
 8001fd8:	200007f0 	.word	0x200007f0

08001fdc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fe0:	4b15      	ldr	r3, [pc, #84]	; (8002038 <SystemInit+0x5c>)
 8001fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fe6:	4a14      	ldr	r2, [pc, #80]	; (8002038 <SystemInit+0x5c>)
 8001fe8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001ff0:	4b12      	ldr	r3, [pc, #72]	; (800203c <SystemInit+0x60>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a11      	ldr	r2, [pc, #68]	; (800203c <SystemInit+0x60>)
 8001ff6:	f043 0301 	orr.w	r3, r3, #1
 8001ffa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001ffc:	4b0f      	ldr	r3, [pc, #60]	; (800203c <SystemInit+0x60>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002002:	4b0e      	ldr	r3, [pc, #56]	; (800203c <SystemInit+0x60>)
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	490d      	ldr	r1, [pc, #52]	; (800203c <SystemInit+0x60>)
 8002008:	4b0d      	ldr	r3, [pc, #52]	; (8002040 <SystemInit+0x64>)
 800200a:	4013      	ands	r3, r2
 800200c:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800200e:	4b0b      	ldr	r3, [pc, #44]	; (800203c <SystemInit+0x60>)
 8002010:	4a0c      	ldr	r2, [pc, #48]	; (8002044 <SystemInit+0x68>)
 8002012:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002014:	4b09      	ldr	r3, [pc, #36]	; (800203c <SystemInit+0x60>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a08      	ldr	r2, [pc, #32]	; (800203c <SystemInit+0x60>)
 800201a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800201e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002020:	4b06      	ldr	r3, [pc, #24]	; (800203c <SystemInit+0x60>)
 8002022:	2200      	movs	r2, #0
 8002024:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002026:	4b04      	ldr	r3, [pc, #16]	; (8002038 <SystemInit+0x5c>)
 8002028:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800202c:	609a      	str	r2, [r3, #8]
#endif
}
 800202e:	bf00      	nop
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	e000ed00 	.word	0xe000ed00
 800203c:	40023800 	.word	0x40023800
 8002040:	fef6ffff 	.word	0xfef6ffff
 8002044:	24003010 	.word	0x24003010

08002048 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b08a      	sub	sp, #40	; 0x28
 800204c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800204e:	f107 031c 	add.w	r3, r7, #28
 8002052:	2200      	movs	r2, #0
 8002054:	601a      	str	r2, [r3, #0]
 8002056:	605a      	str	r2, [r3, #4]
 8002058:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800205a:	463b      	mov	r3, r7
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	605a      	str	r2, [r3, #4]
 8002062:	609a      	str	r2, [r3, #8]
 8002064:	60da      	str	r2, [r3, #12]
 8002066:	611a      	str	r2, [r3, #16]
 8002068:	615a      	str	r2, [r3, #20]
 800206a:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 800206c:	4b21      	ldr	r3, [pc, #132]	; (80020f4 <MX_TIM3_Init+0xac>)
 800206e:	4a22      	ldr	r2, [pc, #136]	; (80020f8 <MX_TIM3_Init+0xb0>)
 8002070:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8002072:	4b20      	ldr	r3, [pc, #128]	; (80020f4 <MX_TIM3_Init+0xac>)
 8002074:	2247      	movs	r2, #71	; 0x47
 8002076:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002078:	4b1e      	ldr	r3, [pc, #120]	; (80020f4 <MX_TIM3_Init+0xac>)
 800207a:	2200      	movs	r2, #0
 800207c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 800207e:	4b1d      	ldr	r3, [pc, #116]	; (80020f4 <MX_TIM3_Init+0xac>)
 8002080:	2209      	movs	r2, #9
 8002082:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002084:	4b1b      	ldr	r3, [pc, #108]	; (80020f4 <MX_TIM3_Init+0xac>)
 8002086:	2200      	movs	r2, #0
 8002088:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800208a:	4b1a      	ldr	r3, [pc, #104]	; (80020f4 <MX_TIM3_Init+0xac>)
 800208c:	2200      	movs	r2, #0
 800208e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002090:	4818      	ldr	r0, [pc, #96]	; (80020f4 <MX_TIM3_Init+0xac>)
 8002092:	f003 fd3f 	bl	8005b14 <HAL_TIM_PWM_Init>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800209c:	f7ff fedc 	bl	8001e58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020a0:	2300      	movs	r3, #0
 80020a2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020a4:	2300      	movs	r3, #0
 80020a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80020a8:	f107 031c 	add.w	r3, r7, #28
 80020ac:	4619      	mov	r1, r3
 80020ae:	4811      	ldr	r0, [pc, #68]	; (80020f4 <MX_TIM3_Init+0xac>)
 80020b0:	f004 fb2e 	bl	8006710 <HAL_TIMEx_MasterConfigSynchronization>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80020ba:	f7ff fecd 	bl	8001e58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020be:	2360      	movs	r3, #96	; 0x60
 80020c0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 80020c2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80020c6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020c8:	2300      	movs	r3, #0
 80020ca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020cc:	2300      	movs	r3, #0
 80020ce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020d0:	463b      	mov	r3, r7
 80020d2:	2200      	movs	r2, #0
 80020d4:	4619      	mov	r1, r3
 80020d6:	4807      	ldr	r0, [pc, #28]	; (80020f4 <MX_TIM3_Init+0xac>)
 80020d8:	f003 feac 	bl	8005e34 <HAL_TIM_PWM_ConfigChannel>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80020e2:	f7ff feb9 	bl	8001e58 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 80020e6:	4803      	ldr	r0, [pc, #12]	; (80020f4 <MX_TIM3_Init+0xac>)
 80020e8:	f000 f82e 	bl	8002148 <HAL_TIM_MspPostInit>

}
 80020ec:	bf00      	nop
 80020ee:	3728      	adds	r7, #40	; 0x28
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	20000324 	.word	0x20000324
 80020f8:	40000400 	.word	0x40000400

080020fc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a0d      	ldr	r2, [pc, #52]	; (8002140 <HAL_TIM_PWM_MspInit+0x44>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d113      	bne.n	8002136 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800210e:	4b0d      	ldr	r3, [pc, #52]	; (8002144 <HAL_TIM_PWM_MspInit+0x48>)
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	4a0c      	ldr	r2, [pc, #48]	; (8002144 <HAL_TIM_PWM_MspInit+0x48>)
 8002114:	f043 0302 	orr.w	r3, r3, #2
 8002118:	6413      	str	r3, [r2, #64]	; 0x40
 800211a:	4b0a      	ldr	r3, [pc, #40]	; (8002144 <HAL_TIM_PWM_MspInit+0x48>)
 800211c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002126:	2200      	movs	r2, #0
 8002128:	2100      	movs	r1, #0
 800212a:	201d      	movs	r0, #29
 800212c:	f000 facd 	bl	80026ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002130:	201d      	movs	r0, #29
 8002132:	f000 fae6 	bl	8002702 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002136:	bf00      	nop
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	40000400 	.word	0x40000400
 8002144:	40023800 	.word	0x40023800

08002148 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b088      	sub	sp, #32
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002150:	f107 030c 	add.w	r3, r7, #12
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	605a      	str	r2, [r3, #4]
 800215a:	609a      	str	r2, [r3, #8]
 800215c:	60da      	str	r2, [r3, #12]
 800215e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a11      	ldr	r2, [pc, #68]	; (80021ac <HAL_TIM_MspPostInit+0x64>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d11b      	bne.n	80021a2 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800216a:	4b11      	ldr	r3, [pc, #68]	; (80021b0 <HAL_TIM_MspPostInit+0x68>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	4a10      	ldr	r2, [pc, #64]	; (80021b0 <HAL_TIM_MspPostInit+0x68>)
 8002170:	f043 0301 	orr.w	r3, r3, #1
 8002174:	6313      	str	r3, [r2, #48]	; 0x30
 8002176:	4b0e      	ldr	r3, [pc, #56]	; (80021b0 <HAL_TIM_MspPostInit+0x68>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	60bb      	str	r3, [r7, #8]
 8002180:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002182:	2340      	movs	r3, #64	; 0x40
 8002184:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002186:	2302      	movs	r3, #2
 8002188:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218a:	2300      	movs	r3, #0
 800218c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800218e:	2300      	movs	r3, #0
 8002190:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002192:	2302      	movs	r3, #2
 8002194:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002196:	f107 030c 	add.w	r3, r7, #12
 800219a:	4619      	mov	r1, r3
 800219c:	4805      	ldr	r0, [pc, #20]	; (80021b4 <HAL_TIM_MspPostInit+0x6c>)
 800219e:	f000 ff59 	bl	8003054 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80021a2:	bf00      	nop
 80021a4:	3720      	adds	r7, #32
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	40000400 	.word	0x40000400
 80021b0:	40023800 	.word	0x40023800
 80021b4:	40020000 	.word	0x40020000

080021b8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80021bc:	4b14      	ldr	r3, [pc, #80]	; (8002210 <MX_USART3_UART_Init+0x58>)
 80021be:	4a15      	ldr	r2, [pc, #84]	; (8002214 <MX_USART3_UART_Init+0x5c>)
 80021c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80021c2:	4b13      	ldr	r3, [pc, #76]	; (8002210 <MX_USART3_UART_Init+0x58>)
 80021c4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80021c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80021ca:	4b11      	ldr	r3, [pc, #68]	; (8002210 <MX_USART3_UART_Init+0x58>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80021d0:	4b0f      	ldr	r3, [pc, #60]	; (8002210 <MX_USART3_UART_Init+0x58>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80021d6:	4b0e      	ldr	r3, [pc, #56]	; (8002210 <MX_USART3_UART_Init+0x58>)
 80021d8:	2200      	movs	r2, #0
 80021da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80021dc:	4b0c      	ldr	r3, [pc, #48]	; (8002210 <MX_USART3_UART_Init+0x58>)
 80021de:	220c      	movs	r2, #12
 80021e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021e2:	4b0b      	ldr	r3, [pc, #44]	; (8002210 <MX_USART3_UART_Init+0x58>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80021e8:	4b09      	ldr	r3, [pc, #36]	; (8002210 <MX_USART3_UART_Init+0x58>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021ee:	4b08      	ldr	r3, [pc, #32]	; (8002210 <MX_USART3_UART_Init+0x58>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021f4:	4b06      	ldr	r3, [pc, #24]	; (8002210 <MX_USART3_UART_Init+0x58>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80021fa:	4805      	ldr	r0, [pc, #20]	; (8002210 <MX_USART3_UART_Init+0x58>)
 80021fc:	f004 fb02 	bl	8006804 <HAL_UART_Init>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002206:	f7ff fe27 	bl	8001e58 <Error_Handler>
  }

}
 800220a:	bf00      	nop
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	20000364 	.word	0x20000364
 8002214:	40004800 	.word	0x40004800

08002218 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b08a      	sub	sp, #40	; 0x28
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002220:	f107 0314 	add.w	r3, r7, #20
 8002224:	2200      	movs	r2, #0
 8002226:	601a      	str	r2, [r3, #0]
 8002228:	605a      	str	r2, [r3, #4]
 800222a:	609a      	str	r2, [r3, #8]
 800222c:	60da      	str	r2, [r3, #12]
 800222e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a1b      	ldr	r2, [pc, #108]	; (80022a4 <HAL_UART_MspInit+0x8c>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d130      	bne.n	800229c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800223a:	4b1b      	ldr	r3, [pc, #108]	; (80022a8 <HAL_UART_MspInit+0x90>)
 800223c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223e:	4a1a      	ldr	r2, [pc, #104]	; (80022a8 <HAL_UART_MspInit+0x90>)
 8002240:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002244:	6413      	str	r3, [r2, #64]	; 0x40
 8002246:	4b18      	ldr	r3, [pc, #96]	; (80022a8 <HAL_UART_MspInit+0x90>)
 8002248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800224e:	613b      	str	r3, [r7, #16]
 8002250:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002252:	4b15      	ldr	r3, [pc, #84]	; (80022a8 <HAL_UART_MspInit+0x90>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	4a14      	ldr	r2, [pc, #80]	; (80022a8 <HAL_UART_MspInit+0x90>)
 8002258:	f043 0308 	orr.w	r3, r3, #8
 800225c:	6313      	str	r3, [r2, #48]	; 0x30
 800225e:	4b12      	ldr	r3, [pc, #72]	; (80022a8 <HAL_UART_MspInit+0x90>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	f003 0308 	and.w	r3, r3, #8
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800226a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800226e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002270:	2302      	movs	r3, #2
 8002272:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002274:	2300      	movs	r3, #0
 8002276:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002278:	2303      	movs	r3, #3
 800227a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800227c:	2307      	movs	r3, #7
 800227e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002280:	f107 0314 	add.w	r3, r7, #20
 8002284:	4619      	mov	r1, r3
 8002286:	4809      	ldr	r0, [pc, #36]	; (80022ac <HAL_UART_MspInit+0x94>)
 8002288:	f000 fee4 	bl	8003054 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800228c:	2200      	movs	r2, #0
 800228e:	2100      	movs	r1, #0
 8002290:	2027      	movs	r0, #39	; 0x27
 8002292:	f000 fa1a 	bl	80026ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002296:	2027      	movs	r0, #39	; 0x27
 8002298:	f000 fa33 	bl	8002702 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800229c:	bf00      	nop
 800229e:	3728      	adds	r7, #40	; 0x28
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40004800 	.word	0x40004800
 80022a8:	40023800 	.word	0x40023800
 80022ac:	40020c00 	.word	0x40020c00

080022b0 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80022b4:	4b14      	ldr	r3, [pc, #80]	; (8002308 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022b6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80022ba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80022bc:	4b12      	ldr	r3, [pc, #72]	; (8002308 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022be:	2206      	movs	r2, #6
 80022c0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80022c2:	4b11      	ldr	r3, [pc, #68]	; (8002308 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022c4:	2202      	movs	r2, #2
 80022c6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80022c8:	4b0f      	ldr	r3, [pc, #60]	; (8002308 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80022ce:	4b0e      	ldr	r3, [pc, #56]	; (8002308 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022d0:	2202      	movs	r2, #2
 80022d2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80022d4:	4b0c      	ldr	r3, [pc, #48]	; (8002308 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022d6:	2201      	movs	r2, #1
 80022d8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80022da:	4b0b      	ldr	r3, [pc, #44]	; (8002308 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022dc:	2200      	movs	r2, #0
 80022de:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80022e0:	4b09      	ldr	r3, [pc, #36]	; (8002308 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80022e6:	4b08      	ldr	r3, [pc, #32]	; (8002308 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022e8:	2201      	movs	r2, #1
 80022ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80022ec:	4b06      	ldr	r3, [pc, #24]	; (8002308 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80022f2:	4805      	ldr	r0, [pc, #20]	; (8002308 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022f4:	f002 fa70 	bl	80047d8 <HAL_PCD_Init>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80022fe:	f7ff fdab 	bl	8001e58 <Error_Handler>
  }

}
 8002302:	bf00      	nop
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	200003e4 	.word	0x200003e4

0800230c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b08a      	sub	sp, #40	; 0x28
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002314:	f107 0314 	add.w	r3, r7, #20
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	605a      	str	r2, [r3, #4]
 800231e:	609a      	str	r2, [r3, #8]
 8002320:	60da      	str	r2, [r3, #12]
 8002322:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800232c:	d141      	bne.n	80023b2 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800232e:	4b23      	ldr	r3, [pc, #140]	; (80023bc <HAL_PCD_MspInit+0xb0>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	4a22      	ldr	r2, [pc, #136]	; (80023bc <HAL_PCD_MspInit+0xb0>)
 8002334:	f043 0301 	orr.w	r3, r3, #1
 8002338:	6313      	str	r3, [r2, #48]	; 0x30
 800233a:	4b20      	ldr	r3, [pc, #128]	; (80023bc <HAL_PCD_MspInit+0xb0>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	613b      	str	r3, [r7, #16]
 8002344:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002346:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800234a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800234c:	2302      	movs	r3, #2
 800234e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002350:	2300      	movs	r3, #0
 8002352:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002354:	2303      	movs	r3, #3
 8002356:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002358:	230a      	movs	r3, #10
 800235a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800235c:	f107 0314 	add.w	r3, r7, #20
 8002360:	4619      	mov	r1, r3
 8002362:	4817      	ldr	r0, [pc, #92]	; (80023c0 <HAL_PCD_MspInit+0xb4>)
 8002364:	f000 fe76 	bl	8003054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002368:	f44f 7300 	mov.w	r3, #512	; 0x200
 800236c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800236e:	2300      	movs	r3, #0
 8002370:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002372:	2300      	movs	r3, #0
 8002374:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002376:	f107 0314 	add.w	r3, r7, #20
 800237a:	4619      	mov	r1, r3
 800237c:	4810      	ldr	r0, [pc, #64]	; (80023c0 <HAL_PCD_MspInit+0xb4>)
 800237e:	f000 fe69 	bl	8003054 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002382:	4b0e      	ldr	r3, [pc, #56]	; (80023bc <HAL_PCD_MspInit+0xb0>)
 8002384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002386:	4a0d      	ldr	r2, [pc, #52]	; (80023bc <HAL_PCD_MspInit+0xb0>)
 8002388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800238c:	6353      	str	r3, [r2, #52]	; 0x34
 800238e:	4b0b      	ldr	r3, [pc, #44]	; (80023bc <HAL_PCD_MspInit+0xb0>)
 8002390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002396:	60fb      	str	r3, [r7, #12]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	4b08      	ldr	r3, [pc, #32]	; (80023bc <HAL_PCD_MspInit+0xb0>)
 800239c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239e:	4a07      	ldr	r2, [pc, #28]	; (80023bc <HAL_PCD_MspInit+0xb0>)
 80023a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023a4:	6453      	str	r3, [r2, #68]	; 0x44
 80023a6:	4b05      	ldr	r3, [pc, #20]	; (80023bc <HAL_PCD_MspInit+0xb0>)
 80023a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ae:	60bb      	str	r3, [r7, #8]
 80023b0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80023b2:	bf00      	nop
 80023b4:	3728      	adds	r7, #40	; 0x28
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	40023800 	.word	0x40023800
 80023c0:	40020000 	.word	0x40020000

080023c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80023c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023fc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80023c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80023ca:	e003      	b.n	80023d4 <LoopCopyDataInit>

080023cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80023cc:	4b0c      	ldr	r3, [pc, #48]	; (8002400 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80023ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80023d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80023d2:	3104      	adds	r1, #4

080023d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80023d4:	480b      	ldr	r0, [pc, #44]	; (8002404 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80023d6:	4b0c      	ldr	r3, [pc, #48]	; (8002408 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80023d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80023da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80023dc:	d3f6      	bcc.n	80023cc <CopyDataInit>
  ldr  r2, =_sbss
 80023de:	4a0b      	ldr	r2, [pc, #44]	; (800240c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80023e0:	e002      	b.n	80023e8 <LoopFillZerobss>

080023e2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80023e2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80023e4:	f842 3b04 	str.w	r3, [r2], #4

080023e8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80023e8:	4b09      	ldr	r3, [pc, #36]	; (8002410 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80023ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80023ec:	d3f9      	bcc.n	80023e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80023ee:	f7ff fdf5 	bl	8001fdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023f2:	f005 fc7f 	bl	8007cf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023f6:	f7ff fbfb 	bl	8001bf0 <main>
  bx  lr    
 80023fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80023fc:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8002400:	0800bb00 	.word	0x0800bb00
  ldr  r0, =_sdata
 8002404:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002408:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 800240c:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8002410:	200007f0 	.word	0x200007f0

08002414 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002414:	e7fe      	b.n	8002414 <ADC_IRQHandler>

08002416 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800241a:	2003      	movs	r0, #3
 800241c:	f000 f94a 	bl	80026b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002420:	2000      	movs	r0, #0
 8002422:	f000 f805 	bl	8002430 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002426:	f7ff fd1f 	bl	8001e68 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800242a:	2300      	movs	r3, #0
}
 800242c:	4618      	mov	r0, r3
 800242e:	bd80      	pop	{r7, pc}

08002430 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002438:	4b12      	ldr	r3, [pc, #72]	; (8002484 <HAL_InitTick+0x54>)
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	4b12      	ldr	r3, [pc, #72]	; (8002488 <HAL_InitTick+0x58>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	4619      	mov	r1, r3
 8002442:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002446:	fbb3 f3f1 	udiv	r3, r3, r1
 800244a:	fbb2 f3f3 	udiv	r3, r2, r3
 800244e:	4618      	mov	r0, r3
 8002450:	f000 f965 	bl	800271e <HAL_SYSTICK_Config>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e00e      	b.n	800247c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2b0f      	cmp	r3, #15
 8002462:	d80a      	bhi.n	800247a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002464:	2200      	movs	r2, #0
 8002466:	6879      	ldr	r1, [r7, #4]
 8002468:	f04f 30ff 	mov.w	r0, #4294967295
 800246c:	f000 f92d 	bl	80026ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002470:	4a06      	ldr	r2, [pc, #24]	; (800248c <HAL_InitTick+0x5c>)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002476:	2300      	movs	r3, #0
 8002478:	e000      	b.n	800247c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
}
 800247c:	4618      	mov	r0, r3
 800247e:	3708      	adds	r7, #8
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	20000000 	.word	0x20000000
 8002488:	20000008 	.word	0x20000008
 800248c:	20000004 	.word	0x20000004

08002490 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002494:	4b06      	ldr	r3, [pc, #24]	; (80024b0 <HAL_IncTick+0x20>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	461a      	mov	r2, r3
 800249a:	4b06      	ldr	r3, [pc, #24]	; (80024b4 <HAL_IncTick+0x24>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4413      	add	r3, r2
 80024a0:	4a04      	ldr	r2, [pc, #16]	; (80024b4 <HAL_IncTick+0x24>)
 80024a2:	6013      	str	r3, [r2, #0]
}
 80024a4:	bf00      	nop
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	20000008 	.word	0x20000008
 80024b4:	200007e8 	.word	0x200007e8

080024b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  return uwTick;
 80024bc:	4b03      	ldr	r3, [pc, #12]	; (80024cc <HAL_GetTick+0x14>)
 80024be:	681b      	ldr	r3, [r3, #0]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	200007e8 	.word	0x200007e8

080024d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024d8:	f7ff ffee 	bl	80024b8 <HAL_GetTick>
 80024dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e8:	d005      	beq.n	80024f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024ea:	4b09      	ldr	r3, [pc, #36]	; (8002510 <HAL_Delay+0x40>)
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	461a      	mov	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	4413      	add	r3, r2
 80024f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024f6:	bf00      	nop
 80024f8:	f7ff ffde 	bl	80024b8 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	429a      	cmp	r2, r3
 8002506:	d8f7      	bhi.n	80024f8 <HAL_Delay+0x28>
  {
  }
}
 8002508:	bf00      	nop
 800250a:	3710      	adds	r7, #16
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	20000008 	.word	0x20000008

08002514 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002514:	b480      	push	{r7}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f003 0307 	and.w	r3, r3, #7
 8002522:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002524:	4b0b      	ldr	r3, [pc, #44]	; (8002554 <__NVIC_SetPriorityGrouping+0x40>)
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800252a:	68ba      	ldr	r2, [r7, #8]
 800252c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002530:	4013      	ands	r3, r2
 8002532:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800253c:	4b06      	ldr	r3, [pc, #24]	; (8002558 <__NVIC_SetPriorityGrouping+0x44>)
 800253e:	4313      	orrs	r3, r2
 8002540:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002542:	4a04      	ldr	r2, [pc, #16]	; (8002554 <__NVIC_SetPriorityGrouping+0x40>)
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	60d3      	str	r3, [r2, #12]
}
 8002548:	bf00      	nop
 800254a:	3714      	adds	r7, #20
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr
 8002554:	e000ed00 	.word	0xe000ed00
 8002558:	05fa0000 	.word	0x05fa0000

0800255c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002560:	4b04      	ldr	r3, [pc, #16]	; (8002574 <__NVIC_GetPriorityGrouping+0x18>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	0a1b      	lsrs	r3, r3, #8
 8002566:	f003 0307 	and.w	r3, r3, #7
}
 800256a:	4618      	mov	r0, r3
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	e000ed00 	.word	0xe000ed00

08002578 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	4603      	mov	r3, r0
 8002580:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002586:	2b00      	cmp	r3, #0
 8002588:	db0b      	blt.n	80025a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800258a:	79fb      	ldrb	r3, [r7, #7]
 800258c:	f003 021f 	and.w	r2, r3, #31
 8002590:	4907      	ldr	r1, [pc, #28]	; (80025b0 <__NVIC_EnableIRQ+0x38>)
 8002592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002596:	095b      	lsrs	r3, r3, #5
 8002598:	2001      	movs	r0, #1
 800259a:	fa00 f202 	lsl.w	r2, r0, r2
 800259e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025a2:	bf00      	nop
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	e000e100 	.word	0xe000e100

080025b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	4603      	mov	r3, r0
 80025bc:	6039      	str	r1, [r7, #0]
 80025be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	db0a      	blt.n	80025de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	b2da      	uxtb	r2, r3
 80025cc:	490c      	ldr	r1, [pc, #48]	; (8002600 <__NVIC_SetPriority+0x4c>)
 80025ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d2:	0112      	lsls	r2, r2, #4
 80025d4:	b2d2      	uxtb	r2, r2
 80025d6:	440b      	add	r3, r1
 80025d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025dc:	e00a      	b.n	80025f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	b2da      	uxtb	r2, r3
 80025e2:	4908      	ldr	r1, [pc, #32]	; (8002604 <__NVIC_SetPriority+0x50>)
 80025e4:	79fb      	ldrb	r3, [r7, #7]
 80025e6:	f003 030f 	and.w	r3, r3, #15
 80025ea:	3b04      	subs	r3, #4
 80025ec:	0112      	lsls	r2, r2, #4
 80025ee:	b2d2      	uxtb	r2, r2
 80025f0:	440b      	add	r3, r1
 80025f2:	761a      	strb	r2, [r3, #24]
}
 80025f4:	bf00      	nop
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr
 8002600:	e000e100 	.word	0xe000e100
 8002604:	e000ed00 	.word	0xe000ed00

08002608 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002608:	b480      	push	{r7}
 800260a:	b089      	sub	sp, #36	; 0x24
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f003 0307 	and.w	r3, r3, #7
 800261a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	f1c3 0307 	rsb	r3, r3, #7
 8002622:	2b04      	cmp	r3, #4
 8002624:	bf28      	it	cs
 8002626:	2304      	movcs	r3, #4
 8002628:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	3304      	adds	r3, #4
 800262e:	2b06      	cmp	r3, #6
 8002630:	d902      	bls.n	8002638 <NVIC_EncodePriority+0x30>
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	3b03      	subs	r3, #3
 8002636:	e000      	b.n	800263a <NVIC_EncodePriority+0x32>
 8002638:	2300      	movs	r3, #0
 800263a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800263c:	f04f 32ff 	mov.w	r2, #4294967295
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	43da      	mvns	r2, r3
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	401a      	ands	r2, r3
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002650:	f04f 31ff 	mov.w	r1, #4294967295
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	fa01 f303 	lsl.w	r3, r1, r3
 800265a:	43d9      	mvns	r1, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002660:	4313      	orrs	r3, r2
         );
}
 8002662:	4618      	mov	r0, r3
 8002664:	3724      	adds	r7, #36	; 0x24
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
	...

08002670 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	3b01      	subs	r3, #1
 800267c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002680:	d301      	bcc.n	8002686 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002682:	2301      	movs	r3, #1
 8002684:	e00f      	b.n	80026a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002686:	4a0a      	ldr	r2, [pc, #40]	; (80026b0 <SysTick_Config+0x40>)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	3b01      	subs	r3, #1
 800268c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800268e:	210f      	movs	r1, #15
 8002690:	f04f 30ff 	mov.w	r0, #4294967295
 8002694:	f7ff ff8e 	bl	80025b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002698:	4b05      	ldr	r3, [pc, #20]	; (80026b0 <SysTick_Config+0x40>)
 800269a:	2200      	movs	r2, #0
 800269c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800269e:	4b04      	ldr	r3, [pc, #16]	; (80026b0 <SysTick_Config+0x40>)
 80026a0:	2207      	movs	r2, #7
 80026a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	e000e010 	.word	0xe000e010

080026b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f7ff ff29 	bl	8002514 <__NVIC_SetPriorityGrouping>
}
 80026c2:	bf00      	nop
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b086      	sub	sp, #24
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	4603      	mov	r3, r0
 80026d2:	60b9      	str	r1, [r7, #8]
 80026d4:	607a      	str	r2, [r7, #4]
 80026d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80026d8:	2300      	movs	r3, #0
 80026da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026dc:	f7ff ff3e 	bl	800255c <__NVIC_GetPriorityGrouping>
 80026e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	68b9      	ldr	r1, [r7, #8]
 80026e6:	6978      	ldr	r0, [r7, #20]
 80026e8:	f7ff ff8e 	bl	8002608 <NVIC_EncodePriority>
 80026ec:	4602      	mov	r2, r0
 80026ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026f2:	4611      	mov	r1, r2
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7ff ff5d 	bl	80025b4 <__NVIC_SetPriority>
}
 80026fa:	bf00      	nop
 80026fc:	3718      	adds	r7, #24
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002702:	b580      	push	{r7, lr}
 8002704:	b082      	sub	sp, #8
 8002706:	af00      	add	r7, sp, #0
 8002708:	4603      	mov	r3, r0
 800270a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800270c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff ff31 	bl	8002578 <__NVIC_EnableIRQ>
}
 8002716:	bf00      	nop
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	b082      	sub	sp, #8
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f7ff ffa2 	bl	8002670 <SysTick_Config>
 800272c:	4603      	mov	r3, r0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002736:	b480      	push	{r7}
 8002738:	b083      	sub	sp, #12
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d004      	beq.n	8002754 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2280      	movs	r2, #128	; 0x80
 800274e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e00c      	b.n	800276e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2205      	movs	r2, #5
 8002758:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f022 0201 	bic.w	r2, r2, #1
 800276a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
	...

0800277c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b088      	sub	sp, #32
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8002784:	2300      	movs	r3, #0
 8002786:	61fb      	str	r3, [r7, #28]
 8002788:	2300      	movs	r3, #0
 800278a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 800278c:	4ba9      	ldr	r3, [pc, #676]	; (8002a34 <HAL_ETH_Init+0x2b8>)
 800278e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8002790:	2300      	movs	r3, #0
 8002792:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8002794:	2300      	movs	r3, #0
 8002796:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e183      	b.n	8002aaa <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d106      	bne.n	80027bc <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f7fe fd8c 	bl	80012d4 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027bc:	4b9e      	ldr	r3, [pc, #632]	; (8002a38 <HAL_ETH_Init+0x2bc>)
 80027be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c0:	4a9d      	ldr	r2, [pc, #628]	; (8002a38 <HAL_ETH_Init+0x2bc>)
 80027c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027c6:	6453      	str	r3, [r2, #68]	; 0x44
 80027c8:	4b9b      	ldr	r3, [pc, #620]	; (8002a38 <HAL_ETH_Init+0x2bc>)
 80027ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027d0:	60bb      	str	r3, [r7, #8]
 80027d2:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80027d4:	4b99      	ldr	r3, [pc, #612]	; (8002a3c <HAL_ETH_Init+0x2c0>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	4a98      	ldr	r2, [pc, #608]	; (8002a3c <HAL_ETH_Init+0x2c0>)
 80027da:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80027de:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80027e0:	4b96      	ldr	r3, [pc, #600]	; (8002a3c <HAL_ETH_Init+0x2c0>)
 80027e2:	685a      	ldr	r2, [r3, #4]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a1b      	ldr	r3, [r3, #32]
 80027e8:	4994      	ldr	r1, [pc, #592]	; (8002a3c <HAL_ETH_Init+0x2c0>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f042 0201 	orr.w	r2, r2, #1
 8002800:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002804:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002806:	f7ff fe57 	bl	80024b8 <HAL_GetTick>
 800280a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800280c:	e011      	b.n	8002832 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800280e:	f7ff fe53 	bl	80024b8 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800281c:	d909      	bls.n	8002832 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2203      	movs	r2, #3
 8002822:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e13b      	b.n	8002aaa <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	2b00      	cmp	r3, #0
 8002842:	d1e4      	bne.n	800280e <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	f023 031c 	bic.w	r3, r3, #28
 8002852:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002854:	f002 fd3c 	bl	80052d0 <HAL_RCC_GetHCLKFreq>
 8002858:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	4a78      	ldr	r2, [pc, #480]	; (8002a40 <HAL_ETH_Init+0x2c4>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d908      	bls.n	8002874 <HAL_ETH_Init+0xf8>
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	4a77      	ldr	r2, [pc, #476]	; (8002a44 <HAL_ETH_Init+0x2c8>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d804      	bhi.n	8002874 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	f043 0308 	orr.w	r3, r3, #8
 8002870:	61fb      	str	r3, [r7, #28]
 8002872:	e027      	b.n	80028c4 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	4a73      	ldr	r2, [pc, #460]	; (8002a44 <HAL_ETH_Init+0x2c8>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d908      	bls.n	800288e <HAL_ETH_Init+0x112>
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	4a72      	ldr	r2, [pc, #456]	; (8002a48 <HAL_ETH_Init+0x2cc>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d804      	bhi.n	800288e <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	f043 030c 	orr.w	r3, r3, #12
 800288a:	61fb      	str	r3, [r7, #28]
 800288c:	e01a      	b.n	80028c4 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	4a6d      	ldr	r2, [pc, #436]	; (8002a48 <HAL_ETH_Init+0x2cc>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d903      	bls.n	800289e <HAL_ETH_Init+0x122>
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	4a6c      	ldr	r2, [pc, #432]	; (8002a4c <HAL_ETH_Init+0x2d0>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d911      	bls.n	80028c2 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	4a6a      	ldr	r2, [pc, #424]	; (8002a4c <HAL_ETH_Init+0x2d0>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d908      	bls.n	80028b8 <HAL_ETH_Init+0x13c>
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	4a69      	ldr	r2, [pc, #420]	; (8002a50 <HAL_ETH_Init+0x2d4>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d804      	bhi.n	80028b8 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	f043 0304 	orr.w	r3, r3, #4
 80028b4:	61fb      	str	r3, [r7, #28]
 80028b6:	e005      	b.n	80028c4 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	f043 0310 	orr.w	r3, r3, #16
 80028be:	61fb      	str	r3, [r7, #28]
 80028c0:	e000      	b.n	80028c4 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80028c2:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	69fa      	ldr	r2, [r7, #28]
 80028ca:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80028cc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80028d0:	2100      	movs	r1, #0
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f000 f956 	bl	8002b84 <HAL_ETH_WritePHYRegister>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00b      	beq.n	80028f6 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80028e2:	6939      	ldr	r1, [r7, #16]
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f000 f9b3 	bl	8002c50 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2201      	movs	r2, #1
 80028ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e0d9      	b.n	8002aaa <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80028f6:	20ff      	movs	r0, #255	; 0xff
 80028f8:	f7ff fdea 	bl	80024d0 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	2b00      	cmp	r3, #0
 8002902:	f000 80a7 	beq.w	8002a54 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002906:	f7ff fdd7 	bl	80024b8 <HAL_GetTick>
 800290a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800290c:	f107 030c 	add.w	r3, r7, #12
 8002910:	461a      	mov	r2, r3
 8002912:	2101      	movs	r1, #1
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f000 f8cd 	bl	8002ab4 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800291a:	f7ff fdcd 	bl	80024b8 <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	f241 3288 	movw	r2, #5000	; 0x1388
 8002928:	4293      	cmp	r3, r2
 800292a:	d90f      	bls.n	800294c <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002930:	6939      	ldr	r1, [r7, #16]
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f000 f98c 	bl	8002c50 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e0ae      	b.n	8002aaa <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f003 0304 	and.w	r3, r3, #4
 8002952:	2b00      	cmp	r3, #0
 8002954:	d0da      	beq.n	800290c <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8002956:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800295a:	2100      	movs	r1, #0
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 f911 	bl	8002b84 <HAL_ETH_WritePHYRegister>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00b      	beq.n	8002980 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800296c:	6939      	ldr	r1, [r7, #16]
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 f96e 	bl	8002c50 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800297c:	2301      	movs	r3, #1
 800297e:	e094      	b.n	8002aaa <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8002980:	f7ff fd9a 	bl	80024b8 <HAL_GetTick>
 8002984:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002986:	f107 030c 	add.w	r3, r7, #12
 800298a:	461a      	mov	r2, r3
 800298c:	2101      	movs	r1, #1
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 f890 	bl	8002ab4 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8002994:	f7ff fd90 	bl	80024b8 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	f241 3288 	movw	r2, #5000	; 0x1388
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d90f      	bls.n	80029c6 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80029aa:	6939      	ldr	r1, [r7, #16]
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f000 f94f 	bl	8002c50 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e071      	b.n	8002aaa <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f003 0320 	and.w	r3, r3, #32
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d0da      	beq.n	8002986 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80029d0:	f107 030c 	add.w	r3, r7, #12
 80029d4:	461a      	mov	r2, r3
 80029d6:	211f      	movs	r1, #31
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f000 f86b 	bl	8002ab4 <HAL_ETH_ReadPHYRegister>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00b      	beq.n	80029fc <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80029e8:	6939      	ldr	r1, [r7, #16]
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 f930 	bl	8002c50 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80029f8:	2301      	movs	r3, #1
 80029fa:	e056      	b.n	8002aaa <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f003 0310 	and.w	r3, r3, #16
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d004      	beq.n	8002a10 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a0c:	60da      	str	r2, [r3, #12]
 8002a0e:	e002      	b.n	8002a16 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d003      	beq.n	8002a28 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	609a      	str	r2, [r3, #8]
 8002a26:	e037      	b.n	8002a98 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a2e:	609a      	str	r2, [r3, #8]
 8002a30:	e032      	b.n	8002a98 <HAL_ETH_Init+0x31c>
 8002a32:	bf00      	nop
 8002a34:	03938700 	.word	0x03938700
 8002a38:	40023800 	.word	0x40023800
 8002a3c:	40013800 	.word	0x40013800
 8002a40:	01312cff 	.word	0x01312cff
 8002a44:	02160ebf 	.word	0x02160ebf
 8002a48:	039386ff 	.word	0x039386ff
 8002a4c:	05f5e0ff 	.word	0x05f5e0ff
 8002a50:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	08db      	lsrs	r3, r3, #3
 8002a5a:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	085b      	lsrs	r3, r3, #1
 8002a62:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8002a64:	4313      	orrs	r3, r2
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	461a      	mov	r2, r3
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f000 f889 	bl	8002b84 <HAL_ETH_WritePHYRegister>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d00b      	beq.n	8002a90 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002a7c:	6939      	ldr	r1, [r7, #16]
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f8e6 	bl	8002c50 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e00c      	b.n	8002aaa <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8002a90:	f640 70ff 	movw	r0, #4095	; 0xfff
 8002a94:	f7ff fd1c 	bl	80024d0 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8002a98:	6939      	ldr	r1, [r7, #16]
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 f8d8 	bl	8002c50 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3720      	adds	r7, #32
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop

08002ab4 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b086      	sub	sp, #24
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	460b      	mov	r3, r1
 8002abe:	607a      	str	r2, [r7, #4]
 8002ac0:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b82      	cmp	r3, #130	; 0x82
 8002ad4:	d101      	bne.n	8002ada <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	e050      	b.n	8002b7c <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2282      	movs	r2, #130	; 0x82
 8002ade:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	f003 031c 	and.w	r3, r3, #28
 8002af0:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	8a1b      	ldrh	r3, [r3, #16]
 8002af6:	02db      	lsls	r3, r3, #11
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8002b00:	897b      	ldrh	r3, [r7, #10]
 8002b02:	019b      	lsls	r3, r3, #6
 8002b04:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002b08:	697a      	ldr	r2, [r7, #20]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	f023 0302 	bic.w	r3, r3, #2
 8002b14:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	f043 0301 	orr.w	r3, r3, #1
 8002b1c:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	697a      	ldr	r2, [r7, #20]
 8002b24:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002b26:	f7ff fcc7 	bl	80024b8 <HAL_GetTick>
 8002b2a:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002b2c:	e015      	b.n	8002b5a <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8002b2e:	f7ff fcc3 	bl	80024b8 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b3c:	d309      	bcc.n	8002b52 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2201      	movs	r2, #1
 8002b42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e014      	b.n	8002b7c <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	f003 0301 	and.w	r3, r3, #1
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d1e4      	bne.n	8002b2e <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2201      	movs	r2, #1
 8002b76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3718      	adds	r7, #24
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	607a      	str	r2, [r7, #4]
 8002b90:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8002b92:	2300      	movs	r3, #0
 8002b94:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8002b96:	2300      	movs	r3, #0
 8002b98:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b42      	cmp	r3, #66	; 0x42
 8002ba4:	d101      	bne.n	8002baa <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	e04e      	b.n	8002c48 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2242      	movs	r2, #66	; 0x42
 8002bae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	f003 031c 	and.w	r3, r3, #28
 8002bc0:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	8a1b      	ldrh	r3, [r3, #16]
 8002bc6:	02db      	lsls	r3, r3, #11
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002bd0:	897b      	ldrh	r3, [r7, #10]
 8002bd2:	019b      	lsls	r3, r3, #6
 8002bd4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002bd8:	697a      	ldr	r2, [r7, #20]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	f043 0302 	orr.w	r3, r3, #2
 8002be4:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	f043 0301 	orr.w	r3, r3, #1
 8002bec:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	b29a      	uxth	r2, r3
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	697a      	ldr	r2, [r7, #20]
 8002bfe:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002c00:	f7ff fc5a 	bl	80024b8 <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002c06:	e015      	b.n	8002c34 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8002c08:	f7ff fc56 	bl	80024b8 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c16:	d309      	bcc.n	8002c2c <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e00d      	b.n	8002c48 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d1e4      	bne.n	8002c08 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2201      	movs	r2, #1
 8002c42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3718      	adds	r7, #24
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b0b0      	sub	sp, #192	; 0xc0
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d007      	beq.n	8002c76 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c6c:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c74:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002c76:	2300      	movs	r3, #0
 8002c78:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002c82:	2300      	movs	r3, #0
 8002c84:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002c86:	2300      	movs	r3, #0
 8002c88:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	69db      	ldr	r3, [r3, #28]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d103      	bne.n	8002c9e <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002c96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c9a:	663b      	str	r3, [r7, #96]	; 0x60
 8002c9c:	e001      	b.n	8002ca2 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002ca2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ca6:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002cac:	2300      	movs	r3, #0
 8002cae:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002cbc:	2340      	movs	r3, #64	; 0x40
 8002cbe:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8002cea:	2300      	movs	r3, #0
 8002cec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002cf0:	2380      	movs	r3, #128	; 0x80
 8002cf2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002d02:	2300      	movs	r3, #0
 8002d04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8002d14:	2300      	movs	r3, #0
 8002d16:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002d24:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d28:	4bab      	ldr	r3, [pc, #684]	; (8002fd8 <ETH_MACDMAConfig+0x388>)
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002d30:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8002d32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002d34:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002d36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002d38:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002d3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002d3c:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002d42:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002d44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8002d46:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002d48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002d4a:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002d50:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002d52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002d54:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002d56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002d58:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002d5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002d5c:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002d5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002d60:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8002d62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002d64:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002d66:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d78:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d84:	2001      	movs	r0, #1
 8002d86:	f7ff fba3 	bl	80024d0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d92:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002d94:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002d96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002d98:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002d9a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002d9c:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002d9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002da2:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002da4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002da8:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002daa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002dae:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002db0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002db4:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002db8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002dc0:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002dc2:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002dce:	2001      	movs	r0, #1
 8002dd0:	f7ff fb7e 	bl	80024d0 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002ddc:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002de6:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002df0:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002dfc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002e00:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002e04:	4013      	ands	r3, r2
 8002e06:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002e0a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e0e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002e10:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002e14:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002e16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002e1a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002e1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002e20:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002e22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002e26:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002e28:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002e2c:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002e2e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002e32:	4313      	orrs	r3, r2
 8002e34:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002e40:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e4c:	2001      	movs	r0, #1
 8002e4e:	f7ff fb3f 	bl	80024d0 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002e5a:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002e5c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002e60:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	69db      	ldr	r3, [r3, #28]
 8002e72:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e76:	2001      	movs	r0, #1
 8002e78:	f7ff fb2a 	bl	80024d0 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002e84:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002e86:	2300      	movs	r3, #0
 8002e88:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002e8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e8e:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002e90:	2300      	movs	r3, #0
 8002e92:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002e94:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e98:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002eaa:	2304      	movs	r3, #4
 8002eac:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002eae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002eb4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002eb8:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002eba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002ebe:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002ec0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ec4:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002ec6:	2380      	movs	r3, #128	; 0x80
 8002ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	f241 0318 	movw	r3, #4120	; 0x1018
 8002eda:	4413      	add	r3, r2
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8002ee2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002ee6:	4b3d      	ldr	r3, [pc, #244]	; (8002fdc <ETH_MACDMAConfig+0x38c>)
 8002ee8:	4013      	ands	r3, r2
 8002eea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002eee:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002ef0:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002ef2:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002ef4:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002ef6:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002ef8:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002efa:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002efc:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002efe:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002f00:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002f02:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002f04:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002f06:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002f0a:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002f0e:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002f10:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002f14:	4313      	orrs	r3, r2
 8002f16:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	f241 0318 	movw	r3, #4120	; 0x1018
 8002f22:	4413      	add	r3, r2
 8002f24:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002f28:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	f241 0318 	movw	r3, #4120	; 0x1018
 8002f32:	4413      	add	r3, r2
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f3a:	2001      	movs	r0, #1
 8002f3c:	f7ff fac8 	bl	80024d0 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	f241 0318 	movw	r3, #4120	; 0x1018
 8002f48:	4413      	add	r3, r2
 8002f4a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002f4e:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002f50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002f54:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002f58:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002f5c:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002f5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002f60:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8002f62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f64:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002f66:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002f68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8002f6a:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002f74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f78:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f88:	2001      	movs	r0, #1
 8002f8a:	f7ff faa1 	bl	80024d0 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f96:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002f9a:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d10d      	bne.n	8002fc0 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	f241 031c 	movw	r3, #4124	; 0x101c
 8002fac:	4413      	add	r3, r2
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	6811      	ldr	r1, [r2, #0]
 8002fb4:	4a0a      	ldr	r2, [pc, #40]	; (8002fe0 <ETH_MACDMAConfig+0x390>)
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	f241 031c 	movw	r3, #4124	; 0x101c
 8002fbc:	440b      	add	r3, r1
 8002fbe:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	695b      	ldr	r3, [r3, #20]
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f000 f80b 	bl	8002fe4 <ETH_MACAddressConfig>
}
 8002fce:	bf00      	nop
 8002fd0:	37c0      	adds	r7, #192	; 0xc0
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	ff20810f 	.word	0xff20810f
 8002fdc:	f8de3f23 	.word	0xf8de3f23
 8002fe0:	00010040 	.word	0x00010040

08002fe4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b087      	sub	sp, #28
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	3305      	adds	r3, #5
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	021b      	lsls	r3, r3, #8
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	3204      	adds	r2, #4
 8002ffc:	7812      	ldrb	r2, [r2, #0]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8003002:	68ba      	ldr	r2, [r7, #8]
 8003004:	4b11      	ldr	r3, [pc, #68]	; (800304c <ETH_MACAddressConfig+0x68>)
 8003006:	4413      	add	r3, r2
 8003008:	461a      	mov	r2, r3
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	3303      	adds	r3, #3
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	061a      	lsls	r2, r3, #24
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	3302      	adds	r3, #2
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	041b      	lsls	r3, r3, #16
 800301e:	431a      	orrs	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	3301      	adds	r3, #1
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	021b      	lsls	r3, r3, #8
 8003028:	4313      	orrs	r3, r2
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	7812      	ldrb	r2, [r2, #0]
 800302e:	4313      	orrs	r3, r2
 8003030:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8003032:	68ba      	ldr	r2, [r7, #8]
 8003034:	4b06      	ldr	r3, [pc, #24]	; (8003050 <ETH_MACAddressConfig+0x6c>)
 8003036:	4413      	add	r3, r2
 8003038:	461a      	mov	r2, r3
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	6013      	str	r3, [r2, #0]
}
 800303e:	bf00      	nop
 8003040:	371c      	adds	r7, #28
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	40028040 	.word	0x40028040
 8003050:	40028044 	.word	0x40028044

08003054 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003054:	b480      	push	{r7}
 8003056:	b089      	sub	sp, #36	; 0x24
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800305e:	2300      	movs	r3, #0
 8003060:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003062:	2300      	movs	r3, #0
 8003064:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003066:	2300      	movs	r3, #0
 8003068:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800306a:	2300      	movs	r3, #0
 800306c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800306e:	2300      	movs	r3, #0
 8003070:	61fb      	str	r3, [r7, #28]
 8003072:	e175      	b.n	8003360 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003074:	2201      	movs	r2, #1
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	fa02 f303 	lsl.w	r3, r2, r3
 800307c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	4013      	ands	r3, r2
 8003086:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003088:	693a      	ldr	r2, [r7, #16]
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	429a      	cmp	r2, r3
 800308e:	f040 8164 	bne.w	800335a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	2b02      	cmp	r3, #2
 8003098:	d003      	beq.n	80030a2 <HAL_GPIO_Init+0x4e>
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	2b12      	cmp	r3, #18
 80030a0:	d123      	bne.n	80030ea <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	08da      	lsrs	r2, r3, #3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	3208      	adds	r2, #8
 80030aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	f003 0307 	and.w	r3, r3, #7
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	220f      	movs	r2, #15
 80030ba:	fa02 f303 	lsl.w	r3, r2, r3
 80030be:	43db      	mvns	r3, r3
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	4013      	ands	r3, r2
 80030c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	691a      	ldr	r2, [r3, #16]
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	f003 0307 	and.w	r3, r3, #7
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	fa02 f303 	lsl.w	r3, r2, r3
 80030d6:	69ba      	ldr	r2, [r7, #24]
 80030d8:	4313      	orrs	r3, r2
 80030da:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	08da      	lsrs	r2, r3, #3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	3208      	adds	r2, #8
 80030e4:	69b9      	ldr	r1, [r7, #24]
 80030e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	2203      	movs	r2, #3
 80030f6:	fa02 f303 	lsl.w	r3, r2, r3
 80030fa:	43db      	mvns	r3, r3
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	4013      	ands	r3, r2
 8003100:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f003 0203 	and.w	r2, r3, #3
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	fa02 f303 	lsl.w	r3, r2, r3
 8003112:	69ba      	ldr	r2, [r7, #24]
 8003114:	4313      	orrs	r3, r2
 8003116:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	69ba      	ldr	r2, [r7, #24]
 800311c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	2b01      	cmp	r3, #1
 8003124:	d00b      	beq.n	800313e <HAL_GPIO_Init+0xea>
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	2b02      	cmp	r3, #2
 800312c:	d007      	beq.n	800313e <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003132:	2b11      	cmp	r3, #17
 8003134:	d003      	beq.n	800313e <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	2b12      	cmp	r3, #18
 800313c:	d130      	bne.n	80031a0 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	005b      	lsls	r3, r3, #1
 8003148:	2203      	movs	r2, #3
 800314a:	fa02 f303 	lsl.w	r3, r2, r3
 800314e:	43db      	mvns	r3, r3
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	4013      	ands	r3, r2
 8003154:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	68da      	ldr	r2, [r3, #12]
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	fa02 f303 	lsl.w	r3, r2, r3
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	4313      	orrs	r3, r2
 8003166:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003174:	2201      	movs	r2, #1
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	fa02 f303 	lsl.w	r3, r2, r3
 800317c:	43db      	mvns	r3, r3
 800317e:	69ba      	ldr	r2, [r7, #24]
 8003180:	4013      	ands	r3, r2
 8003182:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	091b      	lsrs	r3, r3, #4
 800318a:	f003 0201 	and.w	r2, r3, #1
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	4313      	orrs	r3, r2
 8003198:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	2203      	movs	r2, #3
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	43db      	mvns	r3, r3
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	4013      	ands	r3, r2
 80031b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	689a      	ldr	r2, [r3, #8]
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	005b      	lsls	r3, r3, #1
 80031c0:	fa02 f303 	lsl.w	r3, r2, r3
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f000 80be 	beq.w	800335a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031de:	4b65      	ldr	r3, [pc, #404]	; (8003374 <HAL_GPIO_Init+0x320>)
 80031e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e2:	4a64      	ldr	r2, [pc, #400]	; (8003374 <HAL_GPIO_Init+0x320>)
 80031e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031e8:	6453      	str	r3, [r2, #68]	; 0x44
 80031ea:	4b62      	ldr	r3, [pc, #392]	; (8003374 <HAL_GPIO_Init+0x320>)
 80031ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031f2:	60fb      	str	r3, [r7, #12]
 80031f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80031f6:	4a60      	ldr	r2, [pc, #384]	; (8003378 <HAL_GPIO_Init+0x324>)
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	089b      	lsrs	r3, r3, #2
 80031fc:	3302      	adds	r3, #2
 80031fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003202:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	f003 0303 	and.w	r3, r3, #3
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	220f      	movs	r2, #15
 800320e:	fa02 f303 	lsl.w	r3, r2, r3
 8003212:	43db      	mvns	r3, r3
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	4013      	ands	r3, r2
 8003218:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a57      	ldr	r2, [pc, #348]	; (800337c <HAL_GPIO_Init+0x328>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d037      	beq.n	8003292 <HAL_GPIO_Init+0x23e>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a56      	ldr	r2, [pc, #344]	; (8003380 <HAL_GPIO_Init+0x32c>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d031      	beq.n	800328e <HAL_GPIO_Init+0x23a>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a55      	ldr	r2, [pc, #340]	; (8003384 <HAL_GPIO_Init+0x330>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d02b      	beq.n	800328a <HAL_GPIO_Init+0x236>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a54      	ldr	r2, [pc, #336]	; (8003388 <HAL_GPIO_Init+0x334>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d025      	beq.n	8003286 <HAL_GPIO_Init+0x232>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a53      	ldr	r2, [pc, #332]	; (800338c <HAL_GPIO_Init+0x338>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d01f      	beq.n	8003282 <HAL_GPIO_Init+0x22e>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a52      	ldr	r2, [pc, #328]	; (8003390 <HAL_GPIO_Init+0x33c>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d019      	beq.n	800327e <HAL_GPIO_Init+0x22a>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a51      	ldr	r2, [pc, #324]	; (8003394 <HAL_GPIO_Init+0x340>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d013      	beq.n	800327a <HAL_GPIO_Init+0x226>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a50      	ldr	r2, [pc, #320]	; (8003398 <HAL_GPIO_Init+0x344>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d00d      	beq.n	8003276 <HAL_GPIO_Init+0x222>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a4f      	ldr	r2, [pc, #316]	; (800339c <HAL_GPIO_Init+0x348>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d007      	beq.n	8003272 <HAL_GPIO_Init+0x21e>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a4e      	ldr	r2, [pc, #312]	; (80033a0 <HAL_GPIO_Init+0x34c>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d101      	bne.n	800326e <HAL_GPIO_Init+0x21a>
 800326a:	2309      	movs	r3, #9
 800326c:	e012      	b.n	8003294 <HAL_GPIO_Init+0x240>
 800326e:	230a      	movs	r3, #10
 8003270:	e010      	b.n	8003294 <HAL_GPIO_Init+0x240>
 8003272:	2308      	movs	r3, #8
 8003274:	e00e      	b.n	8003294 <HAL_GPIO_Init+0x240>
 8003276:	2307      	movs	r3, #7
 8003278:	e00c      	b.n	8003294 <HAL_GPIO_Init+0x240>
 800327a:	2306      	movs	r3, #6
 800327c:	e00a      	b.n	8003294 <HAL_GPIO_Init+0x240>
 800327e:	2305      	movs	r3, #5
 8003280:	e008      	b.n	8003294 <HAL_GPIO_Init+0x240>
 8003282:	2304      	movs	r3, #4
 8003284:	e006      	b.n	8003294 <HAL_GPIO_Init+0x240>
 8003286:	2303      	movs	r3, #3
 8003288:	e004      	b.n	8003294 <HAL_GPIO_Init+0x240>
 800328a:	2302      	movs	r3, #2
 800328c:	e002      	b.n	8003294 <HAL_GPIO_Init+0x240>
 800328e:	2301      	movs	r3, #1
 8003290:	e000      	b.n	8003294 <HAL_GPIO_Init+0x240>
 8003292:	2300      	movs	r3, #0
 8003294:	69fa      	ldr	r2, [r7, #28]
 8003296:	f002 0203 	and.w	r2, r2, #3
 800329a:	0092      	lsls	r2, r2, #2
 800329c:	4093      	lsls	r3, r2
 800329e:	69ba      	ldr	r2, [r7, #24]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80032a4:	4934      	ldr	r1, [pc, #208]	; (8003378 <HAL_GPIO_Init+0x324>)
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	089b      	lsrs	r3, r3, #2
 80032aa:	3302      	adds	r3, #2
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032b2:	4b3c      	ldr	r3, [pc, #240]	; (80033a4 <HAL_GPIO_Init+0x350>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	43db      	mvns	r3, r3
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	4013      	ands	r3, r2
 80032c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d003      	beq.n	80032d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80032ce:	69ba      	ldr	r2, [r7, #24]
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032d6:	4a33      	ldr	r2, [pc, #204]	; (80033a4 <HAL_GPIO_Init+0x350>)
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80032dc:	4b31      	ldr	r3, [pc, #196]	; (80033a4 <HAL_GPIO_Init+0x350>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	43db      	mvns	r3, r3
 80032e6:	69ba      	ldr	r2, [r7, #24]
 80032e8:	4013      	ands	r3, r2
 80032ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d003      	beq.n	8003300 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003300:	4a28      	ldr	r2, [pc, #160]	; (80033a4 <HAL_GPIO_Init+0x350>)
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003306:	4b27      	ldr	r3, [pc, #156]	; (80033a4 <HAL_GPIO_Init+0x350>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	43db      	mvns	r3, r3
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	4013      	ands	r3, r2
 8003314:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d003      	beq.n	800332a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003322:	69ba      	ldr	r2, [r7, #24]
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	4313      	orrs	r3, r2
 8003328:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800332a:	4a1e      	ldr	r2, [pc, #120]	; (80033a4 <HAL_GPIO_Init+0x350>)
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003330:	4b1c      	ldr	r3, [pc, #112]	; (80033a4 <HAL_GPIO_Init+0x350>)
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	43db      	mvns	r3, r3
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	4013      	ands	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d003      	beq.n	8003354 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	4313      	orrs	r3, r2
 8003352:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003354:	4a13      	ldr	r2, [pc, #76]	; (80033a4 <HAL_GPIO_Init+0x350>)
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	3301      	adds	r3, #1
 800335e:	61fb      	str	r3, [r7, #28]
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	2b0f      	cmp	r3, #15
 8003364:	f67f ae86 	bls.w	8003074 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003368:	bf00      	nop
 800336a:	3724      	adds	r7, #36	; 0x24
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr
 8003374:	40023800 	.word	0x40023800
 8003378:	40013800 	.word	0x40013800
 800337c:	40020000 	.word	0x40020000
 8003380:	40020400 	.word	0x40020400
 8003384:	40020800 	.word	0x40020800
 8003388:	40020c00 	.word	0x40020c00
 800338c:	40021000 	.word	0x40021000
 8003390:	40021400 	.word	0x40021400
 8003394:	40021800 	.word	0x40021800
 8003398:	40021c00 	.word	0x40021c00
 800339c:	40022000 	.word	0x40022000
 80033a0:	40022400 	.word	0x40022400
 80033a4:	40013c00 	.word	0x40013c00

080033a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b085      	sub	sp, #20
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	460b      	mov	r3, r1
 80033b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	691a      	ldr	r2, [r3, #16]
 80033b8:	887b      	ldrh	r3, [r7, #2]
 80033ba:	4013      	ands	r3, r2
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d002      	beq.n	80033c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80033c0:	2301      	movs	r3, #1
 80033c2:	73fb      	strb	r3, [r7, #15]
 80033c4:	e001      	b.n	80033ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033c6:	2300      	movs	r3, #0
 80033c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80033ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3714      	adds	r7, #20
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	460b      	mov	r3, r1
 80033e2:	807b      	strh	r3, [r7, #2]
 80033e4:	4613      	mov	r3, r2
 80033e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033e8:	787b      	ldrb	r3, [r7, #1]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d003      	beq.n	80033f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033ee:	887a      	ldrh	r2, [r7, #2]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80033f4:	e003      	b.n	80033fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80033f6:	887b      	ldrh	r3, [r7, #2]
 80033f8:	041a      	lsls	r2, r3, #16
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	619a      	str	r2, [r3, #24]
}
 80033fe:	bf00      	nop
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
	...

0800340c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e07f      	b.n	800351e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b00      	cmp	r3, #0
 8003428:	d106      	bne.n	8003438 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f7fe fa1a 	bl	800186c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2224      	movs	r2, #36	; 0x24
 800343c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f022 0201 	bic.w	r2, r2, #1
 800344e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685a      	ldr	r2, [r3, #4]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800345c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	689a      	ldr	r2, [r3, #8]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800346c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d107      	bne.n	8003486 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	689a      	ldr	r2, [r3, #8]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003482:	609a      	str	r2, [r3, #8]
 8003484:	e006      	b.n	8003494 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	689a      	ldr	r2, [r3, #8]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003492:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	2b02      	cmp	r3, #2
 800349a:	d104      	bne.n	80034a6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034a4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	6859      	ldr	r1, [r3, #4]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	4b1d      	ldr	r3, [pc, #116]	; (8003528 <HAL_I2C_Init+0x11c>)
 80034b2:	430b      	orrs	r3, r1
 80034b4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68da      	ldr	r2, [r3, #12]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	691a      	ldr	r2, [r3, #16]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	ea42 0103 	orr.w	r1, r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	021a      	lsls	r2, r3, #8
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	430a      	orrs	r2, r1
 80034de:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	69d9      	ldr	r1, [r3, #28]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a1a      	ldr	r2, [r3, #32]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	430a      	orrs	r2, r1
 80034ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f042 0201 	orr.w	r2, r2, #1
 80034fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2220      	movs	r2, #32
 800350a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	02008000 	.word	0x02008000

0800352c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b088      	sub	sp, #32
 8003530:	af02      	add	r7, sp, #8
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	607a      	str	r2, [r7, #4]
 8003536:	461a      	mov	r2, r3
 8003538:	460b      	mov	r3, r1
 800353a:	817b      	strh	r3, [r7, #10]
 800353c:	4613      	mov	r3, r2
 800353e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003546:	b2db      	uxtb	r3, r3
 8003548:	2b20      	cmp	r3, #32
 800354a:	f040 80da 	bne.w	8003702 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003554:	2b01      	cmp	r3, #1
 8003556:	d101      	bne.n	800355c <HAL_I2C_Master_Transmit+0x30>
 8003558:	2302      	movs	r3, #2
 800355a:	e0d3      	b.n	8003704 <HAL_I2C_Master_Transmit+0x1d8>
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003564:	f7fe ffa8 	bl	80024b8 <HAL_GetTick>
 8003568:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	9300      	str	r3, [sp, #0]
 800356e:	2319      	movs	r3, #25
 8003570:	2201      	movs	r2, #1
 8003572:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003576:	68f8      	ldr	r0, [r7, #12]
 8003578:	f000 fe76 	bl	8004268 <I2C_WaitOnFlagUntilTimeout>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e0be      	b.n	8003704 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2221      	movs	r2, #33	; 0x21
 800358a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2210      	movs	r2, #16
 8003592:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	893a      	ldrh	r2, [r7, #8]
 80035a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	2bff      	cmp	r3, #255	; 0xff
 80035b6:	d90e      	bls.n	80035d6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	22ff      	movs	r2, #255	; 0xff
 80035bc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035c2:	b2da      	uxtb	r2, r3
 80035c4:	8979      	ldrh	r1, [r7, #10]
 80035c6:	4b51      	ldr	r3, [pc, #324]	; (800370c <HAL_I2C_Master_Transmit+0x1e0>)
 80035c8:	9300      	str	r3, [sp, #0]
 80035ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80035ce:	68f8      	ldr	r0, [r7, #12]
 80035d0:	f000 ffd8 	bl	8004584 <I2C_TransferConfig>
 80035d4:	e06c      	b.n	80036b0 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035da:	b29a      	uxth	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e4:	b2da      	uxtb	r2, r3
 80035e6:	8979      	ldrh	r1, [r7, #10]
 80035e8:	4b48      	ldr	r3, [pc, #288]	; (800370c <HAL_I2C_Master_Transmit+0x1e0>)
 80035ea:	9300      	str	r3, [sp, #0]
 80035ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035f0:	68f8      	ldr	r0, [r7, #12]
 80035f2:	f000 ffc7 	bl	8004584 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80035f6:	e05b      	b.n	80036b0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035f8:	697a      	ldr	r2, [r7, #20]
 80035fa:	6a39      	ldr	r1, [r7, #32]
 80035fc:	68f8      	ldr	r0, [r7, #12]
 80035fe:	f000 fe73 	bl	80042e8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d001      	beq.n	800360c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e07b      	b.n	8003704 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003610:	781a      	ldrb	r2, [r3, #0]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361c:	1c5a      	adds	r2, r3, #1
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003626:	b29b      	uxth	r3, r3
 8003628:	3b01      	subs	r3, #1
 800362a:	b29a      	uxth	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003634:	3b01      	subs	r3, #1
 8003636:	b29a      	uxth	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003640:	b29b      	uxth	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d034      	beq.n	80036b0 <HAL_I2C_Master_Transmit+0x184>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800364a:	2b00      	cmp	r3, #0
 800364c:	d130      	bne.n	80036b0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	9300      	str	r3, [sp, #0]
 8003652:	6a3b      	ldr	r3, [r7, #32]
 8003654:	2200      	movs	r2, #0
 8003656:	2180      	movs	r1, #128	; 0x80
 8003658:	68f8      	ldr	r0, [r7, #12]
 800365a:	f000 fe05 	bl	8004268 <I2C_WaitOnFlagUntilTimeout>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d001      	beq.n	8003668 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e04d      	b.n	8003704 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800366c:	b29b      	uxth	r3, r3
 800366e:	2bff      	cmp	r3, #255	; 0xff
 8003670:	d90e      	bls.n	8003690 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	22ff      	movs	r2, #255	; 0xff
 8003676:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800367c:	b2da      	uxtb	r2, r3
 800367e:	8979      	ldrh	r1, [r7, #10]
 8003680:	2300      	movs	r3, #0
 8003682:	9300      	str	r3, [sp, #0]
 8003684:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003688:	68f8      	ldr	r0, [r7, #12]
 800368a:	f000 ff7b 	bl	8004584 <I2C_TransferConfig>
 800368e:	e00f      	b.n	80036b0 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003694:	b29a      	uxth	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800369e:	b2da      	uxtb	r2, r3
 80036a0:	8979      	ldrh	r1, [r7, #10]
 80036a2:	2300      	movs	r3, #0
 80036a4:	9300      	str	r3, [sp, #0]
 80036a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f000 ff6a 	bl	8004584 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d19e      	bne.n	80035f8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036ba:	697a      	ldr	r2, [r7, #20]
 80036bc:	6a39      	ldr	r1, [r7, #32]
 80036be:	68f8      	ldr	r0, [r7, #12]
 80036c0:	f000 fe52 	bl	8004368 <I2C_WaitOnSTOPFlagUntilTimeout>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e01a      	b.n	8003704 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2220      	movs	r2, #32
 80036d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	6859      	ldr	r1, [r3, #4]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	4b0b      	ldr	r3, [pc, #44]	; (8003710 <HAL_I2C_Master_Transmit+0x1e4>)
 80036e2:	400b      	ands	r3, r1
 80036e4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2220      	movs	r2, #32
 80036ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80036fe:	2300      	movs	r3, #0
 8003700:	e000      	b.n	8003704 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003702:	2302      	movs	r3, #2
  }
}
 8003704:	4618      	mov	r0, r3
 8003706:	3718      	adds	r7, #24
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	80002000 	.word	0x80002000
 8003710:	fe00e800 	.word	0xfe00e800

08003714 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b088      	sub	sp, #32
 8003718:	af02      	add	r7, sp, #8
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	607a      	str	r2, [r7, #4]
 800371e:	461a      	mov	r2, r3
 8003720:	460b      	mov	r3, r1
 8003722:	817b      	strh	r3, [r7, #10]
 8003724:	4613      	mov	r3, r2
 8003726:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800372e:	b2db      	uxtb	r3, r3
 8003730:	2b20      	cmp	r3, #32
 8003732:	f040 80db 	bne.w	80038ec <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800373c:	2b01      	cmp	r3, #1
 800373e:	d101      	bne.n	8003744 <HAL_I2C_Master_Receive+0x30>
 8003740:	2302      	movs	r3, #2
 8003742:	e0d4      	b.n	80038ee <HAL_I2C_Master_Receive+0x1da>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800374c:	f7fe feb4 	bl	80024b8 <HAL_GetTick>
 8003750:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	9300      	str	r3, [sp, #0]
 8003756:	2319      	movs	r3, #25
 8003758:	2201      	movs	r2, #1
 800375a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800375e:	68f8      	ldr	r0, [r7, #12]
 8003760:	f000 fd82 	bl	8004268 <I2C_WaitOnFlagUntilTimeout>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d001      	beq.n	800376e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e0bf      	b.n	80038ee <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2222      	movs	r2, #34	; 0x22
 8003772:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2210      	movs	r2, #16
 800377a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	893a      	ldrh	r2, [r7, #8]
 800378e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800379a:	b29b      	uxth	r3, r3
 800379c:	2bff      	cmp	r3, #255	; 0xff
 800379e:	d90e      	bls.n	80037be <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	22ff      	movs	r2, #255	; 0xff
 80037a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037aa:	b2da      	uxtb	r2, r3
 80037ac:	8979      	ldrh	r1, [r7, #10]
 80037ae:	4b52      	ldr	r3, [pc, #328]	; (80038f8 <HAL_I2C_Master_Receive+0x1e4>)
 80037b0:	9300      	str	r3, [sp, #0]
 80037b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037b6:	68f8      	ldr	r0, [r7, #12]
 80037b8:	f000 fee4 	bl	8004584 <I2C_TransferConfig>
 80037bc:	e06d      	b.n	800389a <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c2:	b29a      	uxth	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037cc:	b2da      	uxtb	r2, r3
 80037ce:	8979      	ldrh	r1, [r7, #10]
 80037d0:	4b49      	ldr	r3, [pc, #292]	; (80038f8 <HAL_I2C_Master_Receive+0x1e4>)
 80037d2:	9300      	str	r3, [sp, #0]
 80037d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037d8:	68f8      	ldr	r0, [r7, #12]
 80037da:	f000 fed3 	bl	8004584 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80037de:	e05c      	b.n	800389a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037e0:	697a      	ldr	r2, [r7, #20]
 80037e2:	6a39      	ldr	r1, [r7, #32]
 80037e4:	68f8      	ldr	r0, [r7, #12]
 80037e6:	f000 fdfb 	bl	80043e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d001      	beq.n	80037f4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e07c      	b.n	80038ee <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fe:	b2d2      	uxtb	r2, r2
 8003800:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003806:	1c5a      	adds	r2, r3, #1
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003810:	3b01      	subs	r3, #1
 8003812:	b29a      	uxth	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800381c:	b29b      	uxth	r3, r3
 800381e:	3b01      	subs	r3, #1
 8003820:	b29a      	uxth	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800382a:	b29b      	uxth	r3, r3
 800382c:	2b00      	cmp	r3, #0
 800382e:	d034      	beq.n	800389a <HAL_I2C_Master_Receive+0x186>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003834:	2b00      	cmp	r3, #0
 8003836:	d130      	bne.n	800389a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	9300      	str	r3, [sp, #0]
 800383c:	6a3b      	ldr	r3, [r7, #32]
 800383e:	2200      	movs	r2, #0
 8003840:	2180      	movs	r1, #128	; 0x80
 8003842:	68f8      	ldr	r0, [r7, #12]
 8003844:	f000 fd10 	bl	8004268 <I2C_WaitOnFlagUntilTimeout>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d001      	beq.n	8003852 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e04d      	b.n	80038ee <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003856:	b29b      	uxth	r3, r3
 8003858:	2bff      	cmp	r3, #255	; 0xff
 800385a:	d90e      	bls.n	800387a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	22ff      	movs	r2, #255	; 0xff
 8003860:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003866:	b2da      	uxtb	r2, r3
 8003868:	8979      	ldrh	r1, [r7, #10]
 800386a:	2300      	movs	r3, #0
 800386c:	9300      	str	r3, [sp, #0]
 800386e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003872:	68f8      	ldr	r0, [r7, #12]
 8003874:	f000 fe86 	bl	8004584 <I2C_TransferConfig>
 8003878:	e00f      	b.n	800389a <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800387e:	b29a      	uxth	r2, r3
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003888:	b2da      	uxtb	r2, r3
 800388a:	8979      	ldrh	r1, [r7, #10]
 800388c:	2300      	movs	r3, #0
 800388e:	9300      	str	r3, [sp, #0]
 8003890:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003894:	68f8      	ldr	r0, [r7, #12]
 8003896:	f000 fe75 	bl	8004584 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800389e:	b29b      	uxth	r3, r3
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d19d      	bne.n	80037e0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038a4:	697a      	ldr	r2, [r7, #20]
 80038a6:	6a39      	ldr	r1, [r7, #32]
 80038a8:	68f8      	ldr	r0, [r7, #12]
 80038aa:	f000 fd5d 	bl	8004368 <I2C_WaitOnSTOPFlagUntilTimeout>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d001      	beq.n	80038b8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e01a      	b.n	80038ee <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2220      	movs	r2, #32
 80038be:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	6859      	ldr	r1, [r3, #4]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	4b0c      	ldr	r3, [pc, #48]	; (80038fc <HAL_I2C_Master_Receive+0x1e8>)
 80038cc:	400b      	ands	r3, r1
 80038ce:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2220      	movs	r2, #32
 80038d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038e8:	2300      	movs	r3, #0
 80038ea:	e000      	b.n	80038ee <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80038ec:	2302      	movs	r3, #2
  }
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3718      	adds	r7, #24
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	80002400 	.word	0x80002400
 80038fc:	fe00e800 	.word	0xfe00e800

08003900 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800391c:	2b00      	cmp	r3, #0
 800391e:	d005      	beq.n	800392c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003924:	68ba      	ldr	r2, [r7, #8]
 8003926:	68f9      	ldr	r1, [r7, #12]
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	4798      	blx	r3
  }
}
 800392c:	bf00      	nop
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b086      	sub	sp, #24
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	0a1b      	lsrs	r3, r3, #8
 8003950:	f003 0301 	and.w	r3, r3, #1
 8003954:	2b00      	cmp	r3, #0
 8003956:	d010      	beq.n	800397a <HAL_I2C_ER_IRQHandler+0x46>
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	09db      	lsrs	r3, r3, #7
 800395c:	f003 0301 	and.w	r3, r3, #1
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00a      	beq.n	800397a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003968:	f043 0201 	orr.w	r2, r3, #1
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003978:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	0a9b      	lsrs	r3, r3, #10
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	2b00      	cmp	r3, #0
 8003984:	d010      	beq.n	80039a8 <HAL_I2C_ER_IRQHandler+0x74>
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	09db      	lsrs	r3, r3, #7
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00a      	beq.n	80039a8 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003996:	f043 0208 	orr.w	r2, r3, #8
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039a6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	0a5b      	lsrs	r3, r3, #9
 80039ac:	f003 0301 	and.w	r3, r3, #1
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d010      	beq.n	80039d6 <HAL_I2C_ER_IRQHandler+0xa2>
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	09db      	lsrs	r3, r3, #7
 80039b8:	f003 0301 	and.w	r3, r3, #1
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d00a      	beq.n	80039d6 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c4:	f043 0202 	orr.w	r2, r3, #2
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039d4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039da:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f003 030b 	and.w	r3, r3, #11
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d003      	beq.n	80039ee <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80039e6:	68f9      	ldr	r1, [r7, #12]
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 fb35 	bl	8004058 <I2C_ITError>
  }
}
 80039ee:	bf00      	nop
 80039f0:	3718      	adds	r7, #24
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039f6:	b480      	push	{r7}
 80039f8:	b083      	sub	sp, #12
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80039fe:	bf00      	nop
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr

08003a0a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b083      	sub	sp, #12
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003a12:	bf00      	nop
 8003a14:	370c      	adds	r7, #12
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr

08003a1e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	b083      	sub	sp, #12
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
 8003a26:	460b      	mov	r3, r1
 8003a28:	70fb      	strb	r3, [r7, #3]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003a2e:	bf00      	nop
 8003a30:	370c      	adds	r7, #12
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr

08003a3a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a3a:	b480      	push	{r7}
 8003a3c:	b083      	sub	sp, #12
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003a42:	bf00      	nop
 8003a44:	370c      	adds	r7, #12
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr

08003a4e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003a4e:	b480      	push	{r7}
 8003a50:	b083      	sub	sp, #12
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003a56:	bf00      	nop
 8003a58:	370c      	adds	r7, #12
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr

08003a62 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a62:	b480      	push	{r7}
 8003a64:	b083      	sub	sp, #12
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003a6a:	bf00      	nop
 8003a6c:	370c      	adds	r7, #12
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr

08003a76 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b086      	sub	sp, #24
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	60f8      	str	r0, [r7, #12]
 8003a7e:	60b9      	str	r1, [r7, #8]
 8003a80:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a86:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d101      	bne.n	8003a9a <I2C_Slave_ISR_IT+0x24>
 8003a96:	2302      	movs	r3, #2
 8003a98:	e0f0      	b.n	8003c7c <I2C_Slave_ISR_IT+0x206>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	091b      	lsrs	r3, r3, #4
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d04d      	beq.n	8003b4a <I2C_Slave_ISR_IT+0xd4>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	091b      	lsrs	r3, r3, #4
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d047      	beq.n	8003b4a <I2C_Slave_ISR_IT+0xd4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d128      	bne.n	8003b16 <I2C_Slave_ISR_IT+0xa0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	2b28      	cmp	r3, #40	; 0x28
 8003ace:	d108      	bne.n	8003ae2 <I2C_Slave_ISR_IT+0x6c>
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ad6:	d104      	bne.n	8003ae2 <I2C_Slave_ISR_IT+0x6c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003ad8:	6979      	ldr	r1, [r7, #20]
 8003ada:	68f8      	ldr	r0, [r7, #12]
 8003adc:	f000 fa68 	bl	8003fb0 <I2C_ITListenCplt>
 8003ae0:	e032      	b.n	8003b48 <I2C_Slave_ISR_IT+0xd2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	2b29      	cmp	r3, #41	; 0x29
 8003aec:	d10e      	bne.n	8003b0c <I2C_Slave_ISR_IT+0x96>
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003af4:	d00a      	beq.n	8003b0c <I2C_Slave_ISR_IT+0x96>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2210      	movs	r2, #16
 8003afc:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003afe:	68f8      	ldr	r0, [r7, #12]
 8003b00:	f000 fb6a 	bl	80041d8 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003b04:	68f8      	ldr	r0, [r7, #12]
 8003b06:	f000 f93f 	bl	8003d88 <I2C_ITSlaveSeqCplt>
 8003b0a:	e01d      	b.n	8003b48 <I2C_Slave_ISR_IT+0xd2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2210      	movs	r2, #16
 8003b12:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003b14:	e09a      	b.n	8003c4c <I2C_Slave_ISR_IT+0x1d6>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2210      	movs	r2, #16
 8003b1c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b22:	f043 0204 	orr.w	r2, r3, #4
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d004      	beq.n	8003b3a <I2C_Slave_ISR_IT+0xc4>
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b36:	f040 8089 	bne.w	8003c4c <I2C_Slave_ISR_IT+0x1d6>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3e:	4619      	mov	r1, r3
 8003b40:	68f8      	ldr	r0, [r7, #12]
 8003b42:	f000 fa89 	bl	8004058 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003b46:	e081      	b.n	8003c4c <I2C_Slave_ISR_IT+0x1d6>
 8003b48:	e080      	b.n	8003c4c <I2C_Slave_ISR_IT+0x1d6>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	089b      	lsrs	r3, r3, #2
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d034      	beq.n	8003bc0 <I2C_Slave_ISR_IT+0x14a>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	089b      	lsrs	r3, r3, #2
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d02e      	beq.n	8003bc0 <I2C_Slave_ISR_IT+0x14a>
  {
    if (hi2c->XferCount > 0U)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d01c      	beq.n	8003ba6 <I2C_Slave_ISR_IT+0x130>
    {
      /* Remove RXNE flag on temporary variable as read done */
      tmpITFlags &= ~I2C_FLAG_RXNE;
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	f023 0304 	bic.w	r3, r3, #4
 8003b72:	617b      	str	r3, [r7, #20]

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7e:	b2d2      	uxtb	r2, r2
 8003b80:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b86:	1c5a      	adds	r2, r3, #1
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b90:	3b01      	subs	r3, #1
 8003b92:	b29a      	uxth	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	b29a      	uxth	r2, r3
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d14f      	bne.n	8003c50 <I2C_Slave_ISR_IT+0x1da>
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003bb6:	d04b      	beq.n	8003c50 <I2C_Slave_ISR_IT+0x1da>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003bb8:	68f8      	ldr	r0, [r7, #12]
 8003bba:	f000 f8e5 	bl	8003d88 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003bbe:	e047      	b.n	8003c50 <I2C_Slave_ISR_IT+0x1da>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	08db      	lsrs	r3, r3, #3
 8003bc4:	f003 0301 	and.w	r3, r3, #1
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d00a      	beq.n	8003be2 <I2C_Slave_ISR_IT+0x16c>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	08db      	lsrs	r3, r3, #3
 8003bd0:	f003 0301 	and.w	r3, r3, #1
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d004      	beq.n	8003be2 <I2C_Slave_ISR_IT+0x16c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003bd8:	6979      	ldr	r1, [r7, #20]
 8003bda:	68f8      	ldr	r0, [r7, #12]
 8003bdc:	f000 f852 	bl	8003c84 <I2C_ITAddrCplt>
 8003be0:	e037      	b.n	8003c52 <I2C_Slave_ISR_IT+0x1dc>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	085b      	lsrs	r3, r3, #1
 8003be6:	f003 0301 	and.w	r3, r3, #1
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d031      	beq.n	8003c52 <I2C_Slave_ISR_IT+0x1dc>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	085b      	lsrs	r3, r3, #1
 8003bf2:	f003 0301 	and.w	r3, r3, #1
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d02b      	beq.n	8003c52 <I2C_Slave_ISR_IT+0x1dc>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d018      	beq.n	8003c36 <I2C_Slave_ISR_IT+0x1c0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c08:	781a      	ldrb	r2, [r3, #0]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c14:	1c5a      	adds	r2, r3, #1
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	3b01      	subs	r3, #1
 8003c22:	b29a      	uxth	r2, r3
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	b29a      	uxth	r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	851a      	strh	r2, [r3, #40]	; 0x28
 8003c34:	e00d      	b.n	8003c52 <I2C_Slave_ISR_IT+0x1dc>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c3c:	d002      	beq.n	8003c44 <I2C_Slave_ISR_IT+0x1ce>
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d106      	bne.n	8003c52 <I2C_Slave_ISR_IT+0x1dc>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003c44:	68f8      	ldr	r0, [r7, #12]
 8003c46:	f000 f89f 	bl	8003d88 <I2C_ITSlaveSeqCplt>
 8003c4a:	e002      	b.n	8003c52 <I2C_Slave_ISR_IT+0x1dc>
    if (hi2c->XferCount == 0U)
 8003c4c:	bf00      	nop
 8003c4e:	e000      	b.n	8003c52 <I2C_Slave_ISR_IT+0x1dc>
    if ((hi2c->XferCount == 0U) && \
 8003c50:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	095b      	lsrs	r3, r3, #5
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d009      	beq.n	8003c72 <I2C_Slave_ISR_IT+0x1fc>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	095b      	lsrs	r3, r3, #5
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d003      	beq.n	8003c72 <I2C_Slave_ISR_IT+0x1fc>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003c6a:	6979      	ldr	r1, [r7, #20]
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	f000 f8c9 	bl	8003e04 <I2C_ITSlaveCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3718      	adds	r7, #24
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003c9a:	2b28      	cmp	r3, #40	; 0x28
 8003c9c:	d168      	bne.n	8003d70 <I2C_ITAddrCplt+0xec>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	699b      	ldr	r3, [r3, #24]
 8003ca4:	0c1b      	lsrs	r3, r3, #16
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	f003 0301 	and.w	r3, r3, #1
 8003cac:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	0c1b      	lsrs	r3, r3, #16
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003cbc:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cca:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003cd8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d137      	bne.n	8003d52 <I2C_ITAddrCplt+0xce>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8003ce2:	897b      	ldrh	r3, [r7, #10]
 8003ce4:	09db      	lsrs	r3, r3, #7
 8003ce6:	b29a      	uxth	r2, r3
 8003ce8:	89bb      	ldrh	r3, [r7, #12]
 8003cea:	4053      	eors	r3, r2
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	f003 0306 	and.w	r3, r3, #6
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d11c      	bne.n	8003d30 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003cf6:	897b      	ldrh	r3, [r7, #10]
 8003cf8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cfe:	1c5a      	adds	r2, r3, #1
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d139      	bne.n	8003d80 <I2C_ITAddrCplt+0xfc>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2208      	movs	r2, #8
 8003d18:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003d22:	89ba      	ldrh	r2, [r7, #12]
 8003d24:	7bfb      	ldrb	r3, [r7, #15]
 8003d26:	4619      	mov	r1, r3
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f7ff fe78 	bl	8003a1e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003d2e:	e027      	b.n	8003d80 <I2C_ITAddrCplt+0xfc>
        slaveaddrcode = ownadd2code;
 8003d30:	893b      	ldrh	r3, [r7, #8]
 8003d32:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003d34:	2104      	movs	r1, #4
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 fc52 	bl	80045e0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003d44:	89ba      	ldrh	r2, [r7, #12]
 8003d46:	7bfb      	ldrb	r3, [r7, #15]
 8003d48:	4619      	mov	r1, r3
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f7ff fe67 	bl	8003a1e <HAL_I2C_AddrCallback>
}
 8003d50:	e016      	b.n	8003d80 <I2C_ITAddrCplt+0xfc>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003d52:	2104      	movs	r1, #4
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 fc43 	bl	80045e0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003d62:	89ba      	ldrh	r2, [r7, #12]
 8003d64:	7bfb      	ldrb	r3, [r7, #15]
 8003d66:	4619      	mov	r1, r3
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f7ff fe58 	bl	8003a1e <HAL_I2C_AddrCallback>
}
 8003d6e:	e007      	b.n	8003d80 <I2C_ITAddrCplt+0xfc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2208      	movs	r2, #8
 8003d76:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003d80:	bf00      	nop
 8003d82:	3710      	adds	r7, #16
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	2b29      	cmp	r3, #41	; 0x29
 8003da2:	d112      	bne.n	8003dca <I2C_ITSlaveSeqCplt+0x42>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2228      	movs	r2, #40	; 0x28
 8003da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2221      	movs	r2, #33	; 0x21
 8003db0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003db2:	2101      	movs	r1, #1
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f000 fc13 	bl	80045e0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f7ff fe17 	bl	80039f6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003dc8:	e017      	b.n	8003dfa <I2C_ITSlaveSeqCplt+0x72>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b2a      	cmp	r3, #42	; 0x2a
 8003dd4:	d111      	bne.n	8003dfa <I2C_ITSlaveSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2228      	movs	r2, #40	; 0x28
 8003dda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2222      	movs	r2, #34	; 0x22
 8003de2:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003de4:	2102      	movs	r1, #2
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 fbfa 	bl	80045e0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f7ff fe08 	bl	8003a0a <HAL_I2C_SlaveRxCpltCallback>
}
 8003dfa:	bf00      	nop
 8003dfc:	3708      	adds	r7, #8
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
	...

08003e04 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	60bb      	str	r3, [r7, #8]
  uint32_t tmpITFlags = ITFlags;
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	60fb      	str	r3, [r7, #12]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2220      	movs	r2, #32
 8003e20:	61da      	str	r2, [r3, #28]

  /* Disable all interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003e22:	2107      	movs	r1, #7
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f000 fbdb 	bl	80045e0 <I2C_Disable_IRQ>

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	685a      	ldr	r2, [r3, #4]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e38:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	6859      	ldr	r1, [r3, #4]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	4b58      	ldr	r3, [pc, #352]	; (8003fa8 <I2C_ITSlaveCplt+0x1a4>)
 8003e46:	400b      	ands	r3, r1
 8003e48:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 f9c4 	bl	80041d8 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	0b9b      	lsrs	r3, r3, #14
 8003e54:	f003 0301 	and.w	r3, r3, #1
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00b      	beq.n	8003e74 <I2C_ITSlaveCplt+0x70>
  {
    if (hi2c->hdmatx != NULL)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d018      	beq.n	8003e96 <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	b29a      	uxth	r2, r3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e72:	e010      	b.n	8003e96 <I2C_ITSlaveCplt+0x92>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	0bdb      	lsrs	r3, r3, #15
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00a      	beq.n	8003e96 <I2C_ITSlaveCplt+0x92>
  {
    if (hi2c->hdmarx != NULL)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d006      	beq.n	8003e96 <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	b29a      	uxth	r2, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	089b      	lsrs	r3, r3, #2
 8003e9a:	f003 0301 	and.w	r3, r3, #1
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d020      	beq.n	8003ee4 <I2C_ITSlaveCplt+0xe0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	f023 0304 	bic.w	r3, r3, #4
 8003ea8:	60fb      	str	r3, [r7, #12]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb4:	b2d2      	uxtb	r2, r2
 8003eb6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebc:	1c5a      	adds	r2, r3, #1
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00c      	beq.n	8003ee4 <I2C_ITSlaveCplt+0xe0>
    {
      hi2c->XferSize--;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	b29a      	uxth	r2, r3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	3b01      	subs	r3, #1
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d005      	beq.n	8003efa <I2C_ITSlaveCplt+0xf6>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef2:	f043 0204 	orr.w	r2, r3, #4
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->PreviousState = I2C_STATE_NONE;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d010      	beq.n	8003f38 <I2C_ITSlaveCplt+0x134>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f000 f89b 	bl	8004058 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b28      	cmp	r3, #40	; 0x28
 8003f2c:	d138      	bne.n	8003fa0 <I2C_ITSlaveCplt+0x19c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003f2e:	68f9      	ldr	r1, [r7, #12]
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f000 f83d 	bl	8003fb0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003f36:	e033      	b.n	8003fa0 <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f3c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f40:	d011      	beq.n	8003f66 <I2C_ITSlaveCplt+0x162>
    I2C_ITSlaveSeqCplt(hi2c);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f7ff ff20 	bl	8003d88 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a18      	ldr	r2, [pc, #96]	; (8003fac <I2C_ITSlaveCplt+0x1a8>)
 8003f4c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2220      	movs	r2, #32
 8003f52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f7ff fd6b 	bl	8003a3a <HAL_I2C_ListenCpltCallback>
}
 8003f64:	e01c      	b.n	8003fa0 <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b22      	cmp	r3, #34	; 0x22
 8003f70:	d10b      	bne.n	8003f8a <I2C_ITSlaveCplt+0x186>
    hi2c->State = HAL_I2C_STATE_READY;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2220      	movs	r2, #32
 8003f76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f7ff fd41 	bl	8003a0a <HAL_I2C_SlaveRxCpltCallback>
}
 8003f88:	e00a      	b.n	8003fa0 <I2C_ITSlaveCplt+0x19c>
    hi2c->State = HAL_I2C_STATE_READY;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2220      	movs	r2, #32
 8003f8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f7ff fd2b 	bl	80039f6 <HAL_I2C_SlaveTxCpltCallback>
}
 8003fa0:	bf00      	nop
 8003fa2:	3710      	adds	r7, #16
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	fe00e800 	.word	0xfe00e800
 8003fac:	ffff0000 	.word	0xffff0000

08003fb0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a25      	ldr	r2, [pc, #148]	; (8004054 <I2C_ITListenCplt+0xa4>)
 8003fbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2220      	movs	r2, #32
 8003fca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	089b      	lsrs	r3, r3, #2
 8003fe0:	f003 0301 	and.w	r3, r3, #1
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d022      	beq.n	800402e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff2:	b2d2      	uxtb	r2, r2
 8003ff4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffa:	1c5a      	adds	r2, r3, #1
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004004:	2b00      	cmp	r3, #0
 8004006:	d012      	beq.n	800402e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800400c:	3b01      	subs	r3, #1
 800400e:	b29a      	uxth	r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004018:	b29b      	uxth	r3, r3
 800401a:	3b01      	subs	r3, #1
 800401c:	b29a      	uxth	r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004026:	f043 0204 	orr.w	r2, r3, #4
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800402e:	2107      	movs	r1, #7
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f000 fad5 	bl	80045e0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2210      	movs	r2, #16
 800403c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f7ff fcf7 	bl	8003a3a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800404c:	bf00      	nop
 800404e:	3708      	adds	r7, #8
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}
 8004054:	ffff0000 	.word	0xffff0000

08004058 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004068:	73fb      	strb	r3, [r7, #15]

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a55      	ldr	r2, [pc, #340]	; (80041cc <I2C_ITError+0x174>)
 8004076:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	431a      	orrs	r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800408a:	7bfb      	ldrb	r3, [r7, #15]
 800408c:	2b28      	cmp	r3, #40	; 0x28
 800408e:	d005      	beq.n	800409c <I2C_ITError+0x44>
 8004090:	7bfb      	ldrb	r3, [r7, #15]
 8004092:	2b29      	cmp	r3, #41	; 0x29
 8004094:	d002      	beq.n	800409c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004096:	7bfb      	ldrb	r3, [r7, #15]
 8004098:	2b2a      	cmp	r3, #42	; 0x2a
 800409a:	d10e      	bne.n	80040ba <I2C_ITError+0x62>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800409c:	2103      	movs	r1, #3
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 fa9e 	bl	80045e0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2228      	movs	r2, #40	; 0x28
 80040a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a46      	ldr	r2, [pc, #280]	; (80041d0 <I2C_ITError+0x178>)
 80040b6:	635a      	str	r2, [r3, #52]	; 0x34
 80040b8:	e013      	b.n	80040e2 <I2C_ITError+0x8a>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80040ba:	2107      	movs	r1, #7
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f000 fa8f 	bl	80045e0 <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	2b60      	cmp	r3, #96	; 0x60
 80040cc:	d003      	beq.n	80040d6 <I2C_ITError+0x7e>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2220      	movs	r2, #32
 80040d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040f0:	d123      	bne.n	800413a <I2C_ITError+0xe2>
  {
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004100:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004106:	2b00      	cmp	r3, #0
 8004108:	d05c      	beq.n	80041c4 <I2C_ITError+0x16c>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800410e:	4a31      	ldr	r2, [pc, #196]	; (80041d4 <I2C_ITError+0x17c>)
 8004110:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800411e:	4618      	mov	r0, r3
 8004120:	f7fe fb09 	bl	8002736 <HAL_DMA_Abort_IT>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d04c      	beq.n	80041c4 <I2C_ITError+0x16c>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004134:	4610      	mov	r0, r2
 8004136:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004138:	e044      	b.n	80041c4 <I2C_ITError+0x16c>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004144:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004148:	d123      	bne.n	8004192 <I2C_ITError+0x13a>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004158:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800415e:	2b00      	cmp	r3, #0
 8004160:	d030      	beq.n	80041c4 <I2C_ITError+0x16c>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004166:	4a1b      	ldr	r2, [pc, #108]	; (80041d4 <I2C_ITError+0x17c>)
 8004168:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004176:	4618      	mov	r0, r3
 8004178:	f7fe fadd 	bl	8002736 <HAL_DMA_Abort_IT>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d020      	beq.n	80041c4 <I2C_ITError+0x16c>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004186:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800418c:	4610      	mov	r0, r2
 800418e:	4798      	blx	r3
}
 8004190:	e018      	b.n	80041c4 <I2C_ITError+0x16c>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b60      	cmp	r3, #96	; 0x60
 800419c:	d10b      	bne.n	80041b6 <I2C_ITError+0x15e>
    hi2c->State = HAL_I2C_STATE_READY;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2220      	movs	r2, #32
 80041a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f7ff fc57 	bl	8003a62 <HAL_I2C_AbortCpltCallback>
}
 80041b4:	e006      	b.n	80041c4 <I2C_ITError+0x16c>
    __HAL_UNLOCK(hi2c);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f7ff fc45 	bl	8003a4e <HAL_I2C_ErrorCallback>
}
 80041c4:	bf00      	nop
 80041c6:	3710      	adds	r7, #16
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	ffff0000 	.word	0xffff0000
 80041d0:	08003a77 	.word	0x08003a77
 80041d4:	08004221 	.word	0x08004221

080041d8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	f003 0302 	and.w	r3, r3, #2
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d103      	bne.n	80041f6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2200      	movs	r2, #0
 80041f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	f003 0301 	and.w	r3, r3, #1
 8004200:	2b01      	cmp	r3, #1
 8004202:	d007      	beq.n	8004214 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	699a      	ldr	r2, [r3, #24]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f042 0201 	orr.w	r2, r2, #1
 8004212:	619a      	str	r2, [r3, #24]
  }
}
 8004214:	bf00      	nop
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800422c:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004232:	2200      	movs	r2, #0
 8004234:	651a      	str	r2, [r3, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800423a:	2200      	movs	r2, #0
 800423c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004244:	b2db      	uxtb	r3, r3
 8004246:	2b60      	cmp	r3, #96	; 0x60
 8004248:	d107      	bne.n	800425a <I2C_DMAAbort+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2220      	movs	r2, #32
 800424e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004252:	68f8      	ldr	r0, [r7, #12]
 8004254:	f7ff fc05 	bl	8003a62 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004258:	e002      	b.n	8004260 <I2C_DMAAbort+0x40>
    HAL_I2C_ErrorCallback(hi2c);
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	f7ff fbf7 	bl	8003a4e <HAL_I2C_ErrorCallback>
}
 8004260:	bf00      	nop
 8004262:	3710      	adds	r7, #16
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	603b      	str	r3, [r7, #0]
 8004274:	4613      	mov	r3, r2
 8004276:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004278:	e022      	b.n	80042c0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004280:	d01e      	beq.n	80042c0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004282:	f7fe f919 	bl	80024b8 <HAL_GetTick>
 8004286:	4602      	mov	r2, r0
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	683a      	ldr	r2, [r7, #0]
 800428e:	429a      	cmp	r2, r3
 8004290:	d302      	bcc.n	8004298 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d113      	bne.n	80042c0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800429c:	f043 0220 	orr.w	r2, r3, #32
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2220      	movs	r2, #32
 80042a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e00f      	b.n	80042e0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	699a      	ldr	r2, [r3, #24]
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	4013      	ands	r3, r2
 80042ca:	68ba      	ldr	r2, [r7, #8]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	bf0c      	ite	eq
 80042d0:	2301      	moveq	r3, #1
 80042d2:	2300      	movne	r3, #0
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	461a      	mov	r2, r3
 80042d8:	79fb      	ldrb	r3, [r7, #7]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d0cd      	beq.n	800427a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3710      	adds	r7, #16
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80042f4:	e02c      	b.n	8004350 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	68b9      	ldr	r1, [r7, #8]
 80042fa:	68f8      	ldr	r0, [r7, #12]
 80042fc:	f000 f8dc 	bl	80044b8 <I2C_IsAcknowledgeFailed>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d001      	beq.n	800430a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e02a      	b.n	8004360 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004310:	d01e      	beq.n	8004350 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004312:	f7fe f8d1 	bl	80024b8 <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	68ba      	ldr	r2, [r7, #8]
 800431e:	429a      	cmp	r2, r3
 8004320:	d302      	bcc.n	8004328 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d113      	bne.n	8004350 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800432c:	f043 0220 	orr.w	r2, r3, #32
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2220      	movs	r2, #32
 8004338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e007      	b.n	8004360 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	f003 0302 	and.w	r3, r3, #2
 800435a:	2b02      	cmp	r3, #2
 800435c:	d1cb      	bne.n	80042f6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800435e:	2300      	movs	r3, #0
}
 8004360:	4618      	mov	r0, r3
 8004362:	3710      	adds	r7, #16
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004374:	e028      	b.n	80043c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	68b9      	ldr	r1, [r7, #8]
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	f000 f89c 	bl	80044b8 <I2C_IsAcknowledgeFailed>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d001      	beq.n	800438a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e026      	b.n	80043d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800438a:	f7fe f895 	bl	80024b8 <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	68ba      	ldr	r2, [r7, #8]
 8004396:	429a      	cmp	r2, r3
 8004398:	d302      	bcc.n	80043a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d113      	bne.n	80043c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a4:	f043 0220 	orr.w	r2, r3, #32
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2220      	movs	r2, #32
 80043b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e007      	b.n	80043d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	f003 0320 	and.w	r3, r3, #32
 80043d2:	2b20      	cmp	r3, #32
 80043d4:	d1cf      	bne.n	8004376 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80043d6:	2300      	movs	r3, #0
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3710      	adds	r7, #16
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80043ec:	e055      	b.n	800449a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	68b9      	ldr	r1, [r7, #8]
 80043f2:	68f8      	ldr	r0, [r7, #12]
 80043f4:	f000 f860 	bl	80044b8 <I2C_IsAcknowledgeFailed>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d001      	beq.n	8004402 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e053      	b.n	80044aa <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	f003 0320 	and.w	r3, r3, #32
 800440c:	2b20      	cmp	r3, #32
 800440e:	d129      	bne.n	8004464 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	699b      	ldr	r3, [r3, #24]
 8004416:	f003 0304 	and.w	r3, r3, #4
 800441a:	2b04      	cmp	r3, #4
 800441c:	d105      	bne.n	800442a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004422:	2b00      	cmp	r3, #0
 8004424:	d001      	beq.n	800442a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004426:	2300      	movs	r3, #0
 8004428:	e03f      	b.n	80044aa <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2220      	movs	r2, #32
 8004430:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	6859      	ldr	r1, [r3, #4]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	4b1d      	ldr	r3, [pc, #116]	; (80044b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800443e:	400b      	ands	r3, r1
 8004440:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2200      	movs	r2, #0
 8004446:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2220      	movs	r2, #32
 800444c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2200      	movs	r2, #0
 800445c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e022      	b.n	80044aa <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004464:	f7fe f828 	bl	80024b8 <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	68ba      	ldr	r2, [r7, #8]
 8004470:	429a      	cmp	r2, r3
 8004472:	d302      	bcc.n	800447a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d10f      	bne.n	800449a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800447e:	f043 0220 	orr.w	r2, r3, #32
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2220      	movs	r2, #32
 800448a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e007      	b.n	80044aa <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	699b      	ldr	r3, [r3, #24]
 80044a0:	f003 0304 	and.w	r3, r3, #4
 80044a4:	2b04      	cmp	r3, #4
 80044a6:	d1a2      	bne.n	80043ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3710      	adds	r7, #16
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	fe00e800 	.word	0xfe00e800

080044b8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	f003 0310 	and.w	r3, r3, #16
 80044ce:	2b10      	cmp	r3, #16
 80044d0:	d151      	bne.n	8004576 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044d2:	e022      	b.n	800451a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044da:	d01e      	beq.n	800451a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044dc:	f7fd ffec 	bl	80024b8 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	68ba      	ldr	r2, [r7, #8]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d302      	bcc.n	80044f2 <I2C_IsAcknowledgeFailed+0x3a>
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d113      	bne.n	800451a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f6:	f043 0220 	orr.w	r2, r3, #32
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2220      	movs	r2, #32
 8004502:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e02e      	b.n	8004578 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	699b      	ldr	r3, [r3, #24]
 8004520:	f003 0320 	and.w	r3, r3, #32
 8004524:	2b20      	cmp	r3, #32
 8004526:	d1d5      	bne.n	80044d4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2210      	movs	r2, #16
 800452e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2220      	movs	r2, #32
 8004536:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004538:	68f8      	ldr	r0, [r7, #12]
 800453a:	f7ff fe4d 	bl	80041d8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	6859      	ldr	r1, [r3, #4]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	4b0d      	ldr	r3, [pc, #52]	; (8004580 <I2C_IsAcknowledgeFailed+0xc8>)
 800454a:	400b      	ands	r3, r1
 800454c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004552:	f043 0204 	orr.w	r2, r3, #4
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2220      	movs	r2, #32
 800455e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e000      	b.n	8004578 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3710      	adds	r7, #16
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}
 8004580:	fe00e800 	.word	0xfe00e800

08004584 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8004584:	b480      	push	{r7}
 8004586:	b085      	sub	sp, #20
 8004588:	af00      	add	r7, sp, #0
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	607b      	str	r3, [r7, #4]
 800458e:	460b      	mov	r3, r1
 8004590:	817b      	strh	r3, [r7, #10]
 8004592:	4613      	mov	r3, r2
 8004594:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	685a      	ldr	r2, [r3, #4]
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	0d5b      	lsrs	r3, r3, #21
 80045a0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80045a4:	4b0d      	ldr	r3, [pc, #52]	; (80045dc <I2C_TransferConfig+0x58>)
 80045a6:	430b      	orrs	r3, r1
 80045a8:	43db      	mvns	r3, r3
 80045aa:	ea02 0103 	and.w	r1, r2, r3
 80045ae:	897b      	ldrh	r3, [r7, #10]
 80045b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80045b4:	7a7b      	ldrb	r3, [r7, #9]
 80045b6:	041b      	lsls	r3, r3, #16
 80045b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80045bc:	431a      	orrs	r2, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	431a      	orrs	r2, r3
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	431a      	orrs	r2, r3
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	430a      	orrs	r2, r1
 80045cc:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80045ce:	bf00      	nop
 80045d0:	3714      	adds	r7, #20
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	03ff63ff 	.word	0x03ff63ff

080045e0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b085      	sub	sp, #20
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	460b      	mov	r3, r1
 80045ea:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80045ec:	2300      	movs	r3, #0
 80045ee:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80045f0:	887b      	ldrh	r3, [r7, #2]
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00f      	beq.n	800461a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8004600:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004608:	b2db      	uxtb	r3, r3
 800460a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800460e:	2b28      	cmp	r3, #40	; 0x28
 8004610:	d003      	beq.n	800461a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004618:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800461a:	887b      	ldrh	r3, [r7, #2]
 800461c:	f003 0302 	and.w	r3, r3, #2
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00f      	beq.n	8004644 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800462a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004632:	b2db      	uxtb	r3, r3
 8004634:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004638:	2b28      	cmp	r3, #40	; 0x28
 800463a:	d003      	beq.n	8004644 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004642:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004644:	887b      	ldrh	r3, [r7, #2]
 8004646:	f003 0304 	and.w	r3, r3, #4
 800464a:	2b00      	cmp	r3, #0
 800464c:	d003      	beq.n	8004656 <I2C_Disable_IRQ+0x76>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004654:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8004656:	887b      	ldrh	r3, [r7, #2]
 8004658:	f003 0311 	and.w	r3, r3, #17
 800465c:	2b11      	cmp	r3, #17
 800465e:	d103      	bne.n	8004668 <I2C_Disable_IRQ+0x88>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004666:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8004668:	887b      	ldrh	r3, [r7, #2]
 800466a:	f003 0312 	and.w	r3, r3, #18
 800466e:	2b12      	cmp	r3, #18
 8004670:	d103      	bne.n	800467a <I2C_Disable_IRQ+0x9a>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f043 0320 	orr.w	r3, r3, #32
 8004678:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 800467a:	887b      	ldrh	r3, [r7, #2]
 800467c:	f003 0312 	and.w	r3, r3, #18
 8004680:	2b12      	cmp	r3, #18
 8004682:	d103      	bne.n	800468c <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800468a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	6819      	ldr	r1, [r3, #0]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	43da      	mvns	r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	400a      	ands	r2, r1
 800469c:	601a      	str	r2, [r3, #0]
}
 800469e:	bf00      	nop
 80046a0:	3714      	adds	r7, #20
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr

080046aa <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80046aa:	b480      	push	{r7}
 80046ac:	b083      	sub	sp, #12
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
 80046b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	2b20      	cmp	r3, #32
 80046be:	d138      	bne.n	8004732 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d101      	bne.n	80046ce <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80046ca:	2302      	movs	r3, #2
 80046cc:	e032      	b.n	8004734 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2201      	movs	r2, #1
 80046d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2224      	movs	r2, #36	; 0x24
 80046da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f022 0201 	bic.w	r2, r2, #1
 80046ec:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80046fc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	6819      	ldr	r1, [r3, #0]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	683a      	ldr	r2, [r7, #0]
 800470a:	430a      	orrs	r2, r1
 800470c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f042 0201 	orr.w	r2, r2, #1
 800471c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2220      	movs	r2, #32
 8004722:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800472e:	2300      	movs	r3, #0
 8004730:	e000      	b.n	8004734 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004732:	2302      	movs	r3, #2
  }
}
 8004734:	4618      	mov	r0, r3
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004740:	b480      	push	{r7}
 8004742:	b085      	sub	sp, #20
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b20      	cmp	r3, #32
 8004754:	d139      	bne.n	80047ca <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800475c:	2b01      	cmp	r3, #1
 800475e:	d101      	bne.n	8004764 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004760:	2302      	movs	r3, #2
 8004762:	e033      	b.n	80047cc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2224      	movs	r2, #36	; 0x24
 8004770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f022 0201 	bic.w	r2, r2, #1
 8004782:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004792:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	021b      	lsls	r3, r3, #8
 8004798:	68fa      	ldr	r2, [r7, #12]
 800479a:	4313      	orrs	r3, r2
 800479c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68fa      	ldr	r2, [r7, #12]
 80047a4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f042 0201 	orr.w	r2, r2, #1
 80047b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2220      	movs	r2, #32
 80047ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80047c6:	2300      	movs	r3, #0
 80047c8:	e000      	b.n	80047cc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80047ca:	2302      	movs	r3, #2
  }
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3714      	adds	r7, #20
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80047d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047da:	b08f      	sub	sp, #60	; 0x3c
 80047dc:	af0a      	add	r7, sp, #40	; 0x28
 80047de:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d101      	bne.n	80047ea <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e10a      	b.n	8004a00 <HAL_PCD_Init+0x228>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d106      	bne.n	8004804 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f7fd fd84 	bl	800230c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2203      	movs	r2, #3
 8004808:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4618      	mov	r0, r3
 8004812:	f002 ffff 	bl	8007814 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	603b      	str	r3, [r7, #0]
 800481c:	687e      	ldr	r6, [r7, #4]
 800481e:	466d      	mov	r5, sp
 8004820:	f106 0410 	add.w	r4, r6, #16
 8004824:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004826:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004828:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800482a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800482c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004830:	e885 0003 	stmia.w	r5, {r0, r1}
 8004834:	1d33      	adds	r3, r6, #4
 8004836:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004838:	6838      	ldr	r0, [r7, #0]
 800483a:	f002 ff93 	bl	8007764 <USB_CoreInit>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d005      	beq.n	8004850 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2202      	movs	r2, #2
 8004848:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e0d7      	b.n	8004a00 <HAL_PCD_Init+0x228>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2100      	movs	r1, #0
 8004856:	4618      	mov	r0, r3
 8004858:	f002 ffed 	bl	8007836 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800485c:	2300      	movs	r3, #0
 800485e:	73fb      	strb	r3, [r7, #15]
 8004860:	e04a      	b.n	80048f8 <HAL_PCD_Init+0x120>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004862:	7bfa      	ldrb	r2, [r7, #15]
 8004864:	6879      	ldr	r1, [r7, #4]
 8004866:	4613      	mov	r3, r2
 8004868:	00db      	lsls	r3, r3, #3
 800486a:	1a9b      	subs	r3, r3, r2
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	440b      	add	r3, r1
 8004870:	333d      	adds	r3, #61	; 0x3d
 8004872:	2201      	movs	r2, #1
 8004874:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004876:	7bfa      	ldrb	r2, [r7, #15]
 8004878:	6879      	ldr	r1, [r7, #4]
 800487a:	4613      	mov	r3, r2
 800487c:	00db      	lsls	r3, r3, #3
 800487e:	1a9b      	subs	r3, r3, r2
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	440b      	add	r3, r1
 8004884:	333c      	adds	r3, #60	; 0x3c
 8004886:	7bfa      	ldrb	r2, [r7, #15]
 8004888:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800488a:	7bfa      	ldrb	r2, [r7, #15]
 800488c:	7bfb      	ldrb	r3, [r7, #15]
 800488e:	b298      	uxth	r0, r3
 8004890:	6879      	ldr	r1, [r7, #4]
 8004892:	4613      	mov	r3, r2
 8004894:	00db      	lsls	r3, r3, #3
 8004896:	1a9b      	subs	r3, r3, r2
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	440b      	add	r3, r1
 800489c:	3342      	adds	r3, #66	; 0x42
 800489e:	4602      	mov	r2, r0
 80048a0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80048a2:	7bfa      	ldrb	r2, [r7, #15]
 80048a4:	6879      	ldr	r1, [r7, #4]
 80048a6:	4613      	mov	r3, r2
 80048a8:	00db      	lsls	r3, r3, #3
 80048aa:	1a9b      	subs	r3, r3, r2
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	440b      	add	r3, r1
 80048b0:	333f      	adds	r3, #63	; 0x3f
 80048b2:	2200      	movs	r2, #0
 80048b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80048b6:	7bfa      	ldrb	r2, [r7, #15]
 80048b8:	6879      	ldr	r1, [r7, #4]
 80048ba:	4613      	mov	r3, r2
 80048bc:	00db      	lsls	r3, r3, #3
 80048be:	1a9b      	subs	r3, r3, r2
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	440b      	add	r3, r1
 80048c4:	3344      	adds	r3, #68	; 0x44
 80048c6:	2200      	movs	r2, #0
 80048c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80048ca:	7bfa      	ldrb	r2, [r7, #15]
 80048cc:	6879      	ldr	r1, [r7, #4]
 80048ce:	4613      	mov	r3, r2
 80048d0:	00db      	lsls	r3, r3, #3
 80048d2:	1a9b      	subs	r3, r3, r2
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	440b      	add	r3, r1
 80048d8:	3348      	adds	r3, #72	; 0x48
 80048da:	2200      	movs	r2, #0
 80048dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80048de:	7bfa      	ldrb	r2, [r7, #15]
 80048e0:	6879      	ldr	r1, [r7, #4]
 80048e2:	4613      	mov	r3, r2
 80048e4:	00db      	lsls	r3, r3, #3
 80048e6:	1a9b      	subs	r3, r3, r2
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	440b      	add	r3, r1
 80048ec:	3350      	adds	r3, #80	; 0x50
 80048ee:	2200      	movs	r2, #0
 80048f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048f2:	7bfb      	ldrb	r3, [r7, #15]
 80048f4:	3301      	adds	r3, #1
 80048f6:	73fb      	strb	r3, [r7, #15]
 80048f8:	7bfa      	ldrb	r2, [r7, #15]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d3af      	bcc.n	8004862 <HAL_PCD_Init+0x8a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004902:	2300      	movs	r3, #0
 8004904:	73fb      	strb	r3, [r7, #15]
 8004906:	e044      	b.n	8004992 <HAL_PCD_Init+0x1ba>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004908:	7bfa      	ldrb	r2, [r7, #15]
 800490a:	6879      	ldr	r1, [r7, #4]
 800490c:	4613      	mov	r3, r2
 800490e:	00db      	lsls	r3, r3, #3
 8004910:	1a9b      	subs	r3, r3, r2
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	440b      	add	r3, r1
 8004916:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800491a:	2200      	movs	r2, #0
 800491c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800491e:	7bfa      	ldrb	r2, [r7, #15]
 8004920:	6879      	ldr	r1, [r7, #4]
 8004922:	4613      	mov	r3, r2
 8004924:	00db      	lsls	r3, r3, #3
 8004926:	1a9b      	subs	r3, r3, r2
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	440b      	add	r3, r1
 800492c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004930:	7bfa      	ldrb	r2, [r7, #15]
 8004932:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004934:	7bfa      	ldrb	r2, [r7, #15]
 8004936:	6879      	ldr	r1, [r7, #4]
 8004938:	4613      	mov	r3, r2
 800493a:	00db      	lsls	r3, r3, #3
 800493c:	1a9b      	subs	r3, r3, r2
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	440b      	add	r3, r1
 8004942:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004946:	2200      	movs	r2, #0
 8004948:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800494a:	7bfa      	ldrb	r2, [r7, #15]
 800494c:	6879      	ldr	r1, [r7, #4]
 800494e:	4613      	mov	r3, r2
 8004950:	00db      	lsls	r3, r3, #3
 8004952:	1a9b      	subs	r3, r3, r2
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	440b      	add	r3, r1
 8004958:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800495c:	2200      	movs	r2, #0
 800495e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004960:	7bfa      	ldrb	r2, [r7, #15]
 8004962:	6879      	ldr	r1, [r7, #4]
 8004964:	4613      	mov	r3, r2
 8004966:	00db      	lsls	r3, r3, #3
 8004968:	1a9b      	subs	r3, r3, r2
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	440b      	add	r3, r1
 800496e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004972:	2200      	movs	r2, #0
 8004974:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004976:	7bfa      	ldrb	r2, [r7, #15]
 8004978:	6879      	ldr	r1, [r7, #4]
 800497a:	4613      	mov	r3, r2
 800497c:	00db      	lsls	r3, r3, #3
 800497e:	1a9b      	subs	r3, r3, r2
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	440b      	add	r3, r1
 8004984:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004988:	2200      	movs	r2, #0
 800498a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800498c:	7bfb      	ldrb	r3, [r7, #15]
 800498e:	3301      	adds	r3, #1
 8004990:	73fb      	strb	r3, [r7, #15]
 8004992:	7bfa      	ldrb	r2, [r7, #15]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	429a      	cmp	r2, r3
 800499a:	d3b5      	bcc.n	8004908 <HAL_PCD_Init+0x130>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	603b      	str	r3, [r7, #0]
 80049a2:	687e      	ldr	r6, [r7, #4]
 80049a4:	466d      	mov	r5, sp
 80049a6:	f106 0410 	add.w	r4, r6, #16
 80049aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80049b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80049ba:	1d33      	adds	r3, r6, #4
 80049bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80049be:	6838      	ldr	r0, [r7, #0]
 80049c0:	f002 ff64 	bl	800788c <USB_DevInit>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d005      	beq.n	80049d6 <HAL_PCD_Init+0x1fe>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2202      	movs	r2, #2
 80049ce:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e014      	b.n	8004a00 <HAL_PCD_Init+0x228>
  }

  hpcd->USB_Address = 0U;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2201      	movs	r2, #1
 80049e2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d102      	bne.n	80049f4 <HAL_PCD_Init+0x21c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 f80a 	bl	8004a08 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4618      	mov	r0, r3
 80049fa:	f003 f924 	bl	8007c46 <USB_DevDisconnect>

  return HAL_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3714      	adds	r7, #20
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004a08 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b085      	sub	sp, #20
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	699b      	ldr	r3, [r3, #24]
 8004a2a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a36:	4b05      	ldr	r3, [pc, #20]	; (8004a4c <HAL_PCDEx_ActivateLPM+0x44>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3714      	adds	r7, #20
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr
 8004a4c:	10000003 	.word	0x10000003

08004a50 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004a50:	b480      	push	{r7}
 8004a52:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a54:	4b05      	ldr	r3, [pc, #20]	; (8004a6c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a04      	ldr	r2, [pc, #16]	; (8004a6c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a5e:	6013      	str	r3, [r2, #0]
}
 8004a60:	bf00      	nop
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	40007000 	.word	0x40007000

08004a70 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b086      	sub	sp, #24
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d101      	bne.n	8004a86 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e25c      	b.n	8004f40 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0301 	and.w	r3, r3, #1
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	f000 8087 	beq.w	8004ba2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a94:	4b96      	ldr	r3, [pc, #600]	; (8004cf0 <HAL_RCC_OscConfig+0x280>)
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	f003 030c 	and.w	r3, r3, #12
 8004a9c:	2b04      	cmp	r3, #4
 8004a9e:	d00c      	beq.n	8004aba <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004aa0:	4b93      	ldr	r3, [pc, #588]	; (8004cf0 <HAL_RCC_OscConfig+0x280>)
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	f003 030c 	and.w	r3, r3, #12
 8004aa8:	2b08      	cmp	r3, #8
 8004aaa:	d112      	bne.n	8004ad2 <HAL_RCC_OscConfig+0x62>
 8004aac:	4b90      	ldr	r3, [pc, #576]	; (8004cf0 <HAL_RCC_OscConfig+0x280>)
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ab4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ab8:	d10b      	bne.n	8004ad2 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aba:	4b8d      	ldr	r3, [pc, #564]	; (8004cf0 <HAL_RCC_OscConfig+0x280>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d06c      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x130>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d168      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e236      	b.n	8004f40 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ada:	d106      	bne.n	8004aea <HAL_RCC_OscConfig+0x7a>
 8004adc:	4b84      	ldr	r3, [pc, #528]	; (8004cf0 <HAL_RCC_OscConfig+0x280>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a83      	ldr	r2, [pc, #524]	; (8004cf0 <HAL_RCC_OscConfig+0x280>)
 8004ae2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ae6:	6013      	str	r3, [r2, #0]
 8004ae8:	e02e      	b.n	8004b48 <HAL_RCC_OscConfig+0xd8>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d10c      	bne.n	8004b0c <HAL_RCC_OscConfig+0x9c>
 8004af2:	4b7f      	ldr	r3, [pc, #508]	; (8004cf0 <HAL_RCC_OscConfig+0x280>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a7e      	ldr	r2, [pc, #504]	; (8004cf0 <HAL_RCC_OscConfig+0x280>)
 8004af8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004afc:	6013      	str	r3, [r2, #0]
 8004afe:	4b7c      	ldr	r3, [pc, #496]	; (8004cf0 <HAL_RCC_OscConfig+0x280>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a7b      	ldr	r2, [pc, #492]	; (8004cf0 <HAL_RCC_OscConfig+0x280>)
 8004b04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b08:	6013      	str	r3, [r2, #0]
 8004b0a:	e01d      	b.n	8004b48 <HAL_RCC_OscConfig+0xd8>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b14:	d10c      	bne.n	8004b30 <HAL_RCC_OscConfig+0xc0>
 8004b16:	4b76      	ldr	r3, [pc, #472]	; (8004cf0 <HAL_RCC_OscConfig+0x280>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a75      	ldr	r2, [pc, #468]	; (8004cf0 <HAL_RCC_OscConfig+0x280>)
 8004b1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b20:	6013      	str	r3, [r2, #0]
 8004b22:	4b73      	ldr	r3, [pc, #460]	; (8004cf0 <HAL_RCC_OscConfig+0x280>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a72      	ldr	r2, [pc, #456]	; (8004cf0 <HAL_RCC_OscConfig+0x280>)
 8004b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b2c:	6013      	str	r3, [r2, #0]
 8004b2e:	e00b      	b.n	8004b48 <HAL_RCC_OscConfig+0xd8>
 8004b30:	4b6f      	ldr	r3, [pc, #444]	; (8004cf0 <HAL_RCC_OscConfig+0x280>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a6e      	ldr	r2, [pc, #440]	; (8004cf0 <HAL_RCC_OscConfig+0x280>)
 8004b36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b3a:	6013      	str	r3, [r2, #0]
 8004b3c:	4b6c      	ldr	r3, [pc, #432]	; (8004cf0 <HAL_RCC_OscConfig+0x280>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a6b      	ldr	r2, [pc, #428]	; (8004cf0 <HAL_RCC_OscConfig+0x280>)
 8004b42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d013      	beq.n	8004b78 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b50:	f7fd fcb2 	bl	80024b8 <HAL_GetTick>
 8004b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b56:	e008      	b.n	8004b6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b58:	f7fd fcae 	bl	80024b8 <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	2b64      	cmp	r3, #100	; 0x64
 8004b64:	d901      	bls.n	8004b6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e1ea      	b.n	8004f40 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b6a:	4b61      	ldr	r3, [pc, #388]	; (8004cf0 <HAL_RCC_OscConfig+0x280>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d0f0      	beq.n	8004b58 <HAL_RCC_OscConfig+0xe8>
 8004b76:	e014      	b.n	8004ba2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b78:	f7fd fc9e 	bl	80024b8 <HAL_GetTick>
 8004b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b7e:	e008      	b.n	8004b92 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b80:	f7fd fc9a 	bl	80024b8 <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	2b64      	cmp	r3, #100	; 0x64
 8004b8c:	d901      	bls.n	8004b92 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e1d6      	b.n	8004f40 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b92:	4b57      	ldr	r3, [pc, #348]	; (8004cf0 <HAL_RCC_OscConfig+0x280>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d1f0      	bne.n	8004b80 <HAL_RCC_OscConfig+0x110>
 8004b9e:	e000      	b.n	8004ba2 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ba0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0302 	and.w	r3, r3, #2
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d069      	beq.n	8004c82 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004bae:	4b50      	ldr	r3, [pc, #320]	; (8004cf0 <HAL_RCC_OscConfig+0x280>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f003 030c 	and.w	r3, r3, #12
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00b      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bba:	4b4d      	ldr	r3, [pc, #308]	; (8004cf0 <HAL_RCC_OscConfig+0x280>)
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	f003 030c 	and.w	r3, r3, #12
 8004bc2:	2b08      	cmp	r3, #8
 8004bc4:	d11c      	bne.n	8004c00 <HAL_RCC_OscConfig+0x190>
 8004bc6:	4b4a      	ldr	r3, [pc, #296]	; (8004cf0 <HAL_RCC_OscConfig+0x280>)
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d116      	bne.n	8004c00 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bd2:	4b47      	ldr	r3, [pc, #284]	; (8004cf0 <HAL_RCC_OscConfig+0x280>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0302 	and.w	r3, r3, #2
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d005      	beq.n	8004bea <HAL_RCC_OscConfig+0x17a>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d001      	beq.n	8004bea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e1aa      	b.n	8004f40 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bea:	4b41      	ldr	r3, [pc, #260]	; (8004cf0 <HAL_RCC_OscConfig+0x280>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	00db      	lsls	r3, r3, #3
 8004bf8:	493d      	ldr	r1, [pc, #244]	; (8004cf0 <HAL_RCC_OscConfig+0x280>)
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bfe:	e040      	b.n	8004c82 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d023      	beq.n	8004c50 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c08:	4b39      	ldr	r3, [pc, #228]	; (8004cf0 <HAL_RCC_OscConfig+0x280>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a38      	ldr	r2, [pc, #224]	; (8004cf0 <HAL_RCC_OscConfig+0x280>)
 8004c0e:	f043 0301 	orr.w	r3, r3, #1
 8004c12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c14:	f7fd fc50 	bl	80024b8 <HAL_GetTick>
 8004c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c1a:	e008      	b.n	8004c2e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c1c:	f7fd fc4c 	bl	80024b8 <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	2b02      	cmp	r3, #2
 8004c28:	d901      	bls.n	8004c2e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e188      	b.n	8004f40 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c2e:	4b30      	ldr	r3, [pc, #192]	; (8004cf0 <HAL_RCC_OscConfig+0x280>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0302 	and.w	r3, r3, #2
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d0f0      	beq.n	8004c1c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c3a:	4b2d      	ldr	r3, [pc, #180]	; (8004cf0 <HAL_RCC_OscConfig+0x280>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	00db      	lsls	r3, r3, #3
 8004c48:	4929      	ldr	r1, [pc, #164]	; (8004cf0 <HAL_RCC_OscConfig+0x280>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	600b      	str	r3, [r1, #0]
 8004c4e:	e018      	b.n	8004c82 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c50:	4b27      	ldr	r3, [pc, #156]	; (8004cf0 <HAL_RCC_OscConfig+0x280>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a26      	ldr	r2, [pc, #152]	; (8004cf0 <HAL_RCC_OscConfig+0x280>)
 8004c56:	f023 0301 	bic.w	r3, r3, #1
 8004c5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c5c:	f7fd fc2c 	bl	80024b8 <HAL_GetTick>
 8004c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c62:	e008      	b.n	8004c76 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c64:	f7fd fc28 	bl	80024b8 <HAL_GetTick>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d901      	bls.n	8004c76 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e164      	b.n	8004f40 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c76:	4b1e      	ldr	r3, [pc, #120]	; (8004cf0 <HAL_RCC_OscConfig+0x280>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0302 	and.w	r3, r3, #2
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d1f0      	bne.n	8004c64 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0308 	and.w	r3, r3, #8
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d038      	beq.n	8004d00 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	695b      	ldr	r3, [r3, #20]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d019      	beq.n	8004cca <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c96:	4b16      	ldr	r3, [pc, #88]	; (8004cf0 <HAL_RCC_OscConfig+0x280>)
 8004c98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c9a:	4a15      	ldr	r2, [pc, #84]	; (8004cf0 <HAL_RCC_OscConfig+0x280>)
 8004c9c:	f043 0301 	orr.w	r3, r3, #1
 8004ca0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ca2:	f7fd fc09 	bl	80024b8 <HAL_GetTick>
 8004ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ca8:	e008      	b.n	8004cbc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004caa:	f7fd fc05 	bl	80024b8 <HAL_GetTick>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d901      	bls.n	8004cbc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e141      	b.n	8004f40 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cbc:	4b0c      	ldr	r3, [pc, #48]	; (8004cf0 <HAL_RCC_OscConfig+0x280>)
 8004cbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cc0:	f003 0302 	and.w	r3, r3, #2
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d0f0      	beq.n	8004caa <HAL_RCC_OscConfig+0x23a>
 8004cc8:	e01a      	b.n	8004d00 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cca:	4b09      	ldr	r3, [pc, #36]	; (8004cf0 <HAL_RCC_OscConfig+0x280>)
 8004ccc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cce:	4a08      	ldr	r2, [pc, #32]	; (8004cf0 <HAL_RCC_OscConfig+0x280>)
 8004cd0:	f023 0301 	bic.w	r3, r3, #1
 8004cd4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cd6:	f7fd fbef 	bl	80024b8 <HAL_GetTick>
 8004cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cdc:	e00a      	b.n	8004cf4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cde:	f7fd fbeb 	bl	80024b8 <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d903      	bls.n	8004cf4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e127      	b.n	8004f40 <HAL_RCC_OscConfig+0x4d0>
 8004cf0:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cf4:	4b94      	ldr	r3, [pc, #592]	; (8004f48 <HAL_RCC_OscConfig+0x4d8>)
 8004cf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cf8:	f003 0302 	and.w	r3, r3, #2
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d1ee      	bne.n	8004cde <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 0304 	and.w	r3, r3, #4
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	f000 80a4 	beq.w	8004e56 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d0e:	4b8e      	ldr	r3, [pc, #568]	; (8004f48 <HAL_RCC_OscConfig+0x4d8>)
 8004d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d10d      	bne.n	8004d36 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d1a:	4b8b      	ldr	r3, [pc, #556]	; (8004f48 <HAL_RCC_OscConfig+0x4d8>)
 8004d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1e:	4a8a      	ldr	r2, [pc, #552]	; (8004f48 <HAL_RCC_OscConfig+0x4d8>)
 8004d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d24:	6413      	str	r3, [r2, #64]	; 0x40
 8004d26:	4b88      	ldr	r3, [pc, #544]	; (8004f48 <HAL_RCC_OscConfig+0x4d8>)
 8004d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d2e:	60fb      	str	r3, [r7, #12]
 8004d30:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004d32:	2301      	movs	r3, #1
 8004d34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d36:	4b85      	ldr	r3, [pc, #532]	; (8004f4c <HAL_RCC_OscConfig+0x4dc>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d118      	bne.n	8004d74 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004d42:	4b82      	ldr	r3, [pc, #520]	; (8004f4c <HAL_RCC_OscConfig+0x4dc>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a81      	ldr	r2, [pc, #516]	; (8004f4c <HAL_RCC_OscConfig+0x4dc>)
 8004d48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d4e:	f7fd fbb3 	bl	80024b8 <HAL_GetTick>
 8004d52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d54:	e008      	b.n	8004d68 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004d56:	f7fd fbaf 	bl	80024b8 <HAL_GetTick>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	2b64      	cmp	r3, #100	; 0x64
 8004d62:	d901      	bls.n	8004d68 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	e0eb      	b.n	8004f40 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d68:	4b78      	ldr	r3, [pc, #480]	; (8004f4c <HAL_RCC_OscConfig+0x4dc>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d0f0      	beq.n	8004d56 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d106      	bne.n	8004d8a <HAL_RCC_OscConfig+0x31a>
 8004d7c:	4b72      	ldr	r3, [pc, #456]	; (8004f48 <HAL_RCC_OscConfig+0x4d8>)
 8004d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d80:	4a71      	ldr	r2, [pc, #452]	; (8004f48 <HAL_RCC_OscConfig+0x4d8>)
 8004d82:	f043 0301 	orr.w	r3, r3, #1
 8004d86:	6713      	str	r3, [r2, #112]	; 0x70
 8004d88:	e02d      	b.n	8004de6 <HAL_RCC_OscConfig+0x376>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d10c      	bne.n	8004dac <HAL_RCC_OscConfig+0x33c>
 8004d92:	4b6d      	ldr	r3, [pc, #436]	; (8004f48 <HAL_RCC_OscConfig+0x4d8>)
 8004d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d96:	4a6c      	ldr	r2, [pc, #432]	; (8004f48 <HAL_RCC_OscConfig+0x4d8>)
 8004d98:	f023 0301 	bic.w	r3, r3, #1
 8004d9c:	6713      	str	r3, [r2, #112]	; 0x70
 8004d9e:	4b6a      	ldr	r3, [pc, #424]	; (8004f48 <HAL_RCC_OscConfig+0x4d8>)
 8004da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da2:	4a69      	ldr	r2, [pc, #420]	; (8004f48 <HAL_RCC_OscConfig+0x4d8>)
 8004da4:	f023 0304 	bic.w	r3, r3, #4
 8004da8:	6713      	str	r3, [r2, #112]	; 0x70
 8004daa:	e01c      	b.n	8004de6 <HAL_RCC_OscConfig+0x376>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	2b05      	cmp	r3, #5
 8004db2:	d10c      	bne.n	8004dce <HAL_RCC_OscConfig+0x35e>
 8004db4:	4b64      	ldr	r3, [pc, #400]	; (8004f48 <HAL_RCC_OscConfig+0x4d8>)
 8004db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db8:	4a63      	ldr	r2, [pc, #396]	; (8004f48 <HAL_RCC_OscConfig+0x4d8>)
 8004dba:	f043 0304 	orr.w	r3, r3, #4
 8004dbe:	6713      	str	r3, [r2, #112]	; 0x70
 8004dc0:	4b61      	ldr	r3, [pc, #388]	; (8004f48 <HAL_RCC_OscConfig+0x4d8>)
 8004dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc4:	4a60      	ldr	r2, [pc, #384]	; (8004f48 <HAL_RCC_OscConfig+0x4d8>)
 8004dc6:	f043 0301 	orr.w	r3, r3, #1
 8004dca:	6713      	str	r3, [r2, #112]	; 0x70
 8004dcc:	e00b      	b.n	8004de6 <HAL_RCC_OscConfig+0x376>
 8004dce:	4b5e      	ldr	r3, [pc, #376]	; (8004f48 <HAL_RCC_OscConfig+0x4d8>)
 8004dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd2:	4a5d      	ldr	r2, [pc, #372]	; (8004f48 <HAL_RCC_OscConfig+0x4d8>)
 8004dd4:	f023 0301 	bic.w	r3, r3, #1
 8004dd8:	6713      	str	r3, [r2, #112]	; 0x70
 8004dda:	4b5b      	ldr	r3, [pc, #364]	; (8004f48 <HAL_RCC_OscConfig+0x4d8>)
 8004ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dde:	4a5a      	ldr	r2, [pc, #360]	; (8004f48 <HAL_RCC_OscConfig+0x4d8>)
 8004de0:	f023 0304 	bic.w	r3, r3, #4
 8004de4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d015      	beq.n	8004e1a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dee:	f7fd fb63 	bl	80024b8 <HAL_GetTick>
 8004df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004df4:	e00a      	b.n	8004e0c <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004df6:	f7fd fb5f 	bl	80024b8 <HAL_GetTick>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d901      	bls.n	8004e0c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e099      	b.n	8004f40 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e0c:	4b4e      	ldr	r3, [pc, #312]	; (8004f48 <HAL_RCC_OscConfig+0x4d8>)
 8004e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e10:	f003 0302 	and.w	r3, r3, #2
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d0ee      	beq.n	8004df6 <HAL_RCC_OscConfig+0x386>
 8004e18:	e014      	b.n	8004e44 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e1a:	f7fd fb4d 	bl	80024b8 <HAL_GetTick>
 8004e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e20:	e00a      	b.n	8004e38 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e22:	f7fd fb49 	bl	80024b8 <HAL_GetTick>
 8004e26:	4602      	mov	r2, r0
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d901      	bls.n	8004e38 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e083      	b.n	8004f40 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e38:	4b43      	ldr	r3, [pc, #268]	; (8004f48 <HAL_RCC_OscConfig+0x4d8>)
 8004e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e3c:	f003 0302 	and.w	r3, r3, #2
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d1ee      	bne.n	8004e22 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e44:	7dfb      	ldrb	r3, [r7, #23]
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d105      	bne.n	8004e56 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e4a:	4b3f      	ldr	r3, [pc, #252]	; (8004f48 <HAL_RCC_OscConfig+0x4d8>)
 8004e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4e:	4a3e      	ldr	r2, [pc, #248]	; (8004f48 <HAL_RCC_OscConfig+0x4d8>)
 8004e50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e54:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	699b      	ldr	r3, [r3, #24]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d06f      	beq.n	8004f3e <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e5e:	4b3a      	ldr	r3, [pc, #232]	; (8004f48 <HAL_RCC_OscConfig+0x4d8>)
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	f003 030c 	and.w	r3, r3, #12
 8004e66:	2b08      	cmp	r3, #8
 8004e68:	d067      	beq.n	8004f3a <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	699b      	ldr	r3, [r3, #24]
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d149      	bne.n	8004f06 <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e72:	4b35      	ldr	r3, [pc, #212]	; (8004f48 <HAL_RCC_OscConfig+0x4d8>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a34      	ldr	r2, [pc, #208]	; (8004f48 <HAL_RCC_OscConfig+0x4d8>)
 8004e78:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e7e:	f7fd fb1b 	bl	80024b8 <HAL_GetTick>
 8004e82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e84:	e008      	b.n	8004e98 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e86:	f7fd fb17 	bl	80024b8 <HAL_GetTick>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d901      	bls.n	8004e98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004e94:	2303      	movs	r3, #3
 8004e96:	e053      	b.n	8004f40 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e98:	4b2b      	ldr	r3, [pc, #172]	; (8004f48 <HAL_RCC_OscConfig+0x4d8>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d1f0      	bne.n	8004e86 <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	69da      	ldr	r2, [r3, #28]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a1b      	ldr	r3, [r3, #32]
 8004eac:	431a      	orrs	r2, r3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb2:	019b      	lsls	r3, r3, #6
 8004eb4:	431a      	orrs	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eba:	085b      	lsrs	r3, r3, #1
 8004ebc:	3b01      	subs	r3, #1
 8004ebe:	041b      	lsls	r3, r3, #16
 8004ec0:	431a      	orrs	r2, r3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec6:	061b      	lsls	r3, r3, #24
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	4a1f      	ldr	r2, [pc, #124]	; (8004f48 <HAL_RCC_OscConfig+0x4d8>)
 8004ecc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ed0:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ed2:	4b1d      	ldr	r3, [pc, #116]	; (8004f48 <HAL_RCC_OscConfig+0x4d8>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a1c      	ldr	r2, [pc, #112]	; (8004f48 <HAL_RCC_OscConfig+0x4d8>)
 8004ed8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004edc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ede:	f7fd faeb 	bl	80024b8 <HAL_GetTick>
 8004ee2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ee4:	e008      	b.n	8004ef8 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ee6:	f7fd fae7 	bl	80024b8 <HAL_GetTick>
 8004eea:	4602      	mov	r2, r0
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	d901      	bls.n	8004ef8 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e023      	b.n	8004f40 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ef8:	4b13      	ldr	r3, [pc, #76]	; (8004f48 <HAL_RCC_OscConfig+0x4d8>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d0f0      	beq.n	8004ee6 <HAL_RCC_OscConfig+0x476>
 8004f04:	e01b      	b.n	8004f3e <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f06:	4b10      	ldr	r3, [pc, #64]	; (8004f48 <HAL_RCC_OscConfig+0x4d8>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a0f      	ldr	r2, [pc, #60]	; (8004f48 <HAL_RCC_OscConfig+0x4d8>)
 8004f0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f12:	f7fd fad1 	bl	80024b8 <HAL_GetTick>
 8004f16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f18:	e008      	b.n	8004f2c <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f1a:	f7fd facd 	bl	80024b8 <HAL_GetTick>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	d901      	bls.n	8004f2c <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	e009      	b.n	8004f40 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f2c:	4b06      	ldr	r3, [pc, #24]	; (8004f48 <HAL_RCC_OscConfig+0x4d8>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d1f0      	bne.n	8004f1a <HAL_RCC_OscConfig+0x4aa>
 8004f38:	e001      	b.n	8004f3e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e000      	b.n	8004f40 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 8004f3e:	2300      	movs	r3, #0
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3718      	adds	r7, #24
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	40023800 	.word	0x40023800
 8004f4c:	40007000 	.word	0x40007000

08004f50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d101      	bne.n	8004f68 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	e0ce      	b.n	8005106 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f68:	4b69      	ldr	r3, [pc, #420]	; (8005110 <HAL_RCC_ClockConfig+0x1c0>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 030f 	and.w	r3, r3, #15
 8004f70:	683a      	ldr	r2, [r7, #0]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d910      	bls.n	8004f98 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f76:	4b66      	ldr	r3, [pc, #408]	; (8005110 <HAL_RCC_ClockConfig+0x1c0>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f023 020f 	bic.w	r2, r3, #15
 8004f7e:	4964      	ldr	r1, [pc, #400]	; (8005110 <HAL_RCC_ClockConfig+0x1c0>)
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f86:	4b62      	ldr	r3, [pc, #392]	; (8005110 <HAL_RCC_ClockConfig+0x1c0>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 030f 	and.w	r3, r3, #15
 8004f8e:	683a      	ldr	r2, [r7, #0]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d001      	beq.n	8004f98 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e0b6      	b.n	8005106 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0302 	and.w	r3, r3, #2
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d020      	beq.n	8004fe6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0304 	and.w	r3, r3, #4
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d005      	beq.n	8004fbc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fb0:	4b58      	ldr	r3, [pc, #352]	; (8005114 <HAL_RCC_ClockConfig+0x1c4>)
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	4a57      	ldr	r2, [pc, #348]	; (8005114 <HAL_RCC_ClockConfig+0x1c4>)
 8004fb6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004fba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 0308 	and.w	r3, r3, #8
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d005      	beq.n	8004fd4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004fc8:	4b52      	ldr	r3, [pc, #328]	; (8005114 <HAL_RCC_ClockConfig+0x1c4>)
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	4a51      	ldr	r2, [pc, #324]	; (8005114 <HAL_RCC_ClockConfig+0x1c4>)
 8004fce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004fd2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fd4:	4b4f      	ldr	r3, [pc, #316]	; (8005114 <HAL_RCC_ClockConfig+0x1c4>)
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	494c      	ldr	r1, [pc, #304]	; (8005114 <HAL_RCC_ClockConfig+0x1c4>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0301 	and.w	r3, r3, #1
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d040      	beq.n	8005074 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d107      	bne.n	800500a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ffa:	4b46      	ldr	r3, [pc, #280]	; (8005114 <HAL_RCC_ClockConfig+0x1c4>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d115      	bne.n	8005032 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e07d      	b.n	8005106 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	2b02      	cmp	r3, #2
 8005010:	d107      	bne.n	8005022 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005012:	4b40      	ldr	r3, [pc, #256]	; (8005114 <HAL_RCC_ClockConfig+0x1c4>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800501a:	2b00      	cmp	r3, #0
 800501c:	d109      	bne.n	8005032 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e071      	b.n	8005106 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005022:	4b3c      	ldr	r3, [pc, #240]	; (8005114 <HAL_RCC_ClockConfig+0x1c4>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 0302 	and.w	r3, r3, #2
 800502a:	2b00      	cmp	r3, #0
 800502c:	d101      	bne.n	8005032 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e069      	b.n	8005106 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005032:	4b38      	ldr	r3, [pc, #224]	; (8005114 <HAL_RCC_ClockConfig+0x1c4>)
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	f023 0203 	bic.w	r2, r3, #3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	4935      	ldr	r1, [pc, #212]	; (8005114 <HAL_RCC_ClockConfig+0x1c4>)
 8005040:	4313      	orrs	r3, r2
 8005042:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005044:	f7fd fa38 	bl	80024b8 <HAL_GetTick>
 8005048:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800504a:	e00a      	b.n	8005062 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800504c:	f7fd fa34 	bl	80024b8 <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	f241 3288 	movw	r2, #5000	; 0x1388
 800505a:	4293      	cmp	r3, r2
 800505c:	d901      	bls.n	8005062 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e051      	b.n	8005106 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005062:	4b2c      	ldr	r3, [pc, #176]	; (8005114 <HAL_RCC_ClockConfig+0x1c4>)
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f003 020c 	and.w	r2, r3, #12
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	429a      	cmp	r2, r3
 8005072:	d1eb      	bne.n	800504c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005074:	4b26      	ldr	r3, [pc, #152]	; (8005110 <HAL_RCC_ClockConfig+0x1c0>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 030f 	and.w	r3, r3, #15
 800507c:	683a      	ldr	r2, [r7, #0]
 800507e:	429a      	cmp	r2, r3
 8005080:	d210      	bcs.n	80050a4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005082:	4b23      	ldr	r3, [pc, #140]	; (8005110 <HAL_RCC_ClockConfig+0x1c0>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f023 020f 	bic.w	r2, r3, #15
 800508a:	4921      	ldr	r1, [pc, #132]	; (8005110 <HAL_RCC_ClockConfig+0x1c0>)
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	4313      	orrs	r3, r2
 8005090:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005092:	4b1f      	ldr	r3, [pc, #124]	; (8005110 <HAL_RCC_ClockConfig+0x1c0>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 030f 	and.w	r3, r3, #15
 800509a:	683a      	ldr	r2, [r7, #0]
 800509c:	429a      	cmp	r2, r3
 800509e:	d001      	beq.n	80050a4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e030      	b.n	8005106 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 0304 	and.w	r3, r3, #4
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d008      	beq.n	80050c2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050b0:	4b18      	ldr	r3, [pc, #96]	; (8005114 <HAL_RCC_ClockConfig+0x1c4>)
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	4915      	ldr	r1, [pc, #84]	; (8005114 <HAL_RCC_ClockConfig+0x1c4>)
 80050be:	4313      	orrs	r3, r2
 80050c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 0308 	and.w	r3, r3, #8
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d009      	beq.n	80050e2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80050ce:	4b11      	ldr	r3, [pc, #68]	; (8005114 <HAL_RCC_ClockConfig+0x1c4>)
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	00db      	lsls	r3, r3, #3
 80050dc:	490d      	ldr	r1, [pc, #52]	; (8005114 <HAL_RCC_ClockConfig+0x1c4>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80050e2:	f000 f81d 	bl	8005120 <HAL_RCC_GetSysClockFreq>
 80050e6:	4601      	mov	r1, r0
 80050e8:	4b0a      	ldr	r3, [pc, #40]	; (8005114 <HAL_RCC_ClockConfig+0x1c4>)
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	091b      	lsrs	r3, r3, #4
 80050ee:	f003 030f 	and.w	r3, r3, #15
 80050f2:	4a09      	ldr	r2, [pc, #36]	; (8005118 <HAL_RCC_ClockConfig+0x1c8>)
 80050f4:	5cd3      	ldrb	r3, [r2, r3]
 80050f6:	fa21 f303 	lsr.w	r3, r1, r3
 80050fa:	4a08      	ldr	r2, [pc, #32]	; (800511c <HAL_RCC_ClockConfig+0x1cc>)
 80050fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80050fe:	2000      	movs	r0, #0
 8005100:	f7fd f996 	bl	8002430 <HAL_InitTick>

  return HAL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3710      	adds	r7, #16
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	40023c00 	.word	0x40023c00
 8005114:	40023800 	.word	0x40023800
 8005118:	0800b824 	.word	0x0800b824
 800511c:	20000000 	.word	0x20000000

08005120 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005126:	2300      	movs	r3, #0
 8005128:	607b      	str	r3, [r7, #4]
 800512a:	2300      	movs	r3, #0
 800512c:	60fb      	str	r3, [r7, #12]
 800512e:	2300      	movs	r3, #0
 8005130:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8005132:	2300      	movs	r3, #0
 8005134:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005136:	4b63      	ldr	r3, [pc, #396]	; (80052c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	f003 030c 	and.w	r3, r3, #12
 800513e:	2b04      	cmp	r3, #4
 8005140:	d007      	beq.n	8005152 <HAL_RCC_GetSysClockFreq+0x32>
 8005142:	2b08      	cmp	r3, #8
 8005144:	d008      	beq.n	8005158 <HAL_RCC_GetSysClockFreq+0x38>
 8005146:	2b00      	cmp	r3, #0
 8005148:	f040 80b4 	bne.w	80052b4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800514c:	4b5e      	ldr	r3, [pc, #376]	; (80052c8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800514e:	60bb      	str	r3, [r7, #8]
       break;
 8005150:	e0b3      	b.n	80052ba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005152:	4b5e      	ldr	r3, [pc, #376]	; (80052cc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005154:	60bb      	str	r3, [r7, #8]
      break;
 8005156:	e0b0      	b.n	80052ba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005158:	4b5a      	ldr	r3, [pc, #360]	; (80052c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005160:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005162:	4b58      	ldr	r3, [pc, #352]	; (80052c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800516a:	2b00      	cmp	r3, #0
 800516c:	d04a      	beq.n	8005204 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800516e:	4b55      	ldr	r3, [pc, #340]	; (80052c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	099b      	lsrs	r3, r3, #6
 8005174:	f04f 0400 	mov.w	r4, #0
 8005178:	f240 11ff 	movw	r1, #511	; 0x1ff
 800517c:	f04f 0200 	mov.w	r2, #0
 8005180:	ea03 0501 	and.w	r5, r3, r1
 8005184:	ea04 0602 	and.w	r6, r4, r2
 8005188:	4629      	mov	r1, r5
 800518a:	4632      	mov	r2, r6
 800518c:	f04f 0300 	mov.w	r3, #0
 8005190:	f04f 0400 	mov.w	r4, #0
 8005194:	0154      	lsls	r4, r2, #5
 8005196:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800519a:	014b      	lsls	r3, r1, #5
 800519c:	4619      	mov	r1, r3
 800519e:	4622      	mov	r2, r4
 80051a0:	1b49      	subs	r1, r1, r5
 80051a2:	eb62 0206 	sbc.w	r2, r2, r6
 80051a6:	f04f 0300 	mov.w	r3, #0
 80051aa:	f04f 0400 	mov.w	r4, #0
 80051ae:	0194      	lsls	r4, r2, #6
 80051b0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80051b4:	018b      	lsls	r3, r1, #6
 80051b6:	1a5b      	subs	r3, r3, r1
 80051b8:	eb64 0402 	sbc.w	r4, r4, r2
 80051bc:	f04f 0100 	mov.w	r1, #0
 80051c0:	f04f 0200 	mov.w	r2, #0
 80051c4:	00e2      	lsls	r2, r4, #3
 80051c6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80051ca:	00d9      	lsls	r1, r3, #3
 80051cc:	460b      	mov	r3, r1
 80051ce:	4614      	mov	r4, r2
 80051d0:	195b      	adds	r3, r3, r5
 80051d2:	eb44 0406 	adc.w	r4, r4, r6
 80051d6:	f04f 0100 	mov.w	r1, #0
 80051da:	f04f 0200 	mov.w	r2, #0
 80051de:	0262      	lsls	r2, r4, #9
 80051e0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80051e4:	0259      	lsls	r1, r3, #9
 80051e6:	460b      	mov	r3, r1
 80051e8:	4614      	mov	r4, r2
 80051ea:	4618      	mov	r0, r3
 80051ec:	4621      	mov	r1, r4
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f04f 0400 	mov.w	r4, #0
 80051f4:	461a      	mov	r2, r3
 80051f6:	4623      	mov	r3, r4
 80051f8:	f7fb fd66 	bl	8000cc8 <__aeabi_uldivmod>
 80051fc:	4603      	mov	r3, r0
 80051fe:	460c      	mov	r4, r1
 8005200:	60fb      	str	r3, [r7, #12]
 8005202:	e049      	b.n	8005298 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005204:	4b2f      	ldr	r3, [pc, #188]	; (80052c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	099b      	lsrs	r3, r3, #6
 800520a:	f04f 0400 	mov.w	r4, #0
 800520e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005212:	f04f 0200 	mov.w	r2, #0
 8005216:	ea03 0501 	and.w	r5, r3, r1
 800521a:	ea04 0602 	and.w	r6, r4, r2
 800521e:	4629      	mov	r1, r5
 8005220:	4632      	mov	r2, r6
 8005222:	f04f 0300 	mov.w	r3, #0
 8005226:	f04f 0400 	mov.w	r4, #0
 800522a:	0154      	lsls	r4, r2, #5
 800522c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005230:	014b      	lsls	r3, r1, #5
 8005232:	4619      	mov	r1, r3
 8005234:	4622      	mov	r2, r4
 8005236:	1b49      	subs	r1, r1, r5
 8005238:	eb62 0206 	sbc.w	r2, r2, r6
 800523c:	f04f 0300 	mov.w	r3, #0
 8005240:	f04f 0400 	mov.w	r4, #0
 8005244:	0194      	lsls	r4, r2, #6
 8005246:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800524a:	018b      	lsls	r3, r1, #6
 800524c:	1a5b      	subs	r3, r3, r1
 800524e:	eb64 0402 	sbc.w	r4, r4, r2
 8005252:	f04f 0100 	mov.w	r1, #0
 8005256:	f04f 0200 	mov.w	r2, #0
 800525a:	00e2      	lsls	r2, r4, #3
 800525c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005260:	00d9      	lsls	r1, r3, #3
 8005262:	460b      	mov	r3, r1
 8005264:	4614      	mov	r4, r2
 8005266:	195b      	adds	r3, r3, r5
 8005268:	eb44 0406 	adc.w	r4, r4, r6
 800526c:	f04f 0100 	mov.w	r1, #0
 8005270:	f04f 0200 	mov.w	r2, #0
 8005274:	02a2      	lsls	r2, r4, #10
 8005276:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800527a:	0299      	lsls	r1, r3, #10
 800527c:	460b      	mov	r3, r1
 800527e:	4614      	mov	r4, r2
 8005280:	4618      	mov	r0, r3
 8005282:	4621      	mov	r1, r4
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f04f 0400 	mov.w	r4, #0
 800528a:	461a      	mov	r2, r3
 800528c:	4623      	mov	r3, r4
 800528e:	f7fb fd1b 	bl	8000cc8 <__aeabi_uldivmod>
 8005292:	4603      	mov	r3, r0
 8005294:	460c      	mov	r4, r1
 8005296:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8005298:	4b0a      	ldr	r3, [pc, #40]	; (80052c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	0c1b      	lsrs	r3, r3, #16
 800529e:	f003 0303 	and.w	r3, r3, #3
 80052a2:	3301      	adds	r3, #1
 80052a4:	005b      	lsls	r3, r3, #1
 80052a6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80052b0:	60bb      	str	r3, [r7, #8]
      break;
 80052b2:	e002      	b.n	80052ba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80052b4:	4b04      	ldr	r3, [pc, #16]	; (80052c8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80052b6:	60bb      	str	r3, [r7, #8]
      break;
 80052b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052ba:	68bb      	ldr	r3, [r7, #8]
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3714      	adds	r7, #20
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052c4:	40023800 	.word	0x40023800
 80052c8:	00f42400 	.word	0x00f42400
 80052cc:	007a1200 	.word	0x007a1200

080052d0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052d0:	b480      	push	{r7}
 80052d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052d4:	4b03      	ldr	r3, [pc, #12]	; (80052e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80052d6:	681b      	ldr	r3, [r3, #0]
}
 80052d8:	4618      	mov	r0, r3
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	20000000 	.word	0x20000000

080052e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80052ec:	f7ff fff0 	bl	80052d0 <HAL_RCC_GetHCLKFreq>
 80052f0:	4601      	mov	r1, r0
 80052f2:	4b05      	ldr	r3, [pc, #20]	; (8005308 <HAL_RCC_GetPCLK1Freq+0x20>)
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	0a9b      	lsrs	r3, r3, #10
 80052f8:	f003 0307 	and.w	r3, r3, #7
 80052fc:	4a03      	ldr	r2, [pc, #12]	; (800530c <HAL_RCC_GetPCLK1Freq+0x24>)
 80052fe:	5cd3      	ldrb	r3, [r2, r3]
 8005300:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005304:	4618      	mov	r0, r3
 8005306:	bd80      	pop	{r7, pc}
 8005308:	40023800 	.word	0x40023800
 800530c:	0800b834 	.word	0x0800b834

08005310 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005314:	f7ff ffdc 	bl	80052d0 <HAL_RCC_GetHCLKFreq>
 8005318:	4601      	mov	r1, r0
 800531a:	4b05      	ldr	r3, [pc, #20]	; (8005330 <HAL_RCC_GetPCLK2Freq+0x20>)
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	0b5b      	lsrs	r3, r3, #13
 8005320:	f003 0307 	and.w	r3, r3, #7
 8005324:	4a03      	ldr	r2, [pc, #12]	; (8005334 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005326:	5cd3      	ldrb	r3, [r2, r3]
 8005328:	fa21 f303 	lsr.w	r3, r1, r3
}
 800532c:	4618      	mov	r0, r3
 800532e:	bd80      	pop	{r7, pc}
 8005330:	40023800 	.word	0x40023800
 8005334:	0800b834 	.word	0x0800b834

08005338 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b088      	sub	sp, #32
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005340:	2300      	movs	r3, #0
 8005342:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005344:	2300      	movs	r3, #0
 8005346:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005348:	2300      	movs	r3, #0
 800534a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800534c:	2300      	movs	r3, #0
 800534e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005350:	2300      	movs	r3, #0
 8005352:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 0301 	and.w	r3, r3, #1
 800535c:	2b00      	cmp	r3, #0
 800535e:	d012      	beq.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005360:	4b69      	ldr	r3, [pc, #420]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	4a68      	ldr	r2, [pc, #416]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005366:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800536a:	6093      	str	r3, [r2, #8]
 800536c:	4b66      	ldr	r3, [pc, #408]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800536e:	689a      	ldr	r2, [r3, #8]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005374:	4964      	ldr	r1, [pc, #400]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005376:	4313      	orrs	r3, r2
 8005378:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800537e:	2b00      	cmp	r3, #0
 8005380:	d101      	bne.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005382:	2301      	movs	r3, #1
 8005384:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d017      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005392:	4b5d      	ldr	r3, [pc, #372]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005394:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005398:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053a0:	4959      	ldr	r1, [pc, #356]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053a2:	4313      	orrs	r3, r2
 80053a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053b0:	d101      	bne.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80053b2:	2301      	movs	r3, #1
 80053b4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d101      	bne.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80053be:	2301      	movs	r3, #1
 80053c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d017      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80053ce:	4b4e      	ldr	r3, [pc, #312]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053dc:	494a      	ldr	r1, [pc, #296]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053de:	4313      	orrs	r3, r2
 80053e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053ec:	d101      	bne.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80053ee:	2301      	movs	r3, #1
 80053f0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d101      	bne.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80053fa:	2301      	movs	r3, #1
 80053fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005406:	2b00      	cmp	r3, #0
 8005408:	d001      	beq.n	800540e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800540a:	2301      	movs	r3, #1
 800540c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0320 	and.w	r3, r3, #32
 8005416:	2b00      	cmp	r3, #0
 8005418:	f000 808b 	beq.w	8005532 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800541c:	4b3a      	ldr	r3, [pc, #232]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800541e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005420:	4a39      	ldr	r2, [pc, #228]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005422:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005426:	6413      	str	r3, [r2, #64]	; 0x40
 8005428:	4b37      	ldr	r3, [pc, #220]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800542a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005430:	60bb      	str	r3, [r7, #8]
 8005432:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005434:	4b35      	ldr	r3, [pc, #212]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a34      	ldr	r2, [pc, #208]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800543a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800543e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005440:	f7fd f83a 	bl	80024b8 <HAL_GetTick>
 8005444:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005446:	e008      	b.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005448:	f7fd f836 	bl	80024b8 <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	2b64      	cmp	r3, #100	; 0x64
 8005454:	d901      	bls.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e355      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800545a:	4b2c      	ldr	r3, [pc, #176]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005462:	2b00      	cmp	r3, #0
 8005464:	d0f0      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005466:	4b28      	ldr	r3, [pc, #160]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800546a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800546e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d035      	beq.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800547a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800547e:	693a      	ldr	r2, [r7, #16]
 8005480:	429a      	cmp	r2, r3
 8005482:	d02e      	beq.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005484:	4b20      	ldr	r3, [pc, #128]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005488:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800548c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800548e:	4b1e      	ldr	r3, [pc, #120]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005492:	4a1d      	ldr	r2, [pc, #116]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005498:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800549a:	4b1b      	ldr	r3, [pc, #108]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800549c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800549e:	4a1a      	ldr	r2, [pc, #104]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054a4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80054a6:	4a18      	ldr	r2, [pc, #96]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80054ac:	4b16      	ldr	r3, [pc, #88]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054b0:	f003 0301 	and.w	r3, r3, #1
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d114      	bne.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054b8:	f7fc fffe 	bl	80024b8 <HAL_GetTick>
 80054bc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054be:	e00a      	b.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054c0:	f7fc fffa 	bl	80024b8 <HAL_GetTick>
 80054c4:	4602      	mov	r2, r0
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	1ad3      	subs	r3, r2, r3
 80054ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d901      	bls.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80054d2:	2303      	movs	r3, #3
 80054d4:	e317      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054d6:	4b0c      	ldr	r3, [pc, #48]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054da:	f003 0302 	and.w	r3, r3, #2
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d0ee      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054ee:	d111      	bne.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80054f0:	4b05      	ldr	r3, [pc, #20]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80054fc:	4b04      	ldr	r3, [pc, #16]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80054fe:	400b      	ands	r3, r1
 8005500:	4901      	ldr	r1, [pc, #4]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005502:	4313      	orrs	r3, r2
 8005504:	608b      	str	r3, [r1, #8]
 8005506:	e00b      	b.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005508:	40023800 	.word	0x40023800
 800550c:	40007000 	.word	0x40007000
 8005510:	0ffffcff 	.word	0x0ffffcff
 8005514:	4bb0      	ldr	r3, [pc, #704]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	4aaf      	ldr	r2, [pc, #700]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800551a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800551e:	6093      	str	r3, [r2, #8]
 8005520:	4bad      	ldr	r3, [pc, #692]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005522:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005528:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800552c:	49aa      	ldr	r1, [pc, #680]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800552e:	4313      	orrs	r3, r2
 8005530:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 0310 	and.w	r3, r3, #16
 800553a:	2b00      	cmp	r3, #0
 800553c:	d010      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800553e:	4ba6      	ldr	r3, [pc, #664]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005540:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005544:	4aa4      	ldr	r2, [pc, #656]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005546:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800554a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800554e:	4ba2      	ldr	r3, [pc, #648]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005550:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005558:	499f      	ldr	r1, [pc, #636]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800555a:	4313      	orrs	r3, r2
 800555c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005568:	2b00      	cmp	r3, #0
 800556a:	d00a      	beq.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800556c:	4b9a      	ldr	r3, [pc, #616]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800556e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005572:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800557a:	4997      	ldr	r1, [pc, #604]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800557c:	4313      	orrs	r3, r2
 800557e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800558a:	2b00      	cmp	r3, #0
 800558c:	d00a      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800558e:	4b92      	ldr	r3, [pc, #584]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005594:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800559c:	498e      	ldr	r1, [pc, #568]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800559e:	4313      	orrs	r3, r2
 80055a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d00a      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80055b0:	4b89      	ldr	r3, [pc, #548]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80055b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055be:	4986      	ldr	r1, [pc, #536]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80055c0:	4313      	orrs	r3, r2
 80055c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00a      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80055d2:	4b81      	ldr	r3, [pc, #516]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80055d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055d8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055e0:	497d      	ldr	r1, [pc, #500]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80055e2:	4313      	orrs	r3, r2
 80055e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d00a      	beq.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80055f4:	4b78      	ldr	r3, [pc, #480]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80055f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055fa:	f023 0203 	bic.w	r2, r3, #3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005602:	4975      	ldr	r1, [pc, #468]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005604:	4313      	orrs	r3, r2
 8005606:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005612:	2b00      	cmp	r3, #0
 8005614:	d00a      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005616:	4b70      	ldr	r3, [pc, #448]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800561c:	f023 020c 	bic.w	r2, r3, #12
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005624:	496c      	ldr	r1, [pc, #432]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005626:	4313      	orrs	r3, r2
 8005628:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005634:	2b00      	cmp	r3, #0
 8005636:	d00a      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005638:	4b67      	ldr	r3, [pc, #412]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800563a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800563e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005646:	4964      	ldr	r1, [pc, #400]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005648:	4313      	orrs	r3, r2
 800564a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005656:	2b00      	cmp	r3, #0
 8005658:	d00a      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800565a:	4b5f      	ldr	r3, [pc, #380]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800565c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005660:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005668:	495b      	ldr	r1, [pc, #364]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800566a:	4313      	orrs	r3, r2
 800566c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005678:	2b00      	cmp	r3, #0
 800567a:	d00a      	beq.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800567c:	4b56      	ldr	r3, [pc, #344]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800567e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005682:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800568a:	4953      	ldr	r1, [pc, #332]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800568c:	4313      	orrs	r3, r2
 800568e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800569a:	2b00      	cmp	r3, #0
 800569c:	d00a      	beq.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800569e:	4b4e      	ldr	r3, [pc, #312]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80056a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056a4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ac:	494a      	ldr	r1, [pc, #296]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80056ae:	4313      	orrs	r3, r2
 80056b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d00a      	beq.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80056c0:	4b45      	ldr	r3, [pc, #276]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80056c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056c6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056ce:	4942      	ldr	r1, [pc, #264]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80056d0:	4313      	orrs	r3, r2
 80056d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d00a      	beq.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80056e2:	4b3d      	ldr	r3, [pc, #244]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80056e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056f0:	4939      	ldr	r1, [pc, #228]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80056f2:	4313      	orrs	r3, r2
 80056f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005700:	2b00      	cmp	r3, #0
 8005702:	d00a      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005704:	4b34      	ldr	r3, [pc, #208]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800570a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005712:	4931      	ldr	r1, [pc, #196]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005714:	4313      	orrs	r3, r2
 8005716:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005722:	2b00      	cmp	r3, #0
 8005724:	d011      	beq.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005726:	4b2c      	ldr	r3, [pc, #176]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800572c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005734:	4928      	ldr	r1, [pc, #160]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005736:	4313      	orrs	r3, r2
 8005738:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005740:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005744:	d101      	bne.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005746:	2301      	movs	r3, #1
 8005748:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 0308 	and.w	r3, r3, #8
 8005752:	2b00      	cmp	r3, #0
 8005754:	d001      	beq.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005756:	2301      	movs	r3, #1
 8005758:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d00a      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005766:	4b1c      	ldr	r3, [pc, #112]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800576c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005774:	4918      	ldr	r1, [pc, #96]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005776:	4313      	orrs	r3, r2
 8005778:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005784:	2b00      	cmp	r3, #0
 8005786:	d00b      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005788:	4b13      	ldr	r3, [pc, #76]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800578a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800578e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005798:	490f      	ldr	r1, [pc, #60]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800579a:	4313      	orrs	r3, r2
 800579c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d005      	beq.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80057ae:	f040 80d8 	bne.w	8005962 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80057b2:	4b09      	ldr	r3, [pc, #36]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a08      	ldr	r2, [pc, #32]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80057b8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80057bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057be:	f7fc fe7b 	bl	80024b8 <HAL_GetTick>
 80057c2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80057c4:	e00a      	b.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80057c6:	f7fc fe77 	bl	80024b8 <HAL_GetTick>
 80057ca:	4602      	mov	r2, r0
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	1ad3      	subs	r3, r2, r3
 80057d0:	2b64      	cmp	r3, #100	; 0x64
 80057d2:	d903      	bls.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057d4:	2303      	movs	r3, #3
 80057d6:	e196      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80057d8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80057dc:	4b6c      	ldr	r3, [pc, #432]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d1ee      	bne.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 0301 	and.w	r3, r3, #1
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d021      	beq.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x500>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d11d      	bne.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80057fc:	4b64      	ldr	r3, [pc, #400]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80057fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005802:	0c1b      	lsrs	r3, r3, #16
 8005804:	f003 0303 	and.w	r3, r3, #3
 8005808:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800580a:	4b61      	ldr	r3, [pc, #388]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800580c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005810:	0e1b      	lsrs	r3, r3, #24
 8005812:	f003 030f 	and.w	r3, r3, #15
 8005816:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	019a      	lsls	r2, r3, #6
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	041b      	lsls	r3, r3, #16
 8005822:	431a      	orrs	r2, r3
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	061b      	lsls	r3, r3, #24
 8005828:	431a      	orrs	r2, r3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	071b      	lsls	r3, r3, #28
 8005830:	4957      	ldr	r1, [pc, #348]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005832:	4313      	orrs	r3, r2
 8005834:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005840:	2b00      	cmp	r3, #0
 8005842:	d004      	beq.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x516>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005848:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800584c:	d00a      	beq.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005856:	2b00      	cmp	r3, #0
 8005858:	d02e      	beq.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005862:	d129      	bne.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005864:	4b4a      	ldr	r3, [pc, #296]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005866:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800586a:	0c1b      	lsrs	r3, r3, #16
 800586c:	f003 0303 	and.w	r3, r3, #3
 8005870:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005872:	4b47      	ldr	r3, [pc, #284]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005874:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005878:	0f1b      	lsrs	r3, r3, #28
 800587a:	f003 0307 	and.w	r3, r3, #7
 800587e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	019a      	lsls	r2, r3, #6
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	041b      	lsls	r3, r3, #16
 800588a:	431a      	orrs	r2, r3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	061b      	lsls	r3, r3, #24
 8005892:	431a      	orrs	r2, r3
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	071b      	lsls	r3, r3, #28
 8005898:	493d      	ldr	r1, [pc, #244]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800589a:	4313      	orrs	r3, r2
 800589c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80058a0:	4b3b      	ldr	r3, [pc, #236]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80058a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058a6:	f023 021f 	bic.w	r2, r3, #31
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ae:	3b01      	subs	r3, #1
 80058b0:	4937      	ldr	r1, [pc, #220]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80058b2:	4313      	orrs	r3, r2
 80058b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d01d      	beq.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80058c4:	4b32      	ldr	r3, [pc, #200]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80058c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058ca:	0e1b      	lsrs	r3, r3, #24
 80058cc:	f003 030f 	and.w	r3, r3, #15
 80058d0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80058d2:	4b2f      	ldr	r3, [pc, #188]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80058d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058d8:	0f1b      	lsrs	r3, r3, #28
 80058da:	f003 0307 	and.w	r3, r3, #7
 80058de:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	019a      	lsls	r2, r3, #6
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	041b      	lsls	r3, r3, #16
 80058ec:	431a      	orrs	r2, r3
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	061b      	lsls	r3, r3, #24
 80058f2:	431a      	orrs	r2, r3
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	071b      	lsls	r3, r3, #28
 80058f8:	4925      	ldr	r1, [pc, #148]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80058fa:	4313      	orrs	r3, r2
 80058fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005908:	2b00      	cmp	r3, #0
 800590a:	d011      	beq.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	019a      	lsls	r2, r3, #6
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	041b      	lsls	r3, r3, #16
 8005918:	431a      	orrs	r2, r3
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	061b      	lsls	r3, r3, #24
 8005920:	431a      	orrs	r2, r3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	071b      	lsls	r3, r3, #28
 8005928:	4919      	ldr	r1, [pc, #100]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800592a:	4313      	orrs	r3, r2
 800592c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005930:	4b17      	ldr	r3, [pc, #92]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a16      	ldr	r2, [pc, #88]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005936:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800593a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800593c:	f7fc fdbc 	bl	80024b8 <HAL_GetTick>
 8005940:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005942:	e008      	b.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005944:	f7fc fdb8 	bl	80024b8 <HAL_GetTick>
 8005948:	4602      	mov	r2, r0
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	2b64      	cmp	r3, #100	; 0x64
 8005950:	d901      	bls.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005952:	2303      	movs	r3, #3
 8005954:	e0d7      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005956:	4b0e      	ldr	r3, [pc, #56]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800595e:	2b00      	cmp	r3, #0
 8005960:	d0f0      	beq.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	2b01      	cmp	r3, #1
 8005966:	f040 80cd 	bne.w	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800596a:	4b09      	ldr	r3, [pc, #36]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a08      	ldr	r2, [pc, #32]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005970:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005974:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005976:	f7fc fd9f 	bl	80024b8 <HAL_GetTick>
 800597a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800597c:	e00a      	b.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800597e:	f7fc fd9b 	bl	80024b8 <HAL_GetTick>
 8005982:	4602      	mov	r2, r0
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	2b64      	cmp	r3, #100	; 0x64
 800598a:	d903      	bls.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800598c:	2303      	movs	r3, #3
 800598e:	e0ba      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8005990:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005994:	4b5e      	ldr	r3, [pc, #376]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800599c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059a0:	d0ed      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d003      	beq.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d009      	beq.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d02e      	beq.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d12a      	bne.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80059ca:	4b51      	ldr	r3, [pc, #324]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80059cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059d0:	0c1b      	lsrs	r3, r3, #16
 80059d2:	f003 0303 	and.w	r3, r3, #3
 80059d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80059d8:	4b4d      	ldr	r3, [pc, #308]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80059da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059de:	0f1b      	lsrs	r3, r3, #28
 80059e0:	f003 0307 	and.w	r3, r3, #7
 80059e4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	695b      	ldr	r3, [r3, #20]
 80059ea:	019a      	lsls	r2, r3, #6
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	041b      	lsls	r3, r3, #16
 80059f0:	431a      	orrs	r2, r3
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	699b      	ldr	r3, [r3, #24]
 80059f6:	061b      	lsls	r3, r3, #24
 80059f8:	431a      	orrs	r2, r3
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	071b      	lsls	r3, r3, #28
 80059fe:	4944      	ldr	r1, [pc, #272]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005a00:	4313      	orrs	r3, r2
 8005a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005a06:	4b42      	ldr	r3, [pc, #264]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005a08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a0c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a14:	3b01      	subs	r3, #1
 8005a16:	021b      	lsls	r3, r3, #8
 8005a18:	493d      	ldr	r1, [pc, #244]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d022      	beq.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a34:	d11d      	bne.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005a36:	4b36      	ldr	r3, [pc, #216]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a3c:	0e1b      	lsrs	r3, r3, #24
 8005a3e:	f003 030f 	and.w	r3, r3, #15
 8005a42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005a44:	4b32      	ldr	r3, [pc, #200]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a4a:	0f1b      	lsrs	r3, r3, #28
 8005a4c:	f003 0307 	and.w	r3, r3, #7
 8005a50:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	695b      	ldr	r3, [r3, #20]
 8005a56:	019a      	lsls	r2, r3, #6
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a1b      	ldr	r3, [r3, #32]
 8005a5c:	041b      	lsls	r3, r3, #16
 8005a5e:	431a      	orrs	r2, r3
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	061b      	lsls	r3, r3, #24
 8005a64:	431a      	orrs	r2, r3
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	071b      	lsls	r3, r3, #28
 8005a6a:	4929      	ldr	r1, [pc, #164]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 0308 	and.w	r3, r3, #8
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d028      	beq.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005a7e:	4b24      	ldr	r3, [pc, #144]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a84:	0e1b      	lsrs	r3, r3, #24
 8005a86:	f003 030f 	and.w	r3, r3, #15
 8005a8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005a8c:	4b20      	ldr	r3, [pc, #128]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a92:	0c1b      	lsrs	r3, r3, #16
 8005a94:	f003 0303 	and.w	r3, r3, #3
 8005a98:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	695b      	ldr	r3, [r3, #20]
 8005a9e:	019a      	lsls	r2, r3, #6
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	041b      	lsls	r3, r3, #16
 8005aa4:	431a      	orrs	r2, r3
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	061b      	lsls	r3, r3, #24
 8005aaa:	431a      	orrs	r2, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	69db      	ldr	r3, [r3, #28]
 8005ab0:	071b      	lsls	r3, r3, #28
 8005ab2:	4917      	ldr	r1, [pc, #92]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005aba:	4b15      	ldr	r3, [pc, #84]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005abc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ac0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac8:	4911      	ldr	r1, [pc, #68]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005aca:	4313      	orrs	r3, r2
 8005acc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005ad0:	4b0f      	ldr	r3, [pc, #60]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a0e      	ldr	r2, [pc, #56]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005ad6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ada:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005adc:	f7fc fcec 	bl	80024b8 <HAL_GetTick>
 8005ae0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005ae2:	e008      	b.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005ae4:	f7fc fce8 	bl	80024b8 <HAL_GetTick>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	1ad3      	subs	r3, r2, r3
 8005aee:	2b64      	cmp	r3, #100	; 0x64
 8005af0:	d901      	bls.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	e007      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005af6:	4b06      	ldr	r3, [pc, #24]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005afe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b02:	d1ef      	bne.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3720      	adds	r7, #32
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	bf00      	nop
 8005b10:	40023800 	.word	0x40023800

08005b14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d101      	bne.n	8005b26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e01d      	b.n	8005b62 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d106      	bne.n	8005b40 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f7fc fade 	bl	80020fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2202      	movs	r2, #2
 8005b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	3304      	adds	r3, #4
 8005b50:	4619      	mov	r1, r3
 8005b52:	4610      	mov	r0, r2
 8005b54:	f000 fab8 	bl	80060c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3708      	adds	r7, #8
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
	...

08005b6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b084      	sub	sp, #16
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	6839      	ldr	r1, [r7, #0]
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f000 fda0 	bl	80066c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a17      	ldr	r2, [pc, #92]	; (8005be8 <HAL_TIM_PWM_Start+0x7c>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d004      	beq.n	8005b98 <HAL_TIM_PWM_Start+0x2c>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a16      	ldr	r2, [pc, #88]	; (8005bec <HAL_TIM_PWM_Start+0x80>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d101      	bne.n	8005b9c <HAL_TIM_PWM_Start+0x30>
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e000      	b.n	8005b9e <HAL_TIM_PWM_Start+0x32>
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d007      	beq.n	8005bb2 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005bb0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	689a      	ldr	r2, [r3, #8]
 8005bb8:	4b0d      	ldr	r3, [pc, #52]	; (8005bf0 <HAL_TIM_PWM_Start+0x84>)
 8005bba:	4013      	ands	r3, r2
 8005bbc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2b06      	cmp	r3, #6
 8005bc2:	d00b      	beq.n	8005bdc <HAL_TIM_PWM_Start+0x70>
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bca:	d007      	beq.n	8005bdc <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f042 0201 	orr.w	r2, r2, #1
 8005bda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3710      	adds	r7, #16
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	40010000 	.word	0x40010000
 8005bec:	40010400 	.word	0x40010400
 8005bf0:	00010007 	.word	0x00010007

08005bf4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b082      	sub	sp, #8
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	f003 0302 	and.w	r3, r3, #2
 8005c06:	2b02      	cmp	r3, #2
 8005c08:	d122      	bne.n	8005c50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	f003 0302 	and.w	r3, r3, #2
 8005c14:	2b02      	cmp	r3, #2
 8005c16:	d11b      	bne.n	8005c50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f06f 0202 	mvn.w	r2, #2
 8005c20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2201      	movs	r2, #1
 8005c26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	699b      	ldr	r3, [r3, #24]
 8005c2e:	f003 0303 	and.w	r3, r3, #3
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d003      	beq.n	8005c3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f000 fa28 	bl	800608c <HAL_TIM_IC_CaptureCallback>
 8005c3c:	e005      	b.n	8005c4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f000 fa1a 	bl	8006078 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f000 fa2b 	bl	80060a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	691b      	ldr	r3, [r3, #16]
 8005c56:	f003 0304 	and.w	r3, r3, #4
 8005c5a:	2b04      	cmp	r3, #4
 8005c5c:	d122      	bne.n	8005ca4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	f003 0304 	and.w	r3, r3, #4
 8005c68:	2b04      	cmp	r3, #4
 8005c6a:	d11b      	bne.n	8005ca4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f06f 0204 	mvn.w	r2, #4
 8005c74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2202      	movs	r2, #2
 8005c7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	699b      	ldr	r3, [r3, #24]
 8005c82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d003      	beq.n	8005c92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 f9fe 	bl	800608c <HAL_TIM_IC_CaptureCallback>
 8005c90:	e005      	b.n	8005c9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 f9f0 	bl	8006078 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f000 fa01 	bl	80060a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	691b      	ldr	r3, [r3, #16]
 8005caa:	f003 0308 	and.w	r3, r3, #8
 8005cae:	2b08      	cmp	r3, #8
 8005cb0:	d122      	bne.n	8005cf8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	f003 0308 	and.w	r3, r3, #8
 8005cbc:	2b08      	cmp	r3, #8
 8005cbe:	d11b      	bne.n	8005cf8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f06f 0208 	mvn.w	r2, #8
 8005cc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2204      	movs	r2, #4
 8005cce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	69db      	ldr	r3, [r3, #28]
 8005cd6:	f003 0303 	and.w	r3, r3, #3
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d003      	beq.n	8005ce6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 f9d4 	bl	800608c <HAL_TIM_IC_CaptureCallback>
 8005ce4:	e005      	b.n	8005cf2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 f9c6 	bl	8006078 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f000 f9d7 	bl	80060a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	691b      	ldr	r3, [r3, #16]
 8005cfe:	f003 0310 	and.w	r3, r3, #16
 8005d02:	2b10      	cmp	r3, #16
 8005d04:	d122      	bne.n	8005d4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	f003 0310 	and.w	r3, r3, #16
 8005d10:	2b10      	cmp	r3, #16
 8005d12:	d11b      	bne.n	8005d4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f06f 0210 	mvn.w	r2, #16
 8005d1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2208      	movs	r2, #8
 8005d22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	69db      	ldr	r3, [r3, #28]
 8005d2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d003      	beq.n	8005d3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 f9aa 	bl	800608c <HAL_TIM_IC_CaptureCallback>
 8005d38:	e005      	b.n	8005d46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 f99c 	bl	8006078 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f000 f9ad 	bl	80060a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	f003 0301 	and.w	r3, r3, #1
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d10e      	bne.n	8005d78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	f003 0301 	and.w	r3, r3, #1
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d107      	bne.n	8005d78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f06f 0201 	mvn.w	r2, #1
 8005d70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 f976 	bl	8006064 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	691b      	ldr	r3, [r3, #16]
 8005d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d82:	2b80      	cmp	r3, #128	; 0x80
 8005d84:	d10e      	bne.n	8005da4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d90:	2b80      	cmp	r3, #128	; 0x80
 8005d92:	d107      	bne.n	8005da4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 fd1c 	bl	80067dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005db2:	d10e      	bne.n	8005dd2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dbe:	2b80      	cmp	r3, #128	; 0x80
 8005dc0:	d107      	bne.n	8005dd2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005dca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f000 fd0f 	bl	80067f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ddc:	2b40      	cmp	r3, #64	; 0x40
 8005dde:	d10e      	bne.n	8005dfe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dea:	2b40      	cmp	r3, #64	; 0x40
 8005dec:	d107      	bne.n	8005dfe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005df6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f000 f95b 	bl	80060b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	691b      	ldr	r3, [r3, #16]
 8005e04:	f003 0320 	and.w	r3, r3, #32
 8005e08:	2b20      	cmp	r3, #32
 8005e0a:	d10e      	bne.n	8005e2a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	f003 0320 	and.w	r3, r3, #32
 8005e16:	2b20      	cmp	r3, #32
 8005e18:	d107      	bne.n	8005e2a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f06f 0220 	mvn.w	r2, #32
 8005e22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 fccf 	bl	80067c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e2a:	bf00      	nop
 8005e2c:	3708      	adds	r7, #8
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
	...

08005e34 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d101      	bne.n	8005e4e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005e4a:	2302      	movs	r3, #2
 8005e4c:	e105      	b.n	800605a <HAL_TIM_PWM_ConfigChannel+0x226>
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2201      	movs	r2, #1
 8005e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2202      	movs	r2, #2
 8005e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2b14      	cmp	r3, #20
 8005e62:	f200 80f0 	bhi.w	8006046 <HAL_TIM_PWM_ConfigChannel+0x212>
 8005e66:	a201      	add	r2, pc, #4	; (adr r2, 8005e6c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e6c:	08005ec1 	.word	0x08005ec1
 8005e70:	08006047 	.word	0x08006047
 8005e74:	08006047 	.word	0x08006047
 8005e78:	08006047 	.word	0x08006047
 8005e7c:	08005f01 	.word	0x08005f01
 8005e80:	08006047 	.word	0x08006047
 8005e84:	08006047 	.word	0x08006047
 8005e88:	08006047 	.word	0x08006047
 8005e8c:	08005f43 	.word	0x08005f43
 8005e90:	08006047 	.word	0x08006047
 8005e94:	08006047 	.word	0x08006047
 8005e98:	08006047 	.word	0x08006047
 8005e9c:	08005f83 	.word	0x08005f83
 8005ea0:	08006047 	.word	0x08006047
 8005ea4:	08006047 	.word	0x08006047
 8005ea8:	08006047 	.word	0x08006047
 8005eac:	08005fc5 	.word	0x08005fc5
 8005eb0:	08006047 	.word	0x08006047
 8005eb4:	08006047 	.word	0x08006047
 8005eb8:	08006047 	.word	0x08006047
 8005ebc:	08006005 	.word	0x08006005
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	68b9      	ldr	r1, [r7, #8]
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f000 f99e 	bl	8006208 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	699a      	ldr	r2, [r3, #24]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f042 0208 	orr.w	r2, r2, #8
 8005eda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	699a      	ldr	r2, [r3, #24]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f022 0204 	bic.w	r2, r2, #4
 8005eea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	6999      	ldr	r1, [r3, #24]
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	691a      	ldr	r2, [r3, #16]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	430a      	orrs	r2, r1
 8005efc:	619a      	str	r2, [r3, #24]
      break;
 8005efe:	e0a3      	b.n	8006048 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	68b9      	ldr	r1, [r7, #8]
 8005f06:	4618      	mov	r0, r3
 8005f08:	f000 f9f0 	bl	80062ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	699a      	ldr	r2, [r3, #24]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	699a      	ldr	r2, [r3, #24]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	6999      	ldr	r1, [r3, #24]
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	021a      	lsls	r2, r3, #8
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	430a      	orrs	r2, r1
 8005f3e:	619a      	str	r2, [r3, #24]
      break;
 8005f40:	e082      	b.n	8006048 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	68b9      	ldr	r1, [r7, #8]
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f000 fa47 	bl	80063dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	69da      	ldr	r2, [r3, #28]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f042 0208 	orr.w	r2, r2, #8
 8005f5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	69da      	ldr	r2, [r3, #28]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f022 0204 	bic.w	r2, r2, #4
 8005f6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	69d9      	ldr	r1, [r3, #28]
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	691a      	ldr	r2, [r3, #16]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	430a      	orrs	r2, r1
 8005f7e:	61da      	str	r2, [r3, #28]
      break;
 8005f80:	e062      	b.n	8006048 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	68b9      	ldr	r1, [r7, #8]
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f000 fa9d 	bl	80064c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	69da      	ldr	r2, [r3, #28]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	69da      	ldr	r2, [r3, #28]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	69d9      	ldr	r1, [r3, #28]
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	691b      	ldr	r3, [r3, #16]
 8005fb8:	021a      	lsls	r2, r3, #8
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	430a      	orrs	r2, r1
 8005fc0:	61da      	str	r2, [r3, #28]
      break;
 8005fc2:	e041      	b.n	8006048 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	68b9      	ldr	r1, [r7, #8]
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f000 fad4 	bl	8006578 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f042 0208 	orr.w	r2, r2, #8
 8005fde:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f022 0204 	bic.w	r2, r2, #4
 8005fee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	691a      	ldr	r2, [r3, #16]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	430a      	orrs	r2, r1
 8006000:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006002:	e021      	b.n	8006048 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	68b9      	ldr	r1, [r7, #8]
 800600a:	4618      	mov	r0, r3
 800600c:	f000 fb06 	bl	800661c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800601e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800602e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	021a      	lsls	r2, r3, #8
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	430a      	orrs	r2, r1
 8006042:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006044:	e000      	b.n	8006048 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8006046:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2200      	movs	r2, #0
 8006054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006058:	2300      	movs	r3, #0
}
 800605a:	4618      	mov	r0, r3
 800605c:	3710      	adds	r7, #16
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
 8006062:	bf00      	nop

08006064 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006064:	b480      	push	{r7}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800606c:	bf00      	nop
 800606e:	370c      	adds	r7, #12
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006080:	bf00      	nop
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006094:	bf00      	nop
 8006096:	370c      	adds	r7, #12
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060a8:	bf00      	nop
 80060aa:	370c      	adds	r7, #12
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060bc:	bf00      	nop
 80060be:	370c      	adds	r7, #12
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr

080060c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b085      	sub	sp, #20
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4a40      	ldr	r2, [pc, #256]	; (80061dc <TIM_Base_SetConfig+0x114>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d013      	beq.n	8006108 <TIM_Base_SetConfig+0x40>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060e6:	d00f      	beq.n	8006108 <TIM_Base_SetConfig+0x40>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	4a3d      	ldr	r2, [pc, #244]	; (80061e0 <TIM_Base_SetConfig+0x118>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d00b      	beq.n	8006108 <TIM_Base_SetConfig+0x40>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4a3c      	ldr	r2, [pc, #240]	; (80061e4 <TIM_Base_SetConfig+0x11c>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d007      	beq.n	8006108 <TIM_Base_SetConfig+0x40>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	4a3b      	ldr	r2, [pc, #236]	; (80061e8 <TIM_Base_SetConfig+0x120>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d003      	beq.n	8006108 <TIM_Base_SetConfig+0x40>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	4a3a      	ldr	r2, [pc, #232]	; (80061ec <TIM_Base_SetConfig+0x124>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d108      	bne.n	800611a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800610e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	4313      	orrs	r3, r2
 8006118:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4a2f      	ldr	r2, [pc, #188]	; (80061dc <TIM_Base_SetConfig+0x114>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d02b      	beq.n	800617a <TIM_Base_SetConfig+0xb2>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006128:	d027      	beq.n	800617a <TIM_Base_SetConfig+0xb2>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4a2c      	ldr	r2, [pc, #176]	; (80061e0 <TIM_Base_SetConfig+0x118>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d023      	beq.n	800617a <TIM_Base_SetConfig+0xb2>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a2b      	ldr	r2, [pc, #172]	; (80061e4 <TIM_Base_SetConfig+0x11c>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d01f      	beq.n	800617a <TIM_Base_SetConfig+0xb2>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4a2a      	ldr	r2, [pc, #168]	; (80061e8 <TIM_Base_SetConfig+0x120>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d01b      	beq.n	800617a <TIM_Base_SetConfig+0xb2>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a29      	ldr	r2, [pc, #164]	; (80061ec <TIM_Base_SetConfig+0x124>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d017      	beq.n	800617a <TIM_Base_SetConfig+0xb2>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4a28      	ldr	r2, [pc, #160]	; (80061f0 <TIM_Base_SetConfig+0x128>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d013      	beq.n	800617a <TIM_Base_SetConfig+0xb2>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4a27      	ldr	r2, [pc, #156]	; (80061f4 <TIM_Base_SetConfig+0x12c>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d00f      	beq.n	800617a <TIM_Base_SetConfig+0xb2>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a26      	ldr	r2, [pc, #152]	; (80061f8 <TIM_Base_SetConfig+0x130>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d00b      	beq.n	800617a <TIM_Base_SetConfig+0xb2>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a25      	ldr	r2, [pc, #148]	; (80061fc <TIM_Base_SetConfig+0x134>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d007      	beq.n	800617a <TIM_Base_SetConfig+0xb2>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a24      	ldr	r2, [pc, #144]	; (8006200 <TIM_Base_SetConfig+0x138>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d003      	beq.n	800617a <TIM_Base_SetConfig+0xb2>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4a23      	ldr	r2, [pc, #140]	; (8006204 <TIM_Base_SetConfig+0x13c>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d108      	bne.n	800618c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006180:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	68fa      	ldr	r2, [r7, #12]
 8006188:	4313      	orrs	r3, r2
 800618a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	695b      	ldr	r3, [r3, #20]
 8006196:	4313      	orrs	r3, r2
 8006198:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	68fa      	ldr	r2, [r7, #12]
 800619e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	689a      	ldr	r2, [r3, #8]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	4a0a      	ldr	r2, [pc, #40]	; (80061dc <TIM_Base_SetConfig+0x114>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d003      	beq.n	80061c0 <TIM_Base_SetConfig+0xf8>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4a0c      	ldr	r2, [pc, #48]	; (80061ec <TIM_Base_SetConfig+0x124>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d103      	bne.n	80061c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	691a      	ldr	r2, [r3, #16]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	615a      	str	r2, [r3, #20]
}
 80061ce:	bf00      	nop
 80061d0:	3714      	adds	r7, #20
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr
 80061da:	bf00      	nop
 80061dc:	40010000 	.word	0x40010000
 80061e0:	40000400 	.word	0x40000400
 80061e4:	40000800 	.word	0x40000800
 80061e8:	40000c00 	.word	0x40000c00
 80061ec:	40010400 	.word	0x40010400
 80061f0:	40014000 	.word	0x40014000
 80061f4:	40014400 	.word	0x40014400
 80061f8:	40014800 	.word	0x40014800
 80061fc:	40001800 	.word	0x40001800
 8006200:	40001c00 	.word	0x40001c00
 8006204:	40002000 	.word	0x40002000

08006208 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006208:	b480      	push	{r7}
 800620a:	b087      	sub	sp, #28
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6a1b      	ldr	r3, [r3, #32]
 8006216:	f023 0201 	bic.w	r2, r3, #1
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a1b      	ldr	r3, [r3, #32]
 8006222:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	699b      	ldr	r3, [r3, #24]
 800622e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006230:	68fa      	ldr	r2, [r7, #12]
 8006232:	4b2b      	ldr	r3, [pc, #172]	; (80062e0 <TIM_OC1_SetConfig+0xd8>)
 8006234:	4013      	ands	r3, r2
 8006236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f023 0303 	bic.w	r3, r3, #3
 800623e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	68fa      	ldr	r2, [r7, #12]
 8006246:	4313      	orrs	r3, r2
 8006248:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	f023 0302 	bic.w	r3, r3, #2
 8006250:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	697a      	ldr	r2, [r7, #20]
 8006258:	4313      	orrs	r3, r2
 800625a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	4a21      	ldr	r2, [pc, #132]	; (80062e4 <TIM_OC1_SetConfig+0xdc>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d003      	beq.n	800626c <TIM_OC1_SetConfig+0x64>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4a20      	ldr	r2, [pc, #128]	; (80062e8 <TIM_OC1_SetConfig+0xe0>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d10c      	bne.n	8006286 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	f023 0308 	bic.w	r3, r3, #8
 8006272:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	697a      	ldr	r2, [r7, #20]
 800627a:	4313      	orrs	r3, r2
 800627c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	f023 0304 	bic.w	r3, r3, #4
 8006284:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4a16      	ldr	r2, [pc, #88]	; (80062e4 <TIM_OC1_SetConfig+0xdc>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d003      	beq.n	8006296 <TIM_OC1_SetConfig+0x8e>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a15      	ldr	r2, [pc, #84]	; (80062e8 <TIM_OC1_SetConfig+0xe0>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d111      	bne.n	80062ba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800629c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	695b      	ldr	r3, [r3, #20]
 80062aa:	693a      	ldr	r2, [r7, #16]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	699b      	ldr	r3, [r3, #24]
 80062b4:	693a      	ldr	r2, [r7, #16]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	693a      	ldr	r2, [r7, #16]
 80062be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	68fa      	ldr	r2, [r7, #12]
 80062c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	685a      	ldr	r2, [r3, #4]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	697a      	ldr	r2, [r7, #20]
 80062d2:	621a      	str	r2, [r3, #32]
}
 80062d4:	bf00      	nop
 80062d6:	371c      	adds	r7, #28
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr
 80062e0:	fffeff8f 	.word	0xfffeff8f
 80062e4:	40010000 	.word	0x40010000
 80062e8:	40010400 	.word	0x40010400

080062ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b087      	sub	sp, #28
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6a1b      	ldr	r3, [r3, #32]
 80062fa:	f023 0210 	bic.w	r2, r3, #16
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6a1b      	ldr	r3, [r3, #32]
 8006306:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	699b      	ldr	r3, [r3, #24]
 8006312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006314:	68fa      	ldr	r2, [r7, #12]
 8006316:	4b2e      	ldr	r3, [pc, #184]	; (80063d0 <TIM_OC2_SetConfig+0xe4>)
 8006318:	4013      	ands	r3, r2
 800631a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006322:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	021b      	lsls	r3, r3, #8
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	4313      	orrs	r3, r2
 800632e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	f023 0320 	bic.w	r3, r3, #32
 8006336:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	011b      	lsls	r3, r3, #4
 800633e:	697a      	ldr	r2, [r7, #20]
 8006340:	4313      	orrs	r3, r2
 8006342:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a23      	ldr	r2, [pc, #140]	; (80063d4 <TIM_OC2_SetConfig+0xe8>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d003      	beq.n	8006354 <TIM_OC2_SetConfig+0x68>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4a22      	ldr	r2, [pc, #136]	; (80063d8 <TIM_OC2_SetConfig+0xec>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d10d      	bne.n	8006370 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800635a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	011b      	lsls	r3, r3, #4
 8006362:	697a      	ldr	r2, [r7, #20]
 8006364:	4313      	orrs	r3, r2
 8006366:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800636e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	4a18      	ldr	r2, [pc, #96]	; (80063d4 <TIM_OC2_SetConfig+0xe8>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d003      	beq.n	8006380 <TIM_OC2_SetConfig+0x94>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4a17      	ldr	r2, [pc, #92]	; (80063d8 <TIM_OC2_SetConfig+0xec>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d113      	bne.n	80063a8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006386:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800638e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	695b      	ldr	r3, [r3, #20]
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	693a      	ldr	r2, [r7, #16]
 8006398:	4313      	orrs	r3, r2
 800639a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	699b      	ldr	r3, [r3, #24]
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	693a      	ldr	r2, [r7, #16]
 80063a4:	4313      	orrs	r3, r2
 80063a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	693a      	ldr	r2, [r7, #16]
 80063ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	685a      	ldr	r2, [r3, #4]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	697a      	ldr	r2, [r7, #20]
 80063c0:	621a      	str	r2, [r3, #32]
}
 80063c2:	bf00      	nop
 80063c4:	371c      	adds	r7, #28
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr
 80063ce:	bf00      	nop
 80063d0:	feff8fff 	.word	0xfeff8fff
 80063d4:	40010000 	.word	0x40010000
 80063d8:	40010400 	.word	0x40010400

080063dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063dc:	b480      	push	{r7}
 80063de:	b087      	sub	sp, #28
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a1b      	ldr	r3, [r3, #32]
 80063ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a1b      	ldr	r3, [r3, #32]
 80063f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	69db      	ldr	r3, [r3, #28]
 8006402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	4b2d      	ldr	r3, [pc, #180]	; (80064bc <TIM_OC3_SetConfig+0xe0>)
 8006408:	4013      	ands	r3, r2
 800640a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f023 0303 	bic.w	r3, r3, #3
 8006412:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	4313      	orrs	r3, r2
 800641c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006424:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	021b      	lsls	r3, r3, #8
 800642c:	697a      	ldr	r2, [r7, #20]
 800642e:	4313      	orrs	r3, r2
 8006430:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4a22      	ldr	r2, [pc, #136]	; (80064c0 <TIM_OC3_SetConfig+0xe4>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d003      	beq.n	8006442 <TIM_OC3_SetConfig+0x66>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4a21      	ldr	r2, [pc, #132]	; (80064c4 <TIM_OC3_SetConfig+0xe8>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d10d      	bne.n	800645e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006448:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	021b      	lsls	r3, r3, #8
 8006450:	697a      	ldr	r2, [r7, #20]
 8006452:	4313      	orrs	r3, r2
 8006454:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800645c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a17      	ldr	r2, [pc, #92]	; (80064c0 <TIM_OC3_SetConfig+0xe4>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d003      	beq.n	800646e <TIM_OC3_SetConfig+0x92>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4a16      	ldr	r2, [pc, #88]	; (80064c4 <TIM_OC3_SetConfig+0xe8>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d113      	bne.n	8006496 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006474:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800647c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	695b      	ldr	r3, [r3, #20]
 8006482:	011b      	lsls	r3, r3, #4
 8006484:	693a      	ldr	r2, [r7, #16]
 8006486:	4313      	orrs	r3, r2
 8006488:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	699b      	ldr	r3, [r3, #24]
 800648e:	011b      	lsls	r3, r3, #4
 8006490:	693a      	ldr	r2, [r7, #16]
 8006492:	4313      	orrs	r3, r2
 8006494:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	693a      	ldr	r2, [r7, #16]
 800649a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	68fa      	ldr	r2, [r7, #12]
 80064a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	685a      	ldr	r2, [r3, #4]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	697a      	ldr	r2, [r7, #20]
 80064ae:	621a      	str	r2, [r3, #32]
}
 80064b0:	bf00      	nop
 80064b2:	371c      	adds	r7, #28
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr
 80064bc:	fffeff8f 	.word	0xfffeff8f
 80064c0:	40010000 	.word	0x40010000
 80064c4:	40010400 	.word	0x40010400

080064c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b087      	sub	sp, #28
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6a1b      	ldr	r3, [r3, #32]
 80064d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6a1b      	ldr	r3, [r3, #32]
 80064e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	69db      	ldr	r3, [r3, #28]
 80064ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80064f0:	68fa      	ldr	r2, [r7, #12]
 80064f2:	4b1e      	ldr	r3, [pc, #120]	; (800656c <TIM_OC4_SetConfig+0xa4>)
 80064f4:	4013      	ands	r3, r2
 80064f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	021b      	lsls	r3, r3, #8
 8006506:	68fa      	ldr	r2, [r7, #12]
 8006508:	4313      	orrs	r3, r2
 800650a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006512:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	031b      	lsls	r3, r3, #12
 800651a:	693a      	ldr	r2, [r7, #16]
 800651c:	4313      	orrs	r3, r2
 800651e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	4a13      	ldr	r2, [pc, #76]	; (8006570 <TIM_OC4_SetConfig+0xa8>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d003      	beq.n	8006530 <TIM_OC4_SetConfig+0x68>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a12      	ldr	r2, [pc, #72]	; (8006574 <TIM_OC4_SetConfig+0xac>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d109      	bne.n	8006544 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006536:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	695b      	ldr	r3, [r3, #20]
 800653c:	019b      	lsls	r3, r3, #6
 800653e:	697a      	ldr	r2, [r7, #20]
 8006540:	4313      	orrs	r3, r2
 8006542:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	697a      	ldr	r2, [r7, #20]
 8006548:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	68fa      	ldr	r2, [r7, #12]
 800654e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	685a      	ldr	r2, [r3, #4]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	693a      	ldr	r2, [r7, #16]
 800655c:	621a      	str	r2, [r3, #32]
}
 800655e:	bf00      	nop
 8006560:	371c      	adds	r7, #28
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr
 800656a:	bf00      	nop
 800656c:	feff8fff 	.word	0xfeff8fff
 8006570:	40010000 	.word	0x40010000
 8006574:	40010400 	.word	0x40010400

08006578 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006578:	b480      	push	{r7}
 800657a:	b087      	sub	sp, #28
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6a1b      	ldr	r3, [r3, #32]
 8006586:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6a1b      	ldr	r3, [r3, #32]
 8006592:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800659e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80065a0:	68fa      	ldr	r2, [r7, #12]
 80065a2:	4b1b      	ldr	r3, [pc, #108]	; (8006610 <TIM_OC5_SetConfig+0x98>)
 80065a4:	4013      	ands	r3, r2
 80065a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	68fa      	ldr	r2, [r7, #12]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80065b8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	041b      	lsls	r3, r3, #16
 80065c0:	693a      	ldr	r2, [r7, #16]
 80065c2:	4313      	orrs	r3, r2
 80065c4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4a12      	ldr	r2, [pc, #72]	; (8006614 <TIM_OC5_SetConfig+0x9c>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d003      	beq.n	80065d6 <TIM_OC5_SetConfig+0x5e>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4a11      	ldr	r2, [pc, #68]	; (8006618 <TIM_OC5_SetConfig+0xa0>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d109      	bne.n	80065ea <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065dc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	695b      	ldr	r3, [r3, #20]
 80065e2:	021b      	lsls	r3, r3, #8
 80065e4:	697a      	ldr	r2, [r7, #20]
 80065e6:	4313      	orrs	r3, r2
 80065e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	697a      	ldr	r2, [r7, #20]
 80065ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	68fa      	ldr	r2, [r7, #12]
 80065f4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	685a      	ldr	r2, [r3, #4]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	693a      	ldr	r2, [r7, #16]
 8006602:	621a      	str	r2, [r3, #32]
}
 8006604:	bf00      	nop
 8006606:	371c      	adds	r7, #28
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr
 8006610:	fffeff8f 	.word	0xfffeff8f
 8006614:	40010000 	.word	0x40010000
 8006618:	40010400 	.word	0x40010400

0800661c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800661c:	b480      	push	{r7}
 800661e:	b087      	sub	sp, #28
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6a1b      	ldr	r3, [r3, #32]
 800662a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6a1b      	ldr	r3, [r3, #32]
 8006636:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006644:	68fa      	ldr	r2, [r7, #12]
 8006646:	4b1c      	ldr	r3, [pc, #112]	; (80066b8 <TIM_OC6_SetConfig+0x9c>)
 8006648:	4013      	ands	r3, r2
 800664a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	021b      	lsls	r3, r3, #8
 8006652:	68fa      	ldr	r2, [r7, #12]
 8006654:	4313      	orrs	r3, r2
 8006656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800665e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	051b      	lsls	r3, r3, #20
 8006666:	693a      	ldr	r2, [r7, #16]
 8006668:	4313      	orrs	r3, r2
 800666a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	4a13      	ldr	r2, [pc, #76]	; (80066bc <TIM_OC6_SetConfig+0xa0>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d003      	beq.n	800667c <TIM_OC6_SetConfig+0x60>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	4a12      	ldr	r2, [pc, #72]	; (80066c0 <TIM_OC6_SetConfig+0xa4>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d109      	bne.n	8006690 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006682:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	695b      	ldr	r3, [r3, #20]
 8006688:	029b      	lsls	r3, r3, #10
 800668a:	697a      	ldr	r2, [r7, #20]
 800668c:	4313      	orrs	r3, r2
 800668e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	697a      	ldr	r2, [r7, #20]
 8006694:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	68fa      	ldr	r2, [r7, #12]
 800669a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	685a      	ldr	r2, [r3, #4]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	693a      	ldr	r2, [r7, #16]
 80066a8:	621a      	str	r2, [r3, #32]
}
 80066aa:	bf00      	nop
 80066ac:	371c      	adds	r7, #28
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr
 80066b6:	bf00      	nop
 80066b8:	feff8fff 	.word	0xfeff8fff
 80066bc:	40010000 	.word	0x40010000
 80066c0:	40010400 	.word	0x40010400

080066c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b087      	sub	sp, #28
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	f003 031f 	and.w	r3, r3, #31
 80066d6:	2201      	movs	r2, #1
 80066d8:	fa02 f303 	lsl.w	r3, r2, r3
 80066dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	6a1a      	ldr	r2, [r3, #32]
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	43db      	mvns	r3, r3
 80066e6:	401a      	ands	r2, r3
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6a1a      	ldr	r2, [r3, #32]
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	f003 031f 	and.w	r3, r3, #31
 80066f6:	6879      	ldr	r1, [r7, #4]
 80066f8:	fa01 f303 	lsl.w	r3, r1, r3
 80066fc:	431a      	orrs	r2, r3
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	621a      	str	r2, [r3, #32]
}
 8006702:	bf00      	nop
 8006704:	371c      	adds	r7, #28
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr
	...

08006710 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006710:	b480      	push	{r7}
 8006712:	b085      	sub	sp, #20
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006720:	2b01      	cmp	r3, #1
 8006722:	d101      	bne.n	8006728 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006724:	2302      	movs	r3, #2
 8006726:	e045      	b.n	80067b4 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2202      	movs	r2, #2
 8006734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a1c      	ldr	r2, [pc, #112]	; (80067c0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d004      	beq.n	800675c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a1b      	ldr	r2, [pc, #108]	; (80067c4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d108      	bne.n	800676e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006762:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	4313      	orrs	r3, r2
 800676c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006774:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	68fa      	ldr	r2, [r7, #12]
 800677c:	4313      	orrs	r3, r2
 800677e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006786:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	68ba      	ldr	r2, [r7, #8]
 800678e:	4313      	orrs	r3, r2
 8006790:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	68fa      	ldr	r2, [r7, #12]
 8006798:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	68ba      	ldr	r2, [r7, #8]
 80067a0:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2201      	movs	r2, #1
 80067a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2200      	movs	r2, #0
 80067ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067b2:	2300      	movs	r3, #0
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3714      	adds	r7, #20
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr
 80067c0:	40010000 	.word	0x40010000
 80067c4:	40010400 	.word	0x40010400

080067c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b083      	sub	sp, #12
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80067d0:	bf00      	nop
 80067d2:	370c      	adds	r7, #12
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80067e4:	bf00      	nop
 80067e6:	370c      	adds	r7, #12
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b083      	sub	sp, #12
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80067f8:	bf00      	nop
 80067fa:	370c      	adds	r7, #12
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b082      	sub	sp, #8
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d101      	bne.n	8006816 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	e040      	b.n	8006898 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800681a:	2b00      	cmp	r3, #0
 800681c:	d106      	bne.n	800682c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2200      	movs	r2, #0
 8006822:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f7fb fcf6 	bl	8002218 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2224      	movs	r2, #36	; 0x24
 8006830:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f022 0201 	bic.w	r2, r2, #1
 8006840:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 fa64 	bl	8006d10 <UART_SetConfig>
 8006848:	4603      	mov	r3, r0
 800684a:	2b01      	cmp	r3, #1
 800684c:	d101      	bne.n	8006852 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	e022      	b.n	8006898 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006856:	2b00      	cmp	r3, #0
 8006858:	d002      	beq.n	8006860 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 fcfc 	bl	8007258 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	685a      	ldr	r2, [r3, #4]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800686e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	689a      	ldr	r2, [r3, #8]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800687e:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f042 0201 	orr.w	r2, r2, #1
 800688e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f000 fd83 	bl	800739c <UART_CheckIdleState>
 8006896:	4603      	mov	r3, r0
}
 8006898:	4618      	mov	r0, r3
 800689a:	3708      	adds	r7, #8
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b085      	sub	sp, #20
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	60f8      	str	r0, [r7, #12]
 80068a8:	60b9      	str	r1, [r7, #8]
 80068aa:	4613      	mov	r3, r2
 80068ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068b2:	2b20      	cmp	r3, #32
 80068b4:	d144      	bne.n	8006940 <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d002      	beq.n	80068c2 <HAL_UART_Transmit_IT+0x22>
 80068bc:	88fb      	ldrh	r3, [r7, #6]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d101      	bne.n	80068c6 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	e03d      	b.n	8006942 <HAL_UART_Transmit_IT+0xa2>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d101      	bne.n	80068d4 <HAL_UART_Transmit_IT+0x34>
 80068d0:	2302      	movs	r3, #2
 80068d2:	e036      	b.n	8006942 <HAL_UART_Transmit_IT+0xa2>
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2201      	movs	r2, #1
 80068d8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	68ba      	ldr	r2, [r7, #8]
 80068e0:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	88fa      	ldrh	r2, [r7, #6]
 80068e6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	88fa      	ldrh	r2, [r7, #6]
 80068ee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2200      	movs	r2, #0
 80068f6:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2200      	movs	r2, #0
 80068fc:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2221      	movs	r2, #33	; 0x21
 8006902:	675a      	str	r2, [r3, #116]	; 0x74

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800690c:	d107      	bne.n	800691e <HAL_UART_Transmit_IT+0x7e>
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	691b      	ldr	r3, [r3, #16]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d103      	bne.n	800691e <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	4a0d      	ldr	r2, [pc, #52]	; (8006950 <HAL_UART_Transmit_IT+0xb0>)
 800691a:	665a      	str	r2, [r3, #100]	; 0x64
 800691c:	e002      	b.n	8006924 <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	4a0c      	ldr	r2, [pc, #48]	; (8006954 <HAL_UART_Transmit_IT+0xb4>)
 8006922:	665a      	str	r2, [r3, #100]	; 0x64
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2200      	movs	r2, #0
 8006928:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800693a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800693c:	2300      	movs	r3, #0
 800693e:	e000      	b.n	8006942 <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 8006940:	2302      	movs	r3, #2
  }
}
 8006942:	4618      	mov	r0, r3
 8006944:	3714      	adds	r7, #20
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr
 800694e:	bf00      	nop
 8006950:	08007569 	.word	0x08007569
 8006954:	080074f7 	.word	0x080074f7

08006958 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006958:	b480      	push	{r7}
 800695a:	b085      	sub	sp, #20
 800695c:	af00      	add	r7, sp, #0
 800695e:	60f8      	str	r0, [r7, #12]
 8006960:	60b9      	str	r1, [r7, #8]
 8006962:	4613      	mov	r3, r2
 8006964:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800696a:	2b20      	cmp	r3, #32
 800696c:	f040 808a 	bne.w	8006a84 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d002      	beq.n	800697c <HAL_UART_Receive_IT+0x24>
 8006976:	88fb      	ldrh	r3, [r7, #6]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d101      	bne.n	8006980 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	e082      	b.n	8006a86 <HAL_UART_Receive_IT+0x12e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006986:	2b01      	cmp	r3, #1
 8006988:	d101      	bne.n	800698e <HAL_UART_Receive_IT+0x36>
 800698a:	2302      	movs	r3, #2
 800698c:	e07b      	b.n	8006a86 <HAL_UART_Receive_IT+0x12e>
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2201      	movs	r2, #1
 8006992:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	68ba      	ldr	r2, [r7, #8]
 800699a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	88fa      	ldrh	r2, [r7, #6]
 80069a0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	88fa      	ldrh	r2, [r7, #6]
 80069a8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2200      	movs	r2, #0
 80069b0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069ba:	d10e      	bne.n	80069da <HAL_UART_Receive_IT+0x82>
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	691b      	ldr	r3, [r3, #16]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d105      	bne.n	80069d0 <HAL_UART_Receive_IT+0x78>
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80069ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80069ce:	e02d      	b.n	8006a2c <HAL_UART_Receive_IT+0xd4>
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	22ff      	movs	r2, #255	; 0xff
 80069d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80069d8:	e028      	b.n	8006a2c <HAL_UART_Receive_IT+0xd4>
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d10d      	bne.n	80069fe <HAL_UART_Receive_IT+0xa6>
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	691b      	ldr	r3, [r3, #16]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d104      	bne.n	80069f4 <HAL_UART_Receive_IT+0x9c>
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	22ff      	movs	r2, #255	; 0xff
 80069ee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80069f2:	e01b      	b.n	8006a2c <HAL_UART_Receive_IT+0xd4>
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	227f      	movs	r2, #127	; 0x7f
 80069f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80069fc:	e016      	b.n	8006a2c <HAL_UART_Receive_IT+0xd4>
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a06:	d10d      	bne.n	8006a24 <HAL_UART_Receive_IT+0xcc>
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	691b      	ldr	r3, [r3, #16]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d104      	bne.n	8006a1a <HAL_UART_Receive_IT+0xc2>
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	227f      	movs	r2, #127	; 0x7f
 8006a14:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a18:	e008      	b.n	8006a2c <HAL_UART_Receive_IT+0xd4>
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	223f      	movs	r2, #63	; 0x3f
 8006a1e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a22:	e003      	b.n	8006a2c <HAL_UART_Receive_IT+0xd4>
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2200      	movs	r2, #0
 8006a28:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2222      	movs	r2, #34	; 0x22
 8006a36:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	689a      	ldr	r2, [r3, #8]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f042 0201 	orr.w	r2, r2, #1
 8006a46:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a50:	d107      	bne.n	8006a62 <HAL_UART_Receive_IT+0x10a>
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	691b      	ldr	r3, [r3, #16]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d103      	bne.n	8006a62 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	4a0d      	ldr	r2, [pc, #52]	; (8006a94 <HAL_UART_Receive_IT+0x13c>)
 8006a5e:	661a      	str	r2, [r3, #96]	; 0x60
 8006a60:	e002      	b.n	8006a68 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	4a0c      	ldr	r2, [pc, #48]	; (8006a98 <HAL_UART_Receive_IT+0x140>)
 8006a66:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8006a7e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8006a80:	2300      	movs	r3, #0
 8006a82:	e000      	b.n	8006a86 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8006a84:	2302      	movs	r3, #2
  }
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3714      	adds	r7, #20
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr
 8006a92:	bf00      	nop
 8006a94:	080076bd 	.word	0x080076bd
 8006a98:	08007617 	.word	0x08007617

08006a9c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b088      	sub	sp, #32
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	69db      	ldr	r3, [r3, #28]
 8006aaa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8006abc:	69fb      	ldr	r3, [r7, #28]
 8006abe:	f003 030f 	and.w	r3, r3, #15
 8006ac2:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d113      	bne.n	8006af2 <HAL_UART_IRQHandler+0x56>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006aca:	69fb      	ldr	r3, [r7, #28]
 8006acc:	f003 0320 	and.w	r3, r3, #32
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d00e      	beq.n	8006af2 <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006ad4:	69bb      	ldr	r3, [r7, #24]
 8006ad6:	f003 0320 	and.w	r3, r3, #32
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d009      	beq.n	8006af2 <HAL_UART_IRQHandler+0x56>
    {
      if (huart->RxISR != NULL)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	f000 80eb 	beq.w	8006cbe <HAL_UART_IRQHandler+0x222>
      {
        huart->RxISR(huart);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	4798      	blx	r3
      }
      return;
 8006af0:	e0e5      	b.n	8006cbe <HAL_UART_IRQHandler+0x222>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	f000 80c0 	beq.w	8006c7a <HAL_UART_IRQHandler+0x1de>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	f003 0301 	and.w	r3, r3, #1
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d105      	bne.n	8006b10 <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8006b04:	69bb      	ldr	r3, [r7, #24]
 8006b06:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	f000 80b5 	beq.w	8006c7a <HAL_UART_IRQHandler+0x1de>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	f003 0301 	and.w	r3, r3, #1
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d00e      	beq.n	8006b38 <HAL_UART_IRQHandler+0x9c>
 8006b1a:	69bb      	ldr	r3, [r7, #24]
 8006b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d009      	beq.n	8006b38 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2201      	movs	r2, #1
 8006b2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b30:	f043 0201 	orr.w	r2, r3, #1
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b38:	69fb      	ldr	r3, [r7, #28]
 8006b3a:	f003 0302 	and.w	r3, r3, #2
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d00e      	beq.n	8006b60 <HAL_UART_IRQHandler+0xc4>
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	f003 0301 	and.w	r3, r3, #1
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d009      	beq.n	8006b60 <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	2202      	movs	r2, #2
 8006b52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b58:	f043 0204 	orr.w	r2, r3, #4
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b60:	69fb      	ldr	r3, [r7, #28]
 8006b62:	f003 0304 	and.w	r3, r3, #4
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d00e      	beq.n	8006b88 <HAL_UART_IRQHandler+0xec>
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	f003 0301 	and.w	r3, r3, #1
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d009      	beq.n	8006b88 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	2204      	movs	r2, #4
 8006b7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b80:	f043 0202 	orr.w	r2, r3, #2
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006b88:	69fb      	ldr	r3, [r7, #28]
 8006b8a:	f003 0308 	and.w	r3, r3, #8
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d013      	beq.n	8006bba <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	f003 0320 	and.w	r3, r3, #32
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d104      	bne.n	8006ba6 <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d009      	beq.n	8006bba <HAL_UART_IRQHandler+0x11e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	2208      	movs	r2, #8
 8006bac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006bb2:	f043 0208 	orr.w	r2, r3, #8
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d07f      	beq.n	8006cc2 <HAL_UART_IRQHandler+0x226>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	f003 0320 	and.w	r3, r3, #32
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d00c      	beq.n	8006be6 <HAL_UART_IRQHandler+0x14a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006bcc:	69bb      	ldr	r3, [r7, #24]
 8006bce:	f003 0320 	and.w	r3, r3, #32
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d007      	beq.n	8006be6 <HAL_UART_IRQHandler+0x14a>
      {
        if (huart->RxISR != NULL)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d003      	beq.n	8006be6 <HAL_UART_IRQHandler+0x14a>
        {
          huart->RxISR(huart);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006bea:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bf6:	2b40      	cmp	r3, #64	; 0x40
 8006bf8:	d004      	beq.n	8006c04 <HAL_UART_IRQHandler+0x168>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d031      	beq.n	8006c68 <HAL_UART_IRQHandler+0x1cc>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f000 fc40 	bl	800748a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c14:	2b40      	cmp	r3, #64	; 0x40
 8006c16:	d123      	bne.n	8006c60 <HAL_UART_IRQHandler+0x1c4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	689a      	ldr	r2, [r3, #8]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c26:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d013      	beq.n	8006c58 <HAL_UART_IRQHandler+0x1bc>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c34:	4a26      	ldr	r2, [pc, #152]	; (8006cd0 <HAL_UART_IRQHandler+0x234>)
 8006c36:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f7fb fd7a 	bl	8002736 <HAL_DMA_Abort_IT>
 8006c42:	4603      	mov	r3, r0
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d016      	beq.n	8006c76 <HAL_UART_IRQHandler+0x1da>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006c52:	4610      	mov	r0, r2
 8006c54:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c56:	e00e      	b.n	8006c76 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 f84f 	bl	8006cfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c5e:	e00a      	b.n	8006c76 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f000 f84b 	bl	8006cfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c66:	e006      	b.n	8006c76 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 f847 	bl	8006cfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8006c74:	e025      	b.n	8006cc2 <HAL_UART_IRQHandler+0x226>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c76:	bf00      	nop
    return;
 8006c78:	e023      	b.n	8006cc2 <HAL_UART_IRQHandler+0x226>

  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d00d      	beq.n	8006ca0 <HAL_UART_IRQHandler+0x204>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006c84:	69bb      	ldr	r3, [r7, #24]
 8006c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d008      	beq.n	8006ca0 <HAL_UART_IRQHandler+0x204>
  {
    if (huart->TxISR != NULL)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d017      	beq.n	8006cc6 <HAL_UART_IRQHandler+0x22a>
    {
      huart->TxISR(huart);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	4798      	blx	r3
    }
    return;
 8006c9e:	e012      	b.n	8006cc6 <HAL_UART_IRQHandler+0x22a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d00e      	beq.n	8006cc8 <HAL_UART_IRQHandler+0x22c>
 8006caa:	69bb      	ldr	r3, [r7, #24]
 8006cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d009      	beq.n	8006cc8 <HAL_UART_IRQHandler+0x22c>
  {
    UART_EndTransmit_IT(huart);
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 fc95 	bl	80075e4 <UART_EndTransmit_IT>
    return;
 8006cba:	bf00      	nop
 8006cbc:	e004      	b.n	8006cc8 <HAL_UART_IRQHandler+0x22c>
      return;
 8006cbe:	bf00      	nop
 8006cc0:	e002      	b.n	8006cc8 <HAL_UART_IRQHandler+0x22c>
    return;
 8006cc2:	bf00      	nop
 8006cc4:	e000      	b.n	8006cc8 <HAL_UART_IRQHandler+0x22c>
    return;
 8006cc6:	bf00      	nop
  }

}
 8006cc8:	3720      	adds	r7, #32
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	080074cb 	.word	0x080074cb

08006cd4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006cdc:	bf00      	nop
 8006cde:	370c      	adds	r7, #12
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr

08006ce8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006cf0:	bf00      	nop
 8006cf2:	370c      	adds	r7, #12
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr

08006cfc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b083      	sub	sp, #12
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006d04:	bf00      	nop
 8006d06:	370c      	adds	r7, #12
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr

08006d10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b088      	sub	sp, #32
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	689a      	ldr	r2, [r3, #8]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	691b      	ldr	r3, [r3, #16]
 8006d28:	431a      	orrs	r2, r3
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	695b      	ldr	r3, [r3, #20]
 8006d2e:	431a      	orrs	r2, r3
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	69db      	ldr	r3, [r3, #28]
 8006d34:	4313      	orrs	r3, r2
 8006d36:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	4bb1      	ldr	r3, [pc, #708]	; (8007004 <UART_SetConfig+0x2f4>)
 8006d40:	4013      	ands	r3, r2
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	6812      	ldr	r2, [r2, #0]
 8006d46:	6939      	ldr	r1, [r7, #16]
 8006d48:	430b      	orrs	r3, r1
 8006d4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	68da      	ldr	r2, [r3, #12]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	430a      	orrs	r2, r1
 8006d60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	699b      	ldr	r3, [r3, #24]
 8006d66:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6a1b      	ldr	r3, [r3, #32]
 8006d6c:	693a      	ldr	r2, [r7, #16]
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	693a      	ldr	r2, [r7, #16]
 8006d82:	430a      	orrs	r2, r1
 8006d84:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a9f      	ldr	r2, [pc, #636]	; (8007008 <UART_SetConfig+0x2f8>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d121      	bne.n	8006dd4 <UART_SetConfig+0xc4>
 8006d90:	4b9e      	ldr	r3, [pc, #632]	; (800700c <UART_SetConfig+0x2fc>)
 8006d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d96:	f003 0303 	and.w	r3, r3, #3
 8006d9a:	2b03      	cmp	r3, #3
 8006d9c:	d816      	bhi.n	8006dcc <UART_SetConfig+0xbc>
 8006d9e:	a201      	add	r2, pc, #4	; (adr r2, 8006da4 <UART_SetConfig+0x94>)
 8006da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da4:	08006db5 	.word	0x08006db5
 8006da8:	08006dc1 	.word	0x08006dc1
 8006dac:	08006dbb 	.word	0x08006dbb
 8006db0:	08006dc7 	.word	0x08006dc7
 8006db4:	2301      	movs	r3, #1
 8006db6:	77fb      	strb	r3, [r7, #31]
 8006db8:	e151      	b.n	800705e <UART_SetConfig+0x34e>
 8006dba:	2302      	movs	r3, #2
 8006dbc:	77fb      	strb	r3, [r7, #31]
 8006dbe:	e14e      	b.n	800705e <UART_SetConfig+0x34e>
 8006dc0:	2304      	movs	r3, #4
 8006dc2:	77fb      	strb	r3, [r7, #31]
 8006dc4:	e14b      	b.n	800705e <UART_SetConfig+0x34e>
 8006dc6:	2308      	movs	r3, #8
 8006dc8:	77fb      	strb	r3, [r7, #31]
 8006dca:	e148      	b.n	800705e <UART_SetConfig+0x34e>
 8006dcc:	2310      	movs	r3, #16
 8006dce:	77fb      	strb	r3, [r7, #31]
 8006dd0:	bf00      	nop
 8006dd2:	e144      	b.n	800705e <UART_SetConfig+0x34e>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a8d      	ldr	r2, [pc, #564]	; (8007010 <UART_SetConfig+0x300>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d134      	bne.n	8006e48 <UART_SetConfig+0x138>
 8006dde:	4b8b      	ldr	r3, [pc, #556]	; (800700c <UART_SetConfig+0x2fc>)
 8006de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006de4:	f003 030c 	and.w	r3, r3, #12
 8006de8:	2b0c      	cmp	r3, #12
 8006dea:	d829      	bhi.n	8006e40 <UART_SetConfig+0x130>
 8006dec:	a201      	add	r2, pc, #4	; (adr r2, 8006df4 <UART_SetConfig+0xe4>)
 8006dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006df2:	bf00      	nop
 8006df4:	08006e29 	.word	0x08006e29
 8006df8:	08006e41 	.word	0x08006e41
 8006dfc:	08006e41 	.word	0x08006e41
 8006e00:	08006e41 	.word	0x08006e41
 8006e04:	08006e35 	.word	0x08006e35
 8006e08:	08006e41 	.word	0x08006e41
 8006e0c:	08006e41 	.word	0x08006e41
 8006e10:	08006e41 	.word	0x08006e41
 8006e14:	08006e2f 	.word	0x08006e2f
 8006e18:	08006e41 	.word	0x08006e41
 8006e1c:	08006e41 	.word	0x08006e41
 8006e20:	08006e41 	.word	0x08006e41
 8006e24:	08006e3b 	.word	0x08006e3b
 8006e28:	2300      	movs	r3, #0
 8006e2a:	77fb      	strb	r3, [r7, #31]
 8006e2c:	e117      	b.n	800705e <UART_SetConfig+0x34e>
 8006e2e:	2302      	movs	r3, #2
 8006e30:	77fb      	strb	r3, [r7, #31]
 8006e32:	e114      	b.n	800705e <UART_SetConfig+0x34e>
 8006e34:	2304      	movs	r3, #4
 8006e36:	77fb      	strb	r3, [r7, #31]
 8006e38:	e111      	b.n	800705e <UART_SetConfig+0x34e>
 8006e3a:	2308      	movs	r3, #8
 8006e3c:	77fb      	strb	r3, [r7, #31]
 8006e3e:	e10e      	b.n	800705e <UART_SetConfig+0x34e>
 8006e40:	2310      	movs	r3, #16
 8006e42:	77fb      	strb	r3, [r7, #31]
 8006e44:	bf00      	nop
 8006e46:	e10a      	b.n	800705e <UART_SetConfig+0x34e>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a71      	ldr	r2, [pc, #452]	; (8007014 <UART_SetConfig+0x304>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d120      	bne.n	8006e94 <UART_SetConfig+0x184>
 8006e52:	4b6e      	ldr	r3, [pc, #440]	; (800700c <UART_SetConfig+0x2fc>)
 8006e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e58:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006e5c:	2b10      	cmp	r3, #16
 8006e5e:	d00f      	beq.n	8006e80 <UART_SetConfig+0x170>
 8006e60:	2b10      	cmp	r3, #16
 8006e62:	d802      	bhi.n	8006e6a <UART_SetConfig+0x15a>
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d005      	beq.n	8006e74 <UART_SetConfig+0x164>
 8006e68:	e010      	b.n	8006e8c <UART_SetConfig+0x17c>
 8006e6a:	2b20      	cmp	r3, #32
 8006e6c:	d005      	beq.n	8006e7a <UART_SetConfig+0x16a>
 8006e6e:	2b30      	cmp	r3, #48	; 0x30
 8006e70:	d009      	beq.n	8006e86 <UART_SetConfig+0x176>
 8006e72:	e00b      	b.n	8006e8c <UART_SetConfig+0x17c>
 8006e74:	2300      	movs	r3, #0
 8006e76:	77fb      	strb	r3, [r7, #31]
 8006e78:	e0f1      	b.n	800705e <UART_SetConfig+0x34e>
 8006e7a:	2302      	movs	r3, #2
 8006e7c:	77fb      	strb	r3, [r7, #31]
 8006e7e:	e0ee      	b.n	800705e <UART_SetConfig+0x34e>
 8006e80:	2304      	movs	r3, #4
 8006e82:	77fb      	strb	r3, [r7, #31]
 8006e84:	e0eb      	b.n	800705e <UART_SetConfig+0x34e>
 8006e86:	2308      	movs	r3, #8
 8006e88:	77fb      	strb	r3, [r7, #31]
 8006e8a:	e0e8      	b.n	800705e <UART_SetConfig+0x34e>
 8006e8c:	2310      	movs	r3, #16
 8006e8e:	77fb      	strb	r3, [r7, #31]
 8006e90:	bf00      	nop
 8006e92:	e0e4      	b.n	800705e <UART_SetConfig+0x34e>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a5f      	ldr	r2, [pc, #380]	; (8007018 <UART_SetConfig+0x308>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d120      	bne.n	8006ee0 <UART_SetConfig+0x1d0>
 8006e9e:	4b5b      	ldr	r3, [pc, #364]	; (800700c <UART_SetConfig+0x2fc>)
 8006ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ea4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006ea8:	2b40      	cmp	r3, #64	; 0x40
 8006eaa:	d00f      	beq.n	8006ecc <UART_SetConfig+0x1bc>
 8006eac:	2b40      	cmp	r3, #64	; 0x40
 8006eae:	d802      	bhi.n	8006eb6 <UART_SetConfig+0x1a6>
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d005      	beq.n	8006ec0 <UART_SetConfig+0x1b0>
 8006eb4:	e010      	b.n	8006ed8 <UART_SetConfig+0x1c8>
 8006eb6:	2b80      	cmp	r3, #128	; 0x80
 8006eb8:	d005      	beq.n	8006ec6 <UART_SetConfig+0x1b6>
 8006eba:	2bc0      	cmp	r3, #192	; 0xc0
 8006ebc:	d009      	beq.n	8006ed2 <UART_SetConfig+0x1c2>
 8006ebe:	e00b      	b.n	8006ed8 <UART_SetConfig+0x1c8>
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	77fb      	strb	r3, [r7, #31]
 8006ec4:	e0cb      	b.n	800705e <UART_SetConfig+0x34e>
 8006ec6:	2302      	movs	r3, #2
 8006ec8:	77fb      	strb	r3, [r7, #31]
 8006eca:	e0c8      	b.n	800705e <UART_SetConfig+0x34e>
 8006ecc:	2304      	movs	r3, #4
 8006ece:	77fb      	strb	r3, [r7, #31]
 8006ed0:	e0c5      	b.n	800705e <UART_SetConfig+0x34e>
 8006ed2:	2308      	movs	r3, #8
 8006ed4:	77fb      	strb	r3, [r7, #31]
 8006ed6:	e0c2      	b.n	800705e <UART_SetConfig+0x34e>
 8006ed8:	2310      	movs	r3, #16
 8006eda:	77fb      	strb	r3, [r7, #31]
 8006edc:	bf00      	nop
 8006ede:	e0be      	b.n	800705e <UART_SetConfig+0x34e>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a4d      	ldr	r2, [pc, #308]	; (800701c <UART_SetConfig+0x30c>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d124      	bne.n	8006f34 <UART_SetConfig+0x224>
 8006eea:	4b48      	ldr	r3, [pc, #288]	; (800700c <UART_SetConfig+0x2fc>)
 8006eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ef0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ef4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ef8:	d012      	beq.n	8006f20 <UART_SetConfig+0x210>
 8006efa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006efe:	d802      	bhi.n	8006f06 <UART_SetConfig+0x1f6>
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d007      	beq.n	8006f14 <UART_SetConfig+0x204>
 8006f04:	e012      	b.n	8006f2c <UART_SetConfig+0x21c>
 8006f06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f0a:	d006      	beq.n	8006f1a <UART_SetConfig+0x20a>
 8006f0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f10:	d009      	beq.n	8006f26 <UART_SetConfig+0x216>
 8006f12:	e00b      	b.n	8006f2c <UART_SetConfig+0x21c>
 8006f14:	2300      	movs	r3, #0
 8006f16:	77fb      	strb	r3, [r7, #31]
 8006f18:	e0a1      	b.n	800705e <UART_SetConfig+0x34e>
 8006f1a:	2302      	movs	r3, #2
 8006f1c:	77fb      	strb	r3, [r7, #31]
 8006f1e:	e09e      	b.n	800705e <UART_SetConfig+0x34e>
 8006f20:	2304      	movs	r3, #4
 8006f22:	77fb      	strb	r3, [r7, #31]
 8006f24:	e09b      	b.n	800705e <UART_SetConfig+0x34e>
 8006f26:	2308      	movs	r3, #8
 8006f28:	77fb      	strb	r3, [r7, #31]
 8006f2a:	e098      	b.n	800705e <UART_SetConfig+0x34e>
 8006f2c:	2310      	movs	r3, #16
 8006f2e:	77fb      	strb	r3, [r7, #31]
 8006f30:	bf00      	nop
 8006f32:	e094      	b.n	800705e <UART_SetConfig+0x34e>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a39      	ldr	r2, [pc, #228]	; (8007020 <UART_SetConfig+0x310>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d124      	bne.n	8006f88 <UART_SetConfig+0x278>
 8006f3e:	4b33      	ldr	r3, [pc, #204]	; (800700c <UART_SetConfig+0x2fc>)
 8006f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f44:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006f48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f4c:	d012      	beq.n	8006f74 <UART_SetConfig+0x264>
 8006f4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f52:	d802      	bhi.n	8006f5a <UART_SetConfig+0x24a>
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d007      	beq.n	8006f68 <UART_SetConfig+0x258>
 8006f58:	e012      	b.n	8006f80 <UART_SetConfig+0x270>
 8006f5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f5e:	d006      	beq.n	8006f6e <UART_SetConfig+0x25e>
 8006f60:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f64:	d009      	beq.n	8006f7a <UART_SetConfig+0x26a>
 8006f66:	e00b      	b.n	8006f80 <UART_SetConfig+0x270>
 8006f68:	2301      	movs	r3, #1
 8006f6a:	77fb      	strb	r3, [r7, #31]
 8006f6c:	e077      	b.n	800705e <UART_SetConfig+0x34e>
 8006f6e:	2302      	movs	r3, #2
 8006f70:	77fb      	strb	r3, [r7, #31]
 8006f72:	e074      	b.n	800705e <UART_SetConfig+0x34e>
 8006f74:	2304      	movs	r3, #4
 8006f76:	77fb      	strb	r3, [r7, #31]
 8006f78:	e071      	b.n	800705e <UART_SetConfig+0x34e>
 8006f7a:	2308      	movs	r3, #8
 8006f7c:	77fb      	strb	r3, [r7, #31]
 8006f7e:	e06e      	b.n	800705e <UART_SetConfig+0x34e>
 8006f80:	2310      	movs	r3, #16
 8006f82:	77fb      	strb	r3, [r7, #31]
 8006f84:	bf00      	nop
 8006f86:	e06a      	b.n	800705e <UART_SetConfig+0x34e>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a25      	ldr	r2, [pc, #148]	; (8007024 <UART_SetConfig+0x314>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d124      	bne.n	8006fdc <UART_SetConfig+0x2cc>
 8006f92:	4b1e      	ldr	r3, [pc, #120]	; (800700c <UART_SetConfig+0x2fc>)
 8006f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f98:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006f9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fa0:	d012      	beq.n	8006fc8 <UART_SetConfig+0x2b8>
 8006fa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fa6:	d802      	bhi.n	8006fae <UART_SetConfig+0x29e>
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d007      	beq.n	8006fbc <UART_SetConfig+0x2ac>
 8006fac:	e012      	b.n	8006fd4 <UART_SetConfig+0x2c4>
 8006fae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fb2:	d006      	beq.n	8006fc2 <UART_SetConfig+0x2b2>
 8006fb4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006fb8:	d009      	beq.n	8006fce <UART_SetConfig+0x2be>
 8006fba:	e00b      	b.n	8006fd4 <UART_SetConfig+0x2c4>
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	77fb      	strb	r3, [r7, #31]
 8006fc0:	e04d      	b.n	800705e <UART_SetConfig+0x34e>
 8006fc2:	2302      	movs	r3, #2
 8006fc4:	77fb      	strb	r3, [r7, #31]
 8006fc6:	e04a      	b.n	800705e <UART_SetConfig+0x34e>
 8006fc8:	2304      	movs	r3, #4
 8006fca:	77fb      	strb	r3, [r7, #31]
 8006fcc:	e047      	b.n	800705e <UART_SetConfig+0x34e>
 8006fce:	2308      	movs	r3, #8
 8006fd0:	77fb      	strb	r3, [r7, #31]
 8006fd2:	e044      	b.n	800705e <UART_SetConfig+0x34e>
 8006fd4:	2310      	movs	r3, #16
 8006fd6:	77fb      	strb	r3, [r7, #31]
 8006fd8:	bf00      	nop
 8006fda:	e040      	b.n	800705e <UART_SetConfig+0x34e>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a11      	ldr	r2, [pc, #68]	; (8007028 <UART_SetConfig+0x318>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d139      	bne.n	800705a <UART_SetConfig+0x34a>
 8006fe6:	4b09      	ldr	r3, [pc, #36]	; (800700c <UART_SetConfig+0x2fc>)
 8006fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006ff0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ff4:	d027      	beq.n	8007046 <UART_SetConfig+0x336>
 8006ff6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ffa:	d817      	bhi.n	800702c <UART_SetConfig+0x31c>
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d01c      	beq.n	800703a <UART_SetConfig+0x32a>
 8007000:	e027      	b.n	8007052 <UART_SetConfig+0x342>
 8007002:	bf00      	nop
 8007004:	efff69f3 	.word	0xefff69f3
 8007008:	40011000 	.word	0x40011000
 800700c:	40023800 	.word	0x40023800
 8007010:	40004400 	.word	0x40004400
 8007014:	40004800 	.word	0x40004800
 8007018:	40004c00 	.word	0x40004c00
 800701c:	40005000 	.word	0x40005000
 8007020:	40011400 	.word	0x40011400
 8007024:	40007800 	.word	0x40007800
 8007028:	40007c00 	.word	0x40007c00
 800702c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007030:	d006      	beq.n	8007040 <UART_SetConfig+0x330>
 8007032:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007036:	d009      	beq.n	800704c <UART_SetConfig+0x33c>
 8007038:	e00b      	b.n	8007052 <UART_SetConfig+0x342>
 800703a:	2300      	movs	r3, #0
 800703c:	77fb      	strb	r3, [r7, #31]
 800703e:	e00e      	b.n	800705e <UART_SetConfig+0x34e>
 8007040:	2302      	movs	r3, #2
 8007042:	77fb      	strb	r3, [r7, #31]
 8007044:	e00b      	b.n	800705e <UART_SetConfig+0x34e>
 8007046:	2304      	movs	r3, #4
 8007048:	77fb      	strb	r3, [r7, #31]
 800704a:	e008      	b.n	800705e <UART_SetConfig+0x34e>
 800704c:	2308      	movs	r3, #8
 800704e:	77fb      	strb	r3, [r7, #31]
 8007050:	e005      	b.n	800705e <UART_SetConfig+0x34e>
 8007052:	2310      	movs	r3, #16
 8007054:	77fb      	strb	r3, [r7, #31]
 8007056:	bf00      	nop
 8007058:	e001      	b.n	800705e <UART_SetConfig+0x34e>
 800705a:	2310      	movs	r3, #16
 800705c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	69db      	ldr	r3, [r3, #28]
 8007062:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007066:	d17c      	bne.n	8007162 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 8007068:	7ffb      	ldrb	r3, [r7, #31]
 800706a:	2b08      	cmp	r3, #8
 800706c:	d859      	bhi.n	8007122 <UART_SetConfig+0x412>
 800706e:	a201      	add	r2, pc, #4	; (adr r2, 8007074 <UART_SetConfig+0x364>)
 8007070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007074:	08007099 	.word	0x08007099
 8007078:	080070b7 	.word	0x080070b7
 800707c:	080070d5 	.word	0x080070d5
 8007080:	08007123 	.word	0x08007123
 8007084:	080070ed 	.word	0x080070ed
 8007088:	08007123 	.word	0x08007123
 800708c:	08007123 	.word	0x08007123
 8007090:	08007123 	.word	0x08007123
 8007094:	0800710b 	.word	0x0800710b
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007098:	f7fe f926 	bl	80052e8 <HAL_RCC_GetPCLK1Freq>
 800709c:	4603      	mov	r3, r0
 800709e:	005a      	lsls	r2, r3, #1
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	085b      	lsrs	r3, r3, #1
 80070a6:	441a      	add	r2, r3
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	61bb      	str	r3, [r7, #24]
        break;
 80070b4:	e038      	b.n	8007128 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80070b6:	f7fe f92b 	bl	8005310 <HAL_RCC_GetPCLK2Freq>
 80070ba:	4603      	mov	r3, r0
 80070bc:	005a      	lsls	r2, r3, #1
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	085b      	lsrs	r3, r3, #1
 80070c4:	441a      	add	r2, r3
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	61bb      	str	r3, [r7, #24]
        break;
 80070d2:	e029      	b.n	8007128 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	085a      	lsrs	r2, r3, #1
 80070da:	4b5d      	ldr	r3, [pc, #372]	; (8007250 <UART_SetConfig+0x540>)
 80070dc:	4413      	add	r3, r2
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	6852      	ldr	r2, [r2, #4]
 80070e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	61bb      	str	r3, [r7, #24]
        break;
 80070ea:	e01d      	b.n	8007128 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80070ec:	f7fe f818 	bl	8005120 <HAL_RCC_GetSysClockFreq>
 80070f0:	4603      	mov	r3, r0
 80070f2:	005a      	lsls	r2, r3, #1
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	085b      	lsrs	r3, r3, #1
 80070fa:	441a      	add	r2, r3
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	fbb2 f3f3 	udiv	r3, r2, r3
 8007104:	b29b      	uxth	r3, r3
 8007106:	61bb      	str	r3, [r7, #24]
        break;
 8007108:	e00e      	b.n	8007128 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	085b      	lsrs	r3, r3, #1
 8007110:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	fbb2 f3f3 	udiv	r3, r2, r3
 800711c:	b29b      	uxth	r3, r3
 800711e:	61bb      	str	r3, [r7, #24]
        break;
 8007120:	e002      	b.n	8007128 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	75fb      	strb	r3, [r7, #23]
        break;
 8007126:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007128:	69bb      	ldr	r3, [r7, #24]
 800712a:	2b0f      	cmp	r3, #15
 800712c:	d916      	bls.n	800715c <UART_SetConfig+0x44c>
 800712e:	69bb      	ldr	r3, [r7, #24]
 8007130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007134:	d212      	bcs.n	800715c <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	b29b      	uxth	r3, r3
 800713a:	f023 030f 	bic.w	r3, r3, #15
 800713e:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007140:	69bb      	ldr	r3, [r7, #24]
 8007142:	085b      	lsrs	r3, r3, #1
 8007144:	b29b      	uxth	r3, r3
 8007146:	f003 0307 	and.w	r3, r3, #7
 800714a:	b29a      	uxth	r2, r3
 800714c:	89fb      	ldrh	r3, [r7, #14]
 800714e:	4313      	orrs	r3, r2
 8007150:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	89fa      	ldrh	r2, [r7, #14]
 8007158:	60da      	str	r2, [r3, #12]
 800715a:	e06e      	b.n	800723a <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 800715c:	2301      	movs	r3, #1
 800715e:	75fb      	strb	r3, [r7, #23]
 8007160:	e06b      	b.n	800723a <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8007162:	7ffb      	ldrb	r3, [r7, #31]
 8007164:	2b08      	cmp	r3, #8
 8007166:	d857      	bhi.n	8007218 <UART_SetConfig+0x508>
 8007168:	a201      	add	r2, pc, #4	; (adr r2, 8007170 <UART_SetConfig+0x460>)
 800716a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800716e:	bf00      	nop
 8007170:	08007195 	.word	0x08007195
 8007174:	080071b1 	.word	0x080071b1
 8007178:	080071cd 	.word	0x080071cd
 800717c:	08007219 	.word	0x08007219
 8007180:	080071e5 	.word	0x080071e5
 8007184:	08007219 	.word	0x08007219
 8007188:	08007219 	.word	0x08007219
 800718c:	08007219 	.word	0x08007219
 8007190:	08007201 	.word	0x08007201
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007194:	f7fe f8a8 	bl	80052e8 <HAL_RCC_GetPCLK1Freq>
 8007198:	4602      	mov	r2, r0
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	085b      	lsrs	r3, r3, #1
 80071a0:	441a      	add	r2, r3
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	61bb      	str	r3, [r7, #24]
        break;
 80071ae:	e036      	b.n	800721e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80071b0:	f7fe f8ae 	bl	8005310 <HAL_RCC_GetPCLK2Freq>
 80071b4:	4602      	mov	r2, r0
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	085b      	lsrs	r3, r3, #1
 80071bc:	441a      	add	r2, r3
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	61bb      	str	r3, [r7, #24]
        break;
 80071ca:	e028      	b.n	800721e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	085a      	lsrs	r2, r3, #1
 80071d2:	4b20      	ldr	r3, [pc, #128]	; (8007254 <UART_SetConfig+0x544>)
 80071d4:	4413      	add	r3, r2
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	6852      	ldr	r2, [r2, #4]
 80071da:	fbb3 f3f2 	udiv	r3, r3, r2
 80071de:	b29b      	uxth	r3, r3
 80071e0:	61bb      	str	r3, [r7, #24]
        break;
 80071e2:	e01c      	b.n	800721e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80071e4:	f7fd ff9c 	bl	8005120 <HAL_RCC_GetSysClockFreq>
 80071e8:	4602      	mov	r2, r0
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	085b      	lsrs	r3, r3, #1
 80071f0:	441a      	add	r2, r3
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	61bb      	str	r3, [r7, #24]
        break;
 80071fe:	e00e      	b.n	800721e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	085b      	lsrs	r3, r3, #1
 8007206:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007212:	b29b      	uxth	r3, r3
 8007214:	61bb      	str	r3, [r7, #24]
        break;
 8007216:	e002      	b.n	800721e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8007218:	2301      	movs	r3, #1
 800721a:	75fb      	strb	r3, [r7, #23]
        break;
 800721c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800721e:	69bb      	ldr	r3, [r7, #24]
 8007220:	2b0f      	cmp	r3, #15
 8007222:	d908      	bls.n	8007236 <UART_SetConfig+0x526>
 8007224:	69bb      	ldr	r3, [r7, #24]
 8007226:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800722a:	d204      	bcs.n	8007236 <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	69ba      	ldr	r2, [r7, #24]
 8007232:	60da      	str	r2, [r3, #12]
 8007234:	e001      	b.n	800723a <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8007236:	2301      	movs	r3, #1
 8007238:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2200      	movs	r2, #0
 800723e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007246:	7dfb      	ldrb	r3, [r7, #23]
}
 8007248:	4618      	mov	r0, r3
 800724a:	3720      	adds	r7, #32
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}
 8007250:	01e84800 	.word	0x01e84800
 8007254:	00f42400 	.word	0x00f42400

08007258 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007258:	b480      	push	{r7}
 800725a:	b083      	sub	sp, #12
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007264:	f003 0301 	and.w	r3, r3, #1
 8007268:	2b00      	cmp	r3, #0
 800726a:	d00a      	beq.n	8007282 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	430a      	orrs	r2, r1
 8007280:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007286:	f003 0302 	and.w	r3, r3, #2
 800728a:	2b00      	cmp	r3, #0
 800728c:	d00a      	beq.n	80072a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	430a      	orrs	r2, r1
 80072a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a8:	f003 0304 	and.w	r3, r3, #4
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d00a      	beq.n	80072c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	430a      	orrs	r2, r1
 80072c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ca:	f003 0308 	and.w	r3, r3, #8
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d00a      	beq.n	80072e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	430a      	orrs	r2, r1
 80072e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ec:	f003 0310 	and.w	r3, r3, #16
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d00a      	beq.n	800730a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	430a      	orrs	r2, r1
 8007308:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800730e:	f003 0320 	and.w	r3, r3, #32
 8007312:	2b00      	cmp	r3, #0
 8007314:	d00a      	beq.n	800732c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	430a      	orrs	r2, r1
 800732a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007334:	2b00      	cmp	r3, #0
 8007336:	d01a      	beq.n	800736e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	430a      	orrs	r2, r1
 800734c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007352:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007356:	d10a      	bne.n	800736e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	430a      	orrs	r2, r1
 800736c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007376:	2b00      	cmp	r3, #0
 8007378:	d00a      	beq.n	8007390 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	430a      	orrs	r2, r1
 800738e:	605a      	str	r2, [r3, #4]
  }
}
 8007390:	bf00      	nop
 8007392:	370c      	adds	r7, #12
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr

0800739c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b086      	sub	sp, #24
 80073a0:	af02      	add	r7, sp, #8
 80073a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2200      	movs	r2, #0
 80073a8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80073aa:	f7fb f885 	bl	80024b8 <HAL_GetTick>
 80073ae:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f003 0308 	and.w	r3, r3, #8
 80073ba:	2b08      	cmp	r3, #8
 80073bc:	d10e      	bne.n	80073dc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073be:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80073c2:	9300      	str	r3, [sp, #0]
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2200      	movs	r2, #0
 80073c8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f000 f814 	bl	80073fa <UART_WaitOnFlagUntilTimeout>
 80073d2:	4603      	mov	r3, r0
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d001      	beq.n	80073dc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073d8:	2303      	movs	r3, #3
 80073da:	e00a      	b.n	80073f2 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2220      	movs	r2, #32
 80073e0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2220      	movs	r2, #32
 80073e6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2200      	movs	r2, #0
 80073ec:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80073f0:	2300      	movs	r3, #0
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3710      	adds	r7, #16
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}

080073fa <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80073fa:	b580      	push	{r7, lr}
 80073fc:	b084      	sub	sp, #16
 80073fe:	af00      	add	r7, sp, #0
 8007400:	60f8      	str	r0, [r7, #12]
 8007402:	60b9      	str	r1, [r7, #8]
 8007404:	603b      	str	r3, [r7, #0]
 8007406:	4613      	mov	r3, r2
 8007408:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800740a:	e02a      	b.n	8007462 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800740c:	69bb      	ldr	r3, [r7, #24]
 800740e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007412:	d026      	beq.n	8007462 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007414:	f7fb f850 	bl	80024b8 <HAL_GetTick>
 8007418:	4602      	mov	r2, r0
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	1ad3      	subs	r3, r2, r3
 800741e:	69ba      	ldr	r2, [r7, #24]
 8007420:	429a      	cmp	r2, r3
 8007422:	d302      	bcc.n	800742a <UART_WaitOnFlagUntilTimeout+0x30>
 8007424:	69bb      	ldr	r3, [r7, #24]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d11b      	bne.n	8007462 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007438:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	689a      	ldr	r2, [r3, #8]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f022 0201 	bic.w	r2, r2, #1
 8007448:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2220      	movs	r2, #32
 800744e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2220      	movs	r2, #32
 8007454:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2200      	movs	r2, #0
 800745a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800745e:	2303      	movs	r3, #3
 8007460:	e00f      	b.n	8007482 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	69da      	ldr	r2, [r3, #28]
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	4013      	ands	r3, r2
 800746c:	68ba      	ldr	r2, [r7, #8]
 800746e:	429a      	cmp	r2, r3
 8007470:	bf0c      	ite	eq
 8007472:	2301      	moveq	r3, #1
 8007474:	2300      	movne	r3, #0
 8007476:	b2db      	uxtb	r3, r3
 8007478:	461a      	mov	r2, r3
 800747a:	79fb      	ldrb	r3, [r7, #7]
 800747c:	429a      	cmp	r2, r3
 800747e:	d0c5      	beq.n	800740c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007480:	2300      	movs	r3, #0
}
 8007482:	4618      	mov	r0, r3
 8007484:	3710      	adds	r7, #16
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}

0800748a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800748a:	b480      	push	{r7}
 800748c:	b083      	sub	sp, #12
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	681a      	ldr	r2, [r3, #0]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80074a0:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	689a      	ldr	r2, [r3, #8]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f022 0201 	bic.w	r2, r2, #1
 80074b0:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2220      	movs	r2, #32
 80074b6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2200      	movs	r2, #0
 80074bc:	661a      	str	r2, [r3, #96]	; 0x60
}
 80074be:	bf00      	nop
 80074c0:	370c      	adds	r7, #12
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr

080074ca <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80074ca:	b580      	push	{r7, lr}
 80074cc:	b084      	sub	sp, #16
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2200      	movs	r2, #0
 80074dc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2200      	movs	r2, #0
 80074e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80074e8:	68f8      	ldr	r0, [r7, #12]
 80074ea:	f7ff fc07 	bl	8006cfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074ee:	bf00      	nop
 80074f0:	3710      	adds	r7, #16
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}

080074f6 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80074f6:	b480      	push	{r7}
 80074f8:	b083      	sub	sp, #12
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007502:	2b21      	cmp	r3, #33	; 0x21
 8007504:	d12a      	bne.n	800755c <UART_TxISR_8BIT+0x66>
  {
    if (huart->TxXferCount == 0U)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800750c:	b29b      	uxth	r3, r3
 800750e:	2b00      	cmp	r3, #0
 8007510:	d110      	bne.n	8007534 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	681a      	ldr	r2, [r3, #0]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007520:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	681a      	ldr	r2, [r3, #0]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007530:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007532:	e013      	b.n	800755c <UART_TxISR_8BIT+0x66>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007538:	781a      	ldrb	r2, [r3, #0]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007544:	1c5a      	adds	r2, r3, #1
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007550:	b29b      	uxth	r3, r3
 8007552:	3b01      	subs	r3, #1
 8007554:	b29a      	uxth	r2, r3
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800755c:	bf00      	nop
 800755e:	370c      	adds	r7, #12
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr

08007568 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007568:	b480      	push	{r7}
 800756a:	b085      	sub	sp, #20
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007574:	2b21      	cmp	r3, #33	; 0x21
 8007576:	d12f      	bne.n	80075d8 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800757e:	b29b      	uxth	r3, r3
 8007580:	2b00      	cmp	r3, #0
 8007582:	d110      	bne.n	80075a6 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	681a      	ldr	r2, [r3, #0]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007592:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075a2:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80075a4:	e018      	b.n	80075d8 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075aa:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	881b      	ldrh	r3, [r3, #0]
 80075b0:	461a      	mov	r2, r3
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80075ba:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075c0:	1c9a      	adds	r2, r3, #2
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	3b01      	subs	r3, #1
 80075d0:	b29a      	uxth	r2, r3
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80075d8:	bf00      	nop
 80075da:	3714      	adds	r7, #20
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr

080075e4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b082      	sub	sp, #8
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	681a      	ldr	r2, [r3, #0]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075fa:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2220      	movs	r2, #32
 8007600:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2200      	movs	r2, #0
 8007606:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f7ff fb63 	bl	8006cd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800760e:	bf00      	nop
 8007610:	3708      	adds	r7, #8
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}

08007616 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007616:	b580      	push	{r7, lr}
 8007618:	b084      	sub	sp, #16
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007624:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800762a:	2b22      	cmp	r3, #34	; 0x22
 800762c:	d13a      	bne.n	80076a4 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007634:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007636:	89bb      	ldrh	r3, [r7, #12]
 8007638:	b2d9      	uxtb	r1, r3
 800763a:	89fb      	ldrh	r3, [r7, #14]
 800763c:	b2da      	uxtb	r2, r3
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007642:	400a      	ands	r2, r1
 8007644:	b2d2      	uxtb	r2, r2
 8007646:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800764c:	1c5a      	adds	r2, r3, #1
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007658:	b29b      	uxth	r3, r3
 800765a:	3b01      	subs	r3, #1
 800765c:	b29a      	uxth	r2, r3
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800766a:	b29b      	uxth	r3, r3
 800766c:	2b00      	cmp	r3, #0
 800766e:	d121      	bne.n	80076b4 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800767e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	689a      	ldr	r2, [r3, #8]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f022 0201 	bic.w	r2, r2, #1
 800768e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2220      	movs	r2, #32
 8007694:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f7ff fb23 	bl	8006ce8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80076a2:	e007      	b.n	80076b4 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	699a      	ldr	r2, [r3, #24]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f042 0208 	orr.w	r2, r2, #8
 80076b2:	619a      	str	r2, [r3, #24]
}
 80076b4:	bf00      	nop
 80076b6:	3710      	adds	r7, #16
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}

080076bc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b084      	sub	sp, #16
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80076ca:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076d0:	2b22      	cmp	r3, #34	; 0x22
 80076d2:	d13a      	bne.n	800774a <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076da:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076e0:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80076e2:	89ba      	ldrh	r2, [r7, #12]
 80076e4:	89fb      	ldrh	r3, [r7, #14]
 80076e6:	4013      	ands	r3, r2
 80076e8:	b29a      	uxth	r2, r3
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076f2:	1c9a      	adds	r2, r3, #2
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80076fe:	b29b      	uxth	r3, r3
 8007700:	3b01      	subs	r3, #1
 8007702:	b29a      	uxth	r2, r3
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007710:	b29b      	uxth	r3, r3
 8007712:	2b00      	cmp	r3, #0
 8007714:	d121      	bne.n	800775a <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	681a      	ldr	r2, [r3, #0]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007724:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	689a      	ldr	r2, [r3, #8]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f022 0201 	bic.w	r2, r2, #1
 8007734:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2220      	movs	r2, #32
 800773a:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2200      	movs	r2, #0
 8007740:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f7ff fad0 	bl	8006ce8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007748:	e007      	b.n	800775a <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	699a      	ldr	r2, [r3, #24]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f042 0208 	orr.w	r2, r2, #8
 8007758:	619a      	str	r2, [r3, #24]
}
 800775a:	bf00      	nop
 800775c:	3710      	adds	r7, #16
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
	...

08007764 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007764:	b084      	sub	sp, #16
 8007766:	b580      	push	{r7, lr}
 8007768:	b084      	sub	sp, #16
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
 800776e:	f107 001c 	add.w	r0, r7, #28
 8007772:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007778:	2b01      	cmp	r3, #1
 800777a:	d120      	bne.n	80077be <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007780:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	68da      	ldr	r2, [r3, #12]
 800778c:	4b20      	ldr	r3, [pc, #128]	; (8007810 <USB_CoreInit+0xac>)
 800778e:	4013      	ands	r3, r2
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	68db      	ldr	r3, [r3, #12]
 8007798:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80077a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077a2:	2b01      	cmp	r3, #1
 80077a4:	d105      	bne.n	80077b2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	68db      	ldr	r3, [r3, #12]
 80077aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 fa60 	bl	8007c78 <USB_CoreReset>
 80077b8:	4603      	mov	r3, r0
 80077ba:	73fb      	strb	r3, [r7, #15]
 80077bc:	e010      	b.n	80077e0 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	68db      	ldr	r3, [r3, #12]
 80077c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 fa54 	bl	8007c78 <USB_CoreReset>
 80077d0:	4603      	mov	r3, r0
 80077d2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80077e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d10b      	bne.n	80077fe <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	f043 0206 	orr.w	r2, r3, #6
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	f043 0220 	orr.w	r2, r3, #32
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80077fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007800:	4618      	mov	r0, r3
 8007802:	3710      	adds	r7, #16
 8007804:	46bd      	mov	sp, r7
 8007806:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800780a:	b004      	add	sp, #16
 800780c:	4770      	bx	lr
 800780e:	bf00      	nop
 8007810:	ffbdffbf 	.word	0xffbdffbf

08007814 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007814:	b480      	push	{r7}
 8007816:	b083      	sub	sp, #12
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	f023 0201 	bic.w	r2, r3, #1
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007828:	2300      	movs	r3, #0
}
 800782a:	4618      	mov	r0, r3
 800782c:	370c      	adds	r7, #12
 800782e:	46bd      	mov	sp, r7
 8007830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007834:	4770      	bx	lr

08007836 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007836:	b580      	push	{r7, lr}
 8007838:	b082      	sub	sp, #8
 800783a:	af00      	add	r7, sp, #0
 800783c:	6078      	str	r0, [r7, #4]
 800783e:	460b      	mov	r3, r1
 8007840:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	68db      	ldr	r3, [r3, #12]
 8007846:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800784e:	78fb      	ldrb	r3, [r7, #3]
 8007850:	2b01      	cmp	r3, #1
 8007852:	d106      	bne.n	8007862 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	68db      	ldr	r3, [r3, #12]
 8007858:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	60da      	str	r2, [r3, #12]
 8007860:	e00b      	b.n	800787a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007862:	78fb      	ldrb	r3, [r7, #3]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d106      	bne.n	8007876 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	68db      	ldr	r3, [r3, #12]
 800786c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	60da      	str	r2, [r3, #12]
 8007874:	e001      	b.n	800787a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007876:	2301      	movs	r3, #1
 8007878:	e003      	b.n	8007882 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800787a:	2032      	movs	r0, #50	; 0x32
 800787c:	f7fa fe28 	bl	80024d0 <HAL_Delay>

  return HAL_OK;
 8007880:	2300      	movs	r3, #0
}
 8007882:	4618      	mov	r0, r3
 8007884:	3708      	adds	r7, #8
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
	...

0800788c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800788c:	b084      	sub	sp, #16
 800788e:	b580      	push	{r7, lr}
 8007890:	b086      	sub	sp, #24
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
 8007896:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800789a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800789e:	2300      	movs	r3, #0
 80078a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80078a6:	2300      	movs	r3, #0
 80078a8:	613b      	str	r3, [r7, #16]
 80078aa:	e009      	b.n	80078c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	3340      	adds	r3, #64	; 0x40
 80078b2:	009b      	lsls	r3, r3, #2
 80078b4:	4413      	add	r3, r2
 80078b6:	2200      	movs	r2, #0
 80078b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	3301      	adds	r3, #1
 80078be:	613b      	str	r3, [r7, #16]
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	2b0e      	cmp	r3, #14
 80078c4:	d9f2      	bls.n	80078ac <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80078c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d112      	bne.n	80078f2 <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078d0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	601a      	str	r2, [r3, #0]
 80078f0:	e005      	b.n	80078fe <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007904:	461a      	mov	r2, r3
 8007906:	2300      	movs	r3, #0
 8007908:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007910:	4619      	mov	r1, r3
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007918:	461a      	mov	r2, r3
 800791a:	680b      	ldr	r3, [r1, #0]
 800791c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800791e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007920:	2b01      	cmp	r3, #1
 8007922:	d10c      	bne.n	800793e <USB_DevInit+0xb2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 8007924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007926:	2b00      	cmp	r3, #0
 8007928:	d104      	bne.n	8007934 <USB_DevInit+0xa8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800792a:	2100      	movs	r1, #0
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 f971 	bl	8007c14 <USB_SetDevSpeed>
 8007932:	e018      	b.n	8007966 <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007934:	2101      	movs	r1, #1
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 f96c 	bl	8007c14 <USB_SetDevSpeed>
 800793c:	e013      	b.n	8007966 <USB_DevInit+0xda>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800793e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007940:	2b03      	cmp	r3, #3
 8007942:	d10c      	bne.n	800795e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 8007944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007946:	2b00      	cmp	r3, #0
 8007948:	d104      	bne.n	8007954 <USB_DevInit+0xc8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800794a:	2100      	movs	r1, #0
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f000 f961 	bl	8007c14 <USB_SetDevSpeed>
 8007952:	e008      	b.n	8007966 <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007954:	2101      	movs	r1, #1
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 f95c 	bl	8007c14 <USB_SetDevSpeed>
 800795c:	e003      	b.n	8007966 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Full speed phy */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800795e:	2103      	movs	r1, #3
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f000 f957 	bl	8007c14 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007966:	2110      	movs	r1, #16
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f000 f90b 	bl	8007b84 <USB_FlushTxFifo>
 800796e:	4603      	mov	r3, r0
 8007970:	2b00      	cmp	r3, #0
 8007972:	d001      	beq.n	8007978 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007974:	2301      	movs	r3, #1
 8007976:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f000 f929 	bl	8007bd0 <USB_FlushRxFifo>
 800797e:	4603      	mov	r3, r0
 8007980:	2b00      	cmp	r3, #0
 8007982:	d001      	beq.n	8007988 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007984:	2301      	movs	r3, #1
 8007986:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800798e:	461a      	mov	r2, r3
 8007990:	2300      	movs	r3, #0
 8007992:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800799a:	461a      	mov	r2, r3
 800799c:	2300      	movs	r3, #0
 800799e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079a6:	461a      	mov	r2, r3
 80079a8:	2300      	movs	r3, #0
 80079aa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079ac:	2300      	movs	r3, #0
 80079ae:	613b      	str	r3, [r7, #16]
 80079b0:	e043      	b.n	8007a3a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	015a      	lsls	r2, r3, #5
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	4413      	add	r3, r2
 80079ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079c8:	d118      	bne.n	80079fc <USB_DevInit+0x170>
    {
      if (i == 0U)
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d10a      	bne.n	80079e6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	015a      	lsls	r2, r3, #5
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	4413      	add	r3, r2
 80079d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079dc:	461a      	mov	r2, r3
 80079de:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80079e2:	6013      	str	r3, [r2, #0]
 80079e4:	e013      	b.n	8007a0e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	015a      	lsls	r2, r3, #5
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	4413      	add	r3, r2
 80079ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079f2:	461a      	mov	r2, r3
 80079f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80079f8:	6013      	str	r3, [r2, #0]
 80079fa:	e008      	b.n	8007a0e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	015a      	lsls	r2, r3, #5
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	4413      	add	r3, r2
 8007a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a08:	461a      	mov	r2, r3
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	015a      	lsls	r2, r3, #5
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	4413      	add	r3, r2
 8007a16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	015a      	lsls	r2, r3, #5
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	4413      	add	r3, r2
 8007a28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007a32:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	3301      	adds	r3, #1
 8007a38:	613b      	str	r3, [r7, #16]
 8007a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3c:	693a      	ldr	r2, [r7, #16]
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d3b7      	bcc.n	80079b2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a42:	2300      	movs	r3, #0
 8007a44:	613b      	str	r3, [r7, #16]
 8007a46:	e043      	b.n	8007ad0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	015a      	lsls	r2, r3, #5
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	4413      	add	r3, r2
 8007a50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a5e:	d118      	bne.n	8007a92 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d10a      	bne.n	8007a7c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	015a      	lsls	r2, r3, #5
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	4413      	add	r3, r2
 8007a6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a72:	461a      	mov	r2, r3
 8007a74:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007a78:	6013      	str	r3, [r2, #0]
 8007a7a:	e013      	b.n	8007aa4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	015a      	lsls	r2, r3, #5
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	4413      	add	r3, r2
 8007a84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a88:	461a      	mov	r2, r3
 8007a8a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007a8e:	6013      	str	r3, [r2, #0]
 8007a90:	e008      	b.n	8007aa4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	015a      	lsls	r2, r3, #5
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	4413      	add	r3, r2
 8007a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	015a      	lsls	r2, r3, #5
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	4413      	add	r3, r2
 8007aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	015a      	lsls	r2, r3, #5
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	4413      	add	r3, r2
 8007abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007ac8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	3301      	adds	r3, #1
 8007ace:	613b      	str	r3, [r7, #16]
 8007ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad2:	693a      	ldr	r2, [r7, #16]
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d3b7      	bcc.n	8007a48 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ade:	691b      	ldr	r3, [r3, #16]
 8007ae0:	68fa      	ldr	r2, [r7, #12]
 8007ae2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ae6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007aea:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8007aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	d110      	bne.n	8007b14 <USB_DevInit+0x288>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007af8:	461a      	mov	r2, r3
 8007afa:	4b1e      	ldr	r3, [pc, #120]	; (8007b74 <USB_DevInit+0x2e8>)
 8007afc:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b0c:	4619      	mov	r1, r3
 8007b0e:	4b1a      	ldr	r3, [pc, #104]	; (8007b78 <USB_DevInit+0x2ec>)
 8007b10:	4313      	orrs	r3, r2
 8007b12:	630b      	str	r3, [r1, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2200      	movs	r2, #0
 8007b18:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007b20:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d105      	bne.n	8007b34 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	699b      	ldr	r3, [r3, #24]
 8007b2c:	f043 0210 	orr.w	r2, r3, #16
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	699a      	ldr	r2, [r3, #24]
 8007b38:	4b10      	ldr	r3, [pc, #64]	; (8007b7c <USB_DevInit+0x2f0>)
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	687a      	ldr	r2, [r7, #4]
 8007b3e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007b40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d005      	beq.n	8007b52 <USB_DevInit+0x2c6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	699b      	ldr	r3, [r3, #24]
 8007b4a:	f043 0208 	orr.w	r2, r3, #8
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007b52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	d105      	bne.n	8007b64 <USB_DevInit+0x2d8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	699a      	ldr	r2, [r3, #24]
 8007b5c:	4b08      	ldr	r3, [pc, #32]	; (8007b80 <USB_DevInit+0x2f4>)
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007b64:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	3718      	adds	r7, #24
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b70:	b004      	add	sp, #16
 8007b72:	4770      	bx	lr
 8007b74:	00800100 	.word	0x00800100
 8007b78:	00010003 	.word	0x00010003
 8007b7c:	803c3800 	.word	0x803c3800
 8007b80:	40000004 	.word	0x40000004

08007b84 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b085      	sub	sp, #20
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	019b      	lsls	r3, r3, #6
 8007b96:	f043 0220 	orr.w	r2, r3, #32
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	3301      	adds	r3, #1
 8007ba2:	60fb      	str	r3, [r7, #12]
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	4a09      	ldr	r2, [pc, #36]	; (8007bcc <USB_FlushTxFifo+0x48>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d901      	bls.n	8007bb0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007bac:	2303      	movs	r3, #3
 8007bae:	e006      	b.n	8007bbe <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	691b      	ldr	r3, [r3, #16]
 8007bb4:	f003 0320 	and.w	r3, r3, #32
 8007bb8:	2b20      	cmp	r3, #32
 8007bba:	d0f0      	beq.n	8007b9e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007bbc:	2300      	movs	r3, #0
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3714      	adds	r7, #20
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc8:	4770      	bx	lr
 8007bca:	bf00      	nop
 8007bcc:	00030d40 	.word	0x00030d40

08007bd0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b085      	sub	sp, #20
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2210      	movs	r2, #16
 8007be0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	3301      	adds	r3, #1
 8007be6:	60fb      	str	r3, [r7, #12]
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	4a09      	ldr	r2, [pc, #36]	; (8007c10 <USB_FlushRxFifo+0x40>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d901      	bls.n	8007bf4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007bf0:	2303      	movs	r3, #3
 8007bf2:	e006      	b.n	8007c02 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	691b      	ldr	r3, [r3, #16]
 8007bf8:	f003 0310 	and.w	r3, r3, #16
 8007bfc:	2b10      	cmp	r3, #16
 8007bfe:	d0f0      	beq.n	8007be2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007c00:	2300      	movs	r3, #0
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3714      	adds	r7, #20
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr
 8007c0e:	bf00      	nop
 8007c10:	00030d40 	.word	0x00030d40

08007c14 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b085      	sub	sp, #20
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	460b      	mov	r3, r1
 8007c1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	78fb      	ldrb	r3, [r7, #3]
 8007c2e:	68f9      	ldr	r1, [r7, #12]
 8007c30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c34:	4313      	orrs	r3, r2
 8007c36:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007c38:	2300      	movs	r3, #0
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3714      	adds	r7, #20
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c44:	4770      	bx	lr

08007c46 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007c46:	b580      	push	{r7, lr}
 8007c48:	b084      	sub	sp, #16
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	68fa      	ldr	r2, [r7, #12]
 8007c5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c60:	f043 0302 	orr.w	r3, r3, #2
 8007c64:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8007c66:	2003      	movs	r0, #3
 8007c68:	f7fa fc32 	bl	80024d0 <HAL_Delay>

  return HAL_OK;
 8007c6c:	2300      	movs	r3, #0
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3710      	adds	r7, #16
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}
	...

08007c78 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b085      	sub	sp, #20
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007c80:	2300      	movs	r3, #0
 8007c82:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	3301      	adds	r3, #1
 8007c88:	60fb      	str	r3, [r7, #12]
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	4a13      	ldr	r2, [pc, #76]	; (8007cdc <USB_CoreReset+0x64>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d901      	bls.n	8007c96 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007c92:	2303      	movs	r3, #3
 8007c94:	e01b      	b.n	8007cce <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	691b      	ldr	r3, [r3, #16]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	daf2      	bge.n	8007c84 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	691b      	ldr	r3, [r3, #16]
 8007ca6:	f043 0201 	orr.w	r2, r3, #1
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	60fb      	str	r3, [r7, #12]
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	4a09      	ldr	r2, [pc, #36]	; (8007cdc <USB_CoreReset+0x64>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d901      	bls.n	8007cc0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007cbc:	2303      	movs	r3, #3
 8007cbe:	e006      	b.n	8007cce <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	691b      	ldr	r3, [r3, #16]
 8007cc4:	f003 0301 	and.w	r3, r3, #1
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	d0f0      	beq.n	8007cae <USB_CoreReset+0x36>

  return HAL_OK;
 8007ccc:	2300      	movs	r3, #0
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3714      	adds	r7, #20
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd8:	4770      	bx	lr
 8007cda:	bf00      	nop
 8007cdc:	00030d40 	.word	0x00030d40

08007ce0 <atof>:
 8007ce0:	2100      	movs	r1, #0
 8007ce2:	f001 bcb9 	b.w	8009658 <strtod>
	...

08007ce8 <__errno>:
 8007ce8:	4b01      	ldr	r3, [pc, #4]	; (8007cf0 <__errno+0x8>)
 8007cea:	6818      	ldr	r0, [r3, #0]
 8007cec:	4770      	bx	lr
 8007cee:	bf00      	nop
 8007cf0:	2000000c 	.word	0x2000000c

08007cf4 <__libc_init_array>:
 8007cf4:	b570      	push	{r4, r5, r6, lr}
 8007cf6:	4e0d      	ldr	r6, [pc, #52]	; (8007d2c <__libc_init_array+0x38>)
 8007cf8:	4c0d      	ldr	r4, [pc, #52]	; (8007d30 <__libc_init_array+0x3c>)
 8007cfa:	1ba4      	subs	r4, r4, r6
 8007cfc:	10a4      	asrs	r4, r4, #2
 8007cfe:	2500      	movs	r5, #0
 8007d00:	42a5      	cmp	r5, r4
 8007d02:	d109      	bne.n	8007d18 <__libc_init_array+0x24>
 8007d04:	4e0b      	ldr	r6, [pc, #44]	; (8007d34 <__libc_init_array+0x40>)
 8007d06:	4c0c      	ldr	r4, [pc, #48]	; (8007d38 <__libc_init_array+0x44>)
 8007d08:	f003 fd6c 	bl	800b7e4 <_init>
 8007d0c:	1ba4      	subs	r4, r4, r6
 8007d0e:	10a4      	asrs	r4, r4, #2
 8007d10:	2500      	movs	r5, #0
 8007d12:	42a5      	cmp	r5, r4
 8007d14:	d105      	bne.n	8007d22 <__libc_init_array+0x2e>
 8007d16:	bd70      	pop	{r4, r5, r6, pc}
 8007d18:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007d1c:	4798      	blx	r3
 8007d1e:	3501      	adds	r5, #1
 8007d20:	e7ee      	b.n	8007d00 <__libc_init_array+0xc>
 8007d22:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007d26:	4798      	blx	r3
 8007d28:	3501      	adds	r5, #1
 8007d2a:	e7f2      	b.n	8007d12 <__libc_init_array+0x1e>
 8007d2c:	0800baf8 	.word	0x0800baf8
 8007d30:	0800baf8 	.word	0x0800baf8
 8007d34:	0800baf8 	.word	0x0800baf8
 8007d38:	0800bafc 	.word	0x0800bafc

08007d3c <memset>:
 8007d3c:	4402      	add	r2, r0
 8007d3e:	4603      	mov	r3, r0
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d100      	bne.n	8007d46 <memset+0xa>
 8007d44:	4770      	bx	lr
 8007d46:	f803 1b01 	strb.w	r1, [r3], #1
 8007d4a:	e7f9      	b.n	8007d40 <memset+0x4>

08007d4c <__cvt>:
 8007d4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d50:	ec55 4b10 	vmov	r4, r5, d0
 8007d54:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8007d56:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007d5a:	2d00      	cmp	r5, #0
 8007d5c:	460e      	mov	r6, r1
 8007d5e:	4691      	mov	r9, r2
 8007d60:	4619      	mov	r1, r3
 8007d62:	bfb8      	it	lt
 8007d64:	4622      	movlt	r2, r4
 8007d66:	462b      	mov	r3, r5
 8007d68:	f027 0720 	bic.w	r7, r7, #32
 8007d6c:	bfbb      	ittet	lt
 8007d6e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007d72:	461d      	movlt	r5, r3
 8007d74:	2300      	movge	r3, #0
 8007d76:	232d      	movlt	r3, #45	; 0x2d
 8007d78:	bfb8      	it	lt
 8007d7a:	4614      	movlt	r4, r2
 8007d7c:	2f46      	cmp	r7, #70	; 0x46
 8007d7e:	700b      	strb	r3, [r1, #0]
 8007d80:	d004      	beq.n	8007d8c <__cvt+0x40>
 8007d82:	2f45      	cmp	r7, #69	; 0x45
 8007d84:	d100      	bne.n	8007d88 <__cvt+0x3c>
 8007d86:	3601      	adds	r6, #1
 8007d88:	2102      	movs	r1, #2
 8007d8a:	e000      	b.n	8007d8e <__cvt+0x42>
 8007d8c:	2103      	movs	r1, #3
 8007d8e:	ab03      	add	r3, sp, #12
 8007d90:	9301      	str	r3, [sp, #4]
 8007d92:	ab02      	add	r3, sp, #8
 8007d94:	9300      	str	r3, [sp, #0]
 8007d96:	4632      	mov	r2, r6
 8007d98:	4653      	mov	r3, sl
 8007d9a:	ec45 4b10 	vmov	d0, r4, r5
 8007d9e:	f001 fd8b 	bl	80098b8 <_dtoa_r>
 8007da2:	2f47      	cmp	r7, #71	; 0x47
 8007da4:	4680      	mov	r8, r0
 8007da6:	d102      	bne.n	8007dae <__cvt+0x62>
 8007da8:	f019 0f01 	tst.w	r9, #1
 8007dac:	d026      	beq.n	8007dfc <__cvt+0xb0>
 8007dae:	2f46      	cmp	r7, #70	; 0x46
 8007db0:	eb08 0906 	add.w	r9, r8, r6
 8007db4:	d111      	bne.n	8007dda <__cvt+0x8e>
 8007db6:	f898 3000 	ldrb.w	r3, [r8]
 8007dba:	2b30      	cmp	r3, #48	; 0x30
 8007dbc:	d10a      	bne.n	8007dd4 <__cvt+0x88>
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	4620      	mov	r0, r4
 8007dc4:	4629      	mov	r1, r5
 8007dc6:	f7f8 fe9f 	bl	8000b08 <__aeabi_dcmpeq>
 8007dca:	b918      	cbnz	r0, 8007dd4 <__cvt+0x88>
 8007dcc:	f1c6 0601 	rsb	r6, r6, #1
 8007dd0:	f8ca 6000 	str.w	r6, [sl]
 8007dd4:	f8da 3000 	ldr.w	r3, [sl]
 8007dd8:	4499      	add	r9, r3
 8007dda:	2200      	movs	r2, #0
 8007ddc:	2300      	movs	r3, #0
 8007dde:	4620      	mov	r0, r4
 8007de0:	4629      	mov	r1, r5
 8007de2:	f7f8 fe91 	bl	8000b08 <__aeabi_dcmpeq>
 8007de6:	b938      	cbnz	r0, 8007df8 <__cvt+0xac>
 8007de8:	2230      	movs	r2, #48	; 0x30
 8007dea:	9b03      	ldr	r3, [sp, #12]
 8007dec:	454b      	cmp	r3, r9
 8007dee:	d205      	bcs.n	8007dfc <__cvt+0xb0>
 8007df0:	1c59      	adds	r1, r3, #1
 8007df2:	9103      	str	r1, [sp, #12]
 8007df4:	701a      	strb	r2, [r3, #0]
 8007df6:	e7f8      	b.n	8007dea <__cvt+0x9e>
 8007df8:	f8cd 900c 	str.w	r9, [sp, #12]
 8007dfc:	9b03      	ldr	r3, [sp, #12]
 8007dfe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e00:	eba3 0308 	sub.w	r3, r3, r8
 8007e04:	4640      	mov	r0, r8
 8007e06:	6013      	str	r3, [r2, #0]
 8007e08:	b004      	add	sp, #16
 8007e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007e0e <__exponent>:
 8007e0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e10:	2900      	cmp	r1, #0
 8007e12:	4604      	mov	r4, r0
 8007e14:	bfba      	itte	lt
 8007e16:	4249      	neglt	r1, r1
 8007e18:	232d      	movlt	r3, #45	; 0x2d
 8007e1a:	232b      	movge	r3, #43	; 0x2b
 8007e1c:	2909      	cmp	r1, #9
 8007e1e:	f804 2b02 	strb.w	r2, [r4], #2
 8007e22:	7043      	strb	r3, [r0, #1]
 8007e24:	dd20      	ble.n	8007e68 <__exponent+0x5a>
 8007e26:	f10d 0307 	add.w	r3, sp, #7
 8007e2a:	461f      	mov	r7, r3
 8007e2c:	260a      	movs	r6, #10
 8007e2e:	fb91 f5f6 	sdiv	r5, r1, r6
 8007e32:	fb06 1115 	mls	r1, r6, r5, r1
 8007e36:	3130      	adds	r1, #48	; 0x30
 8007e38:	2d09      	cmp	r5, #9
 8007e3a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007e3e:	f103 32ff 	add.w	r2, r3, #4294967295
 8007e42:	4629      	mov	r1, r5
 8007e44:	dc09      	bgt.n	8007e5a <__exponent+0x4c>
 8007e46:	3130      	adds	r1, #48	; 0x30
 8007e48:	3b02      	subs	r3, #2
 8007e4a:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007e4e:	42bb      	cmp	r3, r7
 8007e50:	4622      	mov	r2, r4
 8007e52:	d304      	bcc.n	8007e5e <__exponent+0x50>
 8007e54:	1a10      	subs	r0, r2, r0
 8007e56:	b003      	add	sp, #12
 8007e58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e5a:	4613      	mov	r3, r2
 8007e5c:	e7e7      	b.n	8007e2e <__exponent+0x20>
 8007e5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e62:	f804 2b01 	strb.w	r2, [r4], #1
 8007e66:	e7f2      	b.n	8007e4e <__exponent+0x40>
 8007e68:	2330      	movs	r3, #48	; 0x30
 8007e6a:	4419      	add	r1, r3
 8007e6c:	7083      	strb	r3, [r0, #2]
 8007e6e:	1d02      	adds	r2, r0, #4
 8007e70:	70c1      	strb	r1, [r0, #3]
 8007e72:	e7ef      	b.n	8007e54 <__exponent+0x46>

08007e74 <_printf_float>:
 8007e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e78:	b08d      	sub	sp, #52	; 0x34
 8007e7a:	460c      	mov	r4, r1
 8007e7c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007e80:	4616      	mov	r6, r2
 8007e82:	461f      	mov	r7, r3
 8007e84:	4605      	mov	r5, r0
 8007e86:	f002 fdfb 	bl	800aa80 <_localeconv_r>
 8007e8a:	6803      	ldr	r3, [r0, #0]
 8007e8c:	9304      	str	r3, [sp, #16]
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f7f8 f9be 	bl	8000210 <strlen>
 8007e94:	2300      	movs	r3, #0
 8007e96:	930a      	str	r3, [sp, #40]	; 0x28
 8007e98:	f8d8 3000 	ldr.w	r3, [r8]
 8007e9c:	9005      	str	r0, [sp, #20]
 8007e9e:	3307      	adds	r3, #7
 8007ea0:	f023 0307 	bic.w	r3, r3, #7
 8007ea4:	f103 0208 	add.w	r2, r3, #8
 8007ea8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007eac:	f8d4 b000 	ldr.w	fp, [r4]
 8007eb0:	f8c8 2000 	str.w	r2, [r8]
 8007eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007ebc:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007ec0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007ec4:	9307      	str	r3, [sp, #28]
 8007ec6:	f8cd 8018 	str.w	r8, [sp, #24]
 8007eca:	f04f 32ff 	mov.w	r2, #4294967295
 8007ece:	4ba7      	ldr	r3, [pc, #668]	; (800816c <_printf_float+0x2f8>)
 8007ed0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ed4:	f7f8 fe4a 	bl	8000b6c <__aeabi_dcmpun>
 8007ed8:	bb70      	cbnz	r0, 8007f38 <_printf_float+0xc4>
 8007eda:	f04f 32ff 	mov.w	r2, #4294967295
 8007ede:	4ba3      	ldr	r3, [pc, #652]	; (800816c <_printf_float+0x2f8>)
 8007ee0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ee4:	f7f8 fe24 	bl	8000b30 <__aeabi_dcmple>
 8007ee8:	bb30      	cbnz	r0, 8007f38 <_printf_float+0xc4>
 8007eea:	2200      	movs	r2, #0
 8007eec:	2300      	movs	r3, #0
 8007eee:	4640      	mov	r0, r8
 8007ef0:	4649      	mov	r1, r9
 8007ef2:	f7f8 fe13 	bl	8000b1c <__aeabi_dcmplt>
 8007ef6:	b110      	cbz	r0, 8007efe <_printf_float+0x8a>
 8007ef8:	232d      	movs	r3, #45	; 0x2d
 8007efa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007efe:	4a9c      	ldr	r2, [pc, #624]	; (8008170 <_printf_float+0x2fc>)
 8007f00:	4b9c      	ldr	r3, [pc, #624]	; (8008174 <_printf_float+0x300>)
 8007f02:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007f06:	bf8c      	ite	hi
 8007f08:	4690      	movhi	r8, r2
 8007f0a:	4698      	movls	r8, r3
 8007f0c:	2303      	movs	r3, #3
 8007f0e:	f02b 0204 	bic.w	r2, fp, #4
 8007f12:	6123      	str	r3, [r4, #16]
 8007f14:	6022      	str	r2, [r4, #0]
 8007f16:	f04f 0900 	mov.w	r9, #0
 8007f1a:	9700      	str	r7, [sp, #0]
 8007f1c:	4633      	mov	r3, r6
 8007f1e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007f20:	4621      	mov	r1, r4
 8007f22:	4628      	mov	r0, r5
 8007f24:	f000 f9e6 	bl	80082f4 <_printf_common>
 8007f28:	3001      	adds	r0, #1
 8007f2a:	f040 808d 	bne.w	8008048 <_printf_float+0x1d4>
 8007f2e:	f04f 30ff 	mov.w	r0, #4294967295
 8007f32:	b00d      	add	sp, #52	; 0x34
 8007f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f38:	4642      	mov	r2, r8
 8007f3a:	464b      	mov	r3, r9
 8007f3c:	4640      	mov	r0, r8
 8007f3e:	4649      	mov	r1, r9
 8007f40:	f7f8 fe14 	bl	8000b6c <__aeabi_dcmpun>
 8007f44:	b110      	cbz	r0, 8007f4c <_printf_float+0xd8>
 8007f46:	4a8c      	ldr	r2, [pc, #560]	; (8008178 <_printf_float+0x304>)
 8007f48:	4b8c      	ldr	r3, [pc, #560]	; (800817c <_printf_float+0x308>)
 8007f4a:	e7da      	b.n	8007f02 <_printf_float+0x8e>
 8007f4c:	6861      	ldr	r1, [r4, #4]
 8007f4e:	1c4b      	adds	r3, r1, #1
 8007f50:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8007f54:	a80a      	add	r0, sp, #40	; 0x28
 8007f56:	d13e      	bne.n	8007fd6 <_printf_float+0x162>
 8007f58:	2306      	movs	r3, #6
 8007f5a:	6063      	str	r3, [r4, #4]
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007f62:	ab09      	add	r3, sp, #36	; 0x24
 8007f64:	9300      	str	r3, [sp, #0]
 8007f66:	ec49 8b10 	vmov	d0, r8, r9
 8007f6a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007f6e:	6022      	str	r2, [r4, #0]
 8007f70:	f8cd a004 	str.w	sl, [sp, #4]
 8007f74:	6861      	ldr	r1, [r4, #4]
 8007f76:	4628      	mov	r0, r5
 8007f78:	f7ff fee8 	bl	8007d4c <__cvt>
 8007f7c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8007f80:	2b47      	cmp	r3, #71	; 0x47
 8007f82:	4680      	mov	r8, r0
 8007f84:	d109      	bne.n	8007f9a <_printf_float+0x126>
 8007f86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f88:	1cd8      	adds	r0, r3, #3
 8007f8a:	db02      	blt.n	8007f92 <_printf_float+0x11e>
 8007f8c:	6862      	ldr	r2, [r4, #4]
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	dd47      	ble.n	8008022 <_printf_float+0x1ae>
 8007f92:	f1aa 0a02 	sub.w	sl, sl, #2
 8007f96:	fa5f fa8a 	uxtb.w	sl, sl
 8007f9a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007f9e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007fa0:	d824      	bhi.n	8007fec <_printf_float+0x178>
 8007fa2:	3901      	subs	r1, #1
 8007fa4:	4652      	mov	r2, sl
 8007fa6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007faa:	9109      	str	r1, [sp, #36]	; 0x24
 8007fac:	f7ff ff2f 	bl	8007e0e <__exponent>
 8007fb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007fb2:	1813      	adds	r3, r2, r0
 8007fb4:	2a01      	cmp	r2, #1
 8007fb6:	4681      	mov	r9, r0
 8007fb8:	6123      	str	r3, [r4, #16]
 8007fba:	dc02      	bgt.n	8007fc2 <_printf_float+0x14e>
 8007fbc:	6822      	ldr	r2, [r4, #0]
 8007fbe:	07d1      	lsls	r1, r2, #31
 8007fc0:	d501      	bpl.n	8007fc6 <_printf_float+0x152>
 8007fc2:	3301      	adds	r3, #1
 8007fc4:	6123      	str	r3, [r4, #16]
 8007fc6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d0a5      	beq.n	8007f1a <_printf_float+0xa6>
 8007fce:	232d      	movs	r3, #45	; 0x2d
 8007fd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fd4:	e7a1      	b.n	8007f1a <_printf_float+0xa6>
 8007fd6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8007fda:	f000 8177 	beq.w	80082cc <_printf_float+0x458>
 8007fde:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007fe2:	d1bb      	bne.n	8007f5c <_printf_float+0xe8>
 8007fe4:	2900      	cmp	r1, #0
 8007fe6:	d1b9      	bne.n	8007f5c <_printf_float+0xe8>
 8007fe8:	2301      	movs	r3, #1
 8007fea:	e7b6      	b.n	8007f5a <_printf_float+0xe6>
 8007fec:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8007ff0:	d119      	bne.n	8008026 <_printf_float+0x1b2>
 8007ff2:	2900      	cmp	r1, #0
 8007ff4:	6863      	ldr	r3, [r4, #4]
 8007ff6:	dd0c      	ble.n	8008012 <_printf_float+0x19e>
 8007ff8:	6121      	str	r1, [r4, #16]
 8007ffa:	b913      	cbnz	r3, 8008002 <_printf_float+0x18e>
 8007ffc:	6822      	ldr	r2, [r4, #0]
 8007ffe:	07d2      	lsls	r2, r2, #31
 8008000:	d502      	bpl.n	8008008 <_printf_float+0x194>
 8008002:	3301      	adds	r3, #1
 8008004:	440b      	add	r3, r1
 8008006:	6123      	str	r3, [r4, #16]
 8008008:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800800a:	65a3      	str	r3, [r4, #88]	; 0x58
 800800c:	f04f 0900 	mov.w	r9, #0
 8008010:	e7d9      	b.n	8007fc6 <_printf_float+0x152>
 8008012:	b913      	cbnz	r3, 800801a <_printf_float+0x1a6>
 8008014:	6822      	ldr	r2, [r4, #0]
 8008016:	07d0      	lsls	r0, r2, #31
 8008018:	d501      	bpl.n	800801e <_printf_float+0x1aa>
 800801a:	3302      	adds	r3, #2
 800801c:	e7f3      	b.n	8008006 <_printf_float+0x192>
 800801e:	2301      	movs	r3, #1
 8008020:	e7f1      	b.n	8008006 <_printf_float+0x192>
 8008022:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8008026:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800802a:	4293      	cmp	r3, r2
 800802c:	db05      	blt.n	800803a <_printf_float+0x1c6>
 800802e:	6822      	ldr	r2, [r4, #0]
 8008030:	6123      	str	r3, [r4, #16]
 8008032:	07d1      	lsls	r1, r2, #31
 8008034:	d5e8      	bpl.n	8008008 <_printf_float+0x194>
 8008036:	3301      	adds	r3, #1
 8008038:	e7e5      	b.n	8008006 <_printf_float+0x192>
 800803a:	2b00      	cmp	r3, #0
 800803c:	bfd4      	ite	le
 800803e:	f1c3 0302 	rsble	r3, r3, #2
 8008042:	2301      	movgt	r3, #1
 8008044:	4413      	add	r3, r2
 8008046:	e7de      	b.n	8008006 <_printf_float+0x192>
 8008048:	6823      	ldr	r3, [r4, #0]
 800804a:	055a      	lsls	r2, r3, #21
 800804c:	d407      	bmi.n	800805e <_printf_float+0x1ea>
 800804e:	6923      	ldr	r3, [r4, #16]
 8008050:	4642      	mov	r2, r8
 8008052:	4631      	mov	r1, r6
 8008054:	4628      	mov	r0, r5
 8008056:	47b8      	blx	r7
 8008058:	3001      	adds	r0, #1
 800805a:	d12b      	bne.n	80080b4 <_printf_float+0x240>
 800805c:	e767      	b.n	8007f2e <_printf_float+0xba>
 800805e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008062:	f240 80dc 	bls.w	800821e <_printf_float+0x3aa>
 8008066:	2200      	movs	r2, #0
 8008068:	2300      	movs	r3, #0
 800806a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800806e:	f7f8 fd4b 	bl	8000b08 <__aeabi_dcmpeq>
 8008072:	2800      	cmp	r0, #0
 8008074:	d033      	beq.n	80080de <_printf_float+0x26a>
 8008076:	2301      	movs	r3, #1
 8008078:	4a41      	ldr	r2, [pc, #260]	; (8008180 <_printf_float+0x30c>)
 800807a:	4631      	mov	r1, r6
 800807c:	4628      	mov	r0, r5
 800807e:	47b8      	blx	r7
 8008080:	3001      	adds	r0, #1
 8008082:	f43f af54 	beq.w	8007f2e <_printf_float+0xba>
 8008086:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800808a:	429a      	cmp	r2, r3
 800808c:	db02      	blt.n	8008094 <_printf_float+0x220>
 800808e:	6823      	ldr	r3, [r4, #0]
 8008090:	07d8      	lsls	r0, r3, #31
 8008092:	d50f      	bpl.n	80080b4 <_printf_float+0x240>
 8008094:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008098:	4631      	mov	r1, r6
 800809a:	4628      	mov	r0, r5
 800809c:	47b8      	blx	r7
 800809e:	3001      	adds	r0, #1
 80080a0:	f43f af45 	beq.w	8007f2e <_printf_float+0xba>
 80080a4:	f04f 0800 	mov.w	r8, #0
 80080a8:	f104 091a 	add.w	r9, r4, #26
 80080ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080ae:	3b01      	subs	r3, #1
 80080b0:	4543      	cmp	r3, r8
 80080b2:	dc09      	bgt.n	80080c8 <_printf_float+0x254>
 80080b4:	6823      	ldr	r3, [r4, #0]
 80080b6:	079b      	lsls	r3, r3, #30
 80080b8:	f100 8103 	bmi.w	80082c2 <_printf_float+0x44e>
 80080bc:	68e0      	ldr	r0, [r4, #12]
 80080be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080c0:	4298      	cmp	r0, r3
 80080c2:	bfb8      	it	lt
 80080c4:	4618      	movlt	r0, r3
 80080c6:	e734      	b.n	8007f32 <_printf_float+0xbe>
 80080c8:	2301      	movs	r3, #1
 80080ca:	464a      	mov	r2, r9
 80080cc:	4631      	mov	r1, r6
 80080ce:	4628      	mov	r0, r5
 80080d0:	47b8      	blx	r7
 80080d2:	3001      	adds	r0, #1
 80080d4:	f43f af2b 	beq.w	8007f2e <_printf_float+0xba>
 80080d8:	f108 0801 	add.w	r8, r8, #1
 80080dc:	e7e6      	b.n	80080ac <_printf_float+0x238>
 80080de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	dc2b      	bgt.n	800813c <_printf_float+0x2c8>
 80080e4:	2301      	movs	r3, #1
 80080e6:	4a26      	ldr	r2, [pc, #152]	; (8008180 <_printf_float+0x30c>)
 80080e8:	4631      	mov	r1, r6
 80080ea:	4628      	mov	r0, r5
 80080ec:	47b8      	blx	r7
 80080ee:	3001      	adds	r0, #1
 80080f0:	f43f af1d 	beq.w	8007f2e <_printf_float+0xba>
 80080f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080f6:	b923      	cbnz	r3, 8008102 <_printf_float+0x28e>
 80080f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080fa:	b913      	cbnz	r3, 8008102 <_printf_float+0x28e>
 80080fc:	6823      	ldr	r3, [r4, #0]
 80080fe:	07d9      	lsls	r1, r3, #31
 8008100:	d5d8      	bpl.n	80080b4 <_printf_float+0x240>
 8008102:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008106:	4631      	mov	r1, r6
 8008108:	4628      	mov	r0, r5
 800810a:	47b8      	blx	r7
 800810c:	3001      	adds	r0, #1
 800810e:	f43f af0e 	beq.w	8007f2e <_printf_float+0xba>
 8008112:	f04f 0900 	mov.w	r9, #0
 8008116:	f104 0a1a 	add.w	sl, r4, #26
 800811a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800811c:	425b      	negs	r3, r3
 800811e:	454b      	cmp	r3, r9
 8008120:	dc01      	bgt.n	8008126 <_printf_float+0x2b2>
 8008122:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008124:	e794      	b.n	8008050 <_printf_float+0x1dc>
 8008126:	2301      	movs	r3, #1
 8008128:	4652      	mov	r2, sl
 800812a:	4631      	mov	r1, r6
 800812c:	4628      	mov	r0, r5
 800812e:	47b8      	blx	r7
 8008130:	3001      	adds	r0, #1
 8008132:	f43f aefc 	beq.w	8007f2e <_printf_float+0xba>
 8008136:	f109 0901 	add.w	r9, r9, #1
 800813a:	e7ee      	b.n	800811a <_printf_float+0x2a6>
 800813c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800813e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008140:	429a      	cmp	r2, r3
 8008142:	bfa8      	it	ge
 8008144:	461a      	movge	r2, r3
 8008146:	2a00      	cmp	r2, #0
 8008148:	4691      	mov	r9, r2
 800814a:	dd07      	ble.n	800815c <_printf_float+0x2e8>
 800814c:	4613      	mov	r3, r2
 800814e:	4631      	mov	r1, r6
 8008150:	4642      	mov	r2, r8
 8008152:	4628      	mov	r0, r5
 8008154:	47b8      	blx	r7
 8008156:	3001      	adds	r0, #1
 8008158:	f43f aee9 	beq.w	8007f2e <_printf_float+0xba>
 800815c:	f104 031a 	add.w	r3, r4, #26
 8008160:	f04f 0b00 	mov.w	fp, #0
 8008164:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008168:	9306      	str	r3, [sp, #24]
 800816a:	e015      	b.n	8008198 <_printf_float+0x324>
 800816c:	7fefffff 	.word	0x7fefffff
 8008170:	0800b840 	.word	0x0800b840
 8008174:	0800b83c 	.word	0x0800b83c
 8008178:	0800b848 	.word	0x0800b848
 800817c:	0800b844 	.word	0x0800b844
 8008180:	0800b84c 	.word	0x0800b84c
 8008184:	2301      	movs	r3, #1
 8008186:	9a06      	ldr	r2, [sp, #24]
 8008188:	4631      	mov	r1, r6
 800818a:	4628      	mov	r0, r5
 800818c:	47b8      	blx	r7
 800818e:	3001      	adds	r0, #1
 8008190:	f43f aecd 	beq.w	8007f2e <_printf_float+0xba>
 8008194:	f10b 0b01 	add.w	fp, fp, #1
 8008198:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800819c:	ebaa 0309 	sub.w	r3, sl, r9
 80081a0:	455b      	cmp	r3, fp
 80081a2:	dcef      	bgt.n	8008184 <_printf_float+0x310>
 80081a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80081a8:	429a      	cmp	r2, r3
 80081aa:	44d0      	add	r8, sl
 80081ac:	db15      	blt.n	80081da <_printf_float+0x366>
 80081ae:	6823      	ldr	r3, [r4, #0]
 80081b0:	07da      	lsls	r2, r3, #31
 80081b2:	d412      	bmi.n	80081da <_printf_float+0x366>
 80081b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80081b8:	eba3 020a 	sub.w	r2, r3, sl
 80081bc:	eba3 0a01 	sub.w	sl, r3, r1
 80081c0:	4592      	cmp	sl, r2
 80081c2:	bfa8      	it	ge
 80081c4:	4692      	movge	sl, r2
 80081c6:	f1ba 0f00 	cmp.w	sl, #0
 80081ca:	dc0e      	bgt.n	80081ea <_printf_float+0x376>
 80081cc:	f04f 0800 	mov.w	r8, #0
 80081d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80081d4:	f104 091a 	add.w	r9, r4, #26
 80081d8:	e019      	b.n	800820e <_printf_float+0x39a>
 80081da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081de:	4631      	mov	r1, r6
 80081e0:	4628      	mov	r0, r5
 80081e2:	47b8      	blx	r7
 80081e4:	3001      	adds	r0, #1
 80081e6:	d1e5      	bne.n	80081b4 <_printf_float+0x340>
 80081e8:	e6a1      	b.n	8007f2e <_printf_float+0xba>
 80081ea:	4653      	mov	r3, sl
 80081ec:	4642      	mov	r2, r8
 80081ee:	4631      	mov	r1, r6
 80081f0:	4628      	mov	r0, r5
 80081f2:	47b8      	blx	r7
 80081f4:	3001      	adds	r0, #1
 80081f6:	d1e9      	bne.n	80081cc <_printf_float+0x358>
 80081f8:	e699      	b.n	8007f2e <_printf_float+0xba>
 80081fa:	2301      	movs	r3, #1
 80081fc:	464a      	mov	r2, r9
 80081fe:	4631      	mov	r1, r6
 8008200:	4628      	mov	r0, r5
 8008202:	47b8      	blx	r7
 8008204:	3001      	adds	r0, #1
 8008206:	f43f ae92 	beq.w	8007f2e <_printf_float+0xba>
 800820a:	f108 0801 	add.w	r8, r8, #1
 800820e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008212:	1a9b      	subs	r3, r3, r2
 8008214:	eba3 030a 	sub.w	r3, r3, sl
 8008218:	4543      	cmp	r3, r8
 800821a:	dcee      	bgt.n	80081fa <_printf_float+0x386>
 800821c:	e74a      	b.n	80080b4 <_printf_float+0x240>
 800821e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008220:	2a01      	cmp	r2, #1
 8008222:	dc01      	bgt.n	8008228 <_printf_float+0x3b4>
 8008224:	07db      	lsls	r3, r3, #31
 8008226:	d53a      	bpl.n	800829e <_printf_float+0x42a>
 8008228:	2301      	movs	r3, #1
 800822a:	4642      	mov	r2, r8
 800822c:	4631      	mov	r1, r6
 800822e:	4628      	mov	r0, r5
 8008230:	47b8      	blx	r7
 8008232:	3001      	adds	r0, #1
 8008234:	f43f ae7b 	beq.w	8007f2e <_printf_float+0xba>
 8008238:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800823c:	4631      	mov	r1, r6
 800823e:	4628      	mov	r0, r5
 8008240:	47b8      	blx	r7
 8008242:	3001      	adds	r0, #1
 8008244:	f108 0801 	add.w	r8, r8, #1
 8008248:	f43f ae71 	beq.w	8007f2e <_printf_float+0xba>
 800824c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800824e:	2200      	movs	r2, #0
 8008250:	f103 3aff 	add.w	sl, r3, #4294967295
 8008254:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008258:	2300      	movs	r3, #0
 800825a:	f7f8 fc55 	bl	8000b08 <__aeabi_dcmpeq>
 800825e:	b9c8      	cbnz	r0, 8008294 <_printf_float+0x420>
 8008260:	4653      	mov	r3, sl
 8008262:	4642      	mov	r2, r8
 8008264:	4631      	mov	r1, r6
 8008266:	4628      	mov	r0, r5
 8008268:	47b8      	blx	r7
 800826a:	3001      	adds	r0, #1
 800826c:	d10e      	bne.n	800828c <_printf_float+0x418>
 800826e:	e65e      	b.n	8007f2e <_printf_float+0xba>
 8008270:	2301      	movs	r3, #1
 8008272:	4652      	mov	r2, sl
 8008274:	4631      	mov	r1, r6
 8008276:	4628      	mov	r0, r5
 8008278:	47b8      	blx	r7
 800827a:	3001      	adds	r0, #1
 800827c:	f43f ae57 	beq.w	8007f2e <_printf_float+0xba>
 8008280:	f108 0801 	add.w	r8, r8, #1
 8008284:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008286:	3b01      	subs	r3, #1
 8008288:	4543      	cmp	r3, r8
 800828a:	dcf1      	bgt.n	8008270 <_printf_float+0x3fc>
 800828c:	464b      	mov	r3, r9
 800828e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008292:	e6de      	b.n	8008052 <_printf_float+0x1de>
 8008294:	f04f 0800 	mov.w	r8, #0
 8008298:	f104 0a1a 	add.w	sl, r4, #26
 800829c:	e7f2      	b.n	8008284 <_printf_float+0x410>
 800829e:	2301      	movs	r3, #1
 80082a0:	e7df      	b.n	8008262 <_printf_float+0x3ee>
 80082a2:	2301      	movs	r3, #1
 80082a4:	464a      	mov	r2, r9
 80082a6:	4631      	mov	r1, r6
 80082a8:	4628      	mov	r0, r5
 80082aa:	47b8      	blx	r7
 80082ac:	3001      	adds	r0, #1
 80082ae:	f43f ae3e 	beq.w	8007f2e <_printf_float+0xba>
 80082b2:	f108 0801 	add.w	r8, r8, #1
 80082b6:	68e3      	ldr	r3, [r4, #12]
 80082b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80082ba:	1a9b      	subs	r3, r3, r2
 80082bc:	4543      	cmp	r3, r8
 80082be:	dcf0      	bgt.n	80082a2 <_printf_float+0x42e>
 80082c0:	e6fc      	b.n	80080bc <_printf_float+0x248>
 80082c2:	f04f 0800 	mov.w	r8, #0
 80082c6:	f104 0919 	add.w	r9, r4, #25
 80082ca:	e7f4      	b.n	80082b6 <_printf_float+0x442>
 80082cc:	2900      	cmp	r1, #0
 80082ce:	f43f ae8b 	beq.w	8007fe8 <_printf_float+0x174>
 80082d2:	2300      	movs	r3, #0
 80082d4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80082d8:	ab09      	add	r3, sp, #36	; 0x24
 80082da:	9300      	str	r3, [sp, #0]
 80082dc:	ec49 8b10 	vmov	d0, r8, r9
 80082e0:	6022      	str	r2, [r4, #0]
 80082e2:	f8cd a004 	str.w	sl, [sp, #4]
 80082e6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80082ea:	4628      	mov	r0, r5
 80082ec:	f7ff fd2e 	bl	8007d4c <__cvt>
 80082f0:	4680      	mov	r8, r0
 80082f2:	e648      	b.n	8007f86 <_printf_float+0x112>

080082f4 <_printf_common>:
 80082f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082f8:	4691      	mov	r9, r2
 80082fa:	461f      	mov	r7, r3
 80082fc:	688a      	ldr	r2, [r1, #8]
 80082fe:	690b      	ldr	r3, [r1, #16]
 8008300:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008304:	4293      	cmp	r3, r2
 8008306:	bfb8      	it	lt
 8008308:	4613      	movlt	r3, r2
 800830a:	f8c9 3000 	str.w	r3, [r9]
 800830e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008312:	4606      	mov	r6, r0
 8008314:	460c      	mov	r4, r1
 8008316:	b112      	cbz	r2, 800831e <_printf_common+0x2a>
 8008318:	3301      	adds	r3, #1
 800831a:	f8c9 3000 	str.w	r3, [r9]
 800831e:	6823      	ldr	r3, [r4, #0]
 8008320:	0699      	lsls	r1, r3, #26
 8008322:	bf42      	ittt	mi
 8008324:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008328:	3302      	addmi	r3, #2
 800832a:	f8c9 3000 	strmi.w	r3, [r9]
 800832e:	6825      	ldr	r5, [r4, #0]
 8008330:	f015 0506 	ands.w	r5, r5, #6
 8008334:	d107      	bne.n	8008346 <_printf_common+0x52>
 8008336:	f104 0a19 	add.w	sl, r4, #25
 800833a:	68e3      	ldr	r3, [r4, #12]
 800833c:	f8d9 2000 	ldr.w	r2, [r9]
 8008340:	1a9b      	subs	r3, r3, r2
 8008342:	42ab      	cmp	r3, r5
 8008344:	dc28      	bgt.n	8008398 <_printf_common+0xa4>
 8008346:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800834a:	6822      	ldr	r2, [r4, #0]
 800834c:	3300      	adds	r3, #0
 800834e:	bf18      	it	ne
 8008350:	2301      	movne	r3, #1
 8008352:	0692      	lsls	r2, r2, #26
 8008354:	d42d      	bmi.n	80083b2 <_printf_common+0xbe>
 8008356:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800835a:	4639      	mov	r1, r7
 800835c:	4630      	mov	r0, r6
 800835e:	47c0      	blx	r8
 8008360:	3001      	adds	r0, #1
 8008362:	d020      	beq.n	80083a6 <_printf_common+0xb2>
 8008364:	6823      	ldr	r3, [r4, #0]
 8008366:	68e5      	ldr	r5, [r4, #12]
 8008368:	f8d9 2000 	ldr.w	r2, [r9]
 800836c:	f003 0306 	and.w	r3, r3, #6
 8008370:	2b04      	cmp	r3, #4
 8008372:	bf08      	it	eq
 8008374:	1aad      	subeq	r5, r5, r2
 8008376:	68a3      	ldr	r3, [r4, #8]
 8008378:	6922      	ldr	r2, [r4, #16]
 800837a:	bf0c      	ite	eq
 800837c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008380:	2500      	movne	r5, #0
 8008382:	4293      	cmp	r3, r2
 8008384:	bfc4      	itt	gt
 8008386:	1a9b      	subgt	r3, r3, r2
 8008388:	18ed      	addgt	r5, r5, r3
 800838a:	f04f 0900 	mov.w	r9, #0
 800838e:	341a      	adds	r4, #26
 8008390:	454d      	cmp	r5, r9
 8008392:	d11a      	bne.n	80083ca <_printf_common+0xd6>
 8008394:	2000      	movs	r0, #0
 8008396:	e008      	b.n	80083aa <_printf_common+0xb6>
 8008398:	2301      	movs	r3, #1
 800839a:	4652      	mov	r2, sl
 800839c:	4639      	mov	r1, r7
 800839e:	4630      	mov	r0, r6
 80083a0:	47c0      	blx	r8
 80083a2:	3001      	adds	r0, #1
 80083a4:	d103      	bne.n	80083ae <_printf_common+0xba>
 80083a6:	f04f 30ff 	mov.w	r0, #4294967295
 80083aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083ae:	3501      	adds	r5, #1
 80083b0:	e7c3      	b.n	800833a <_printf_common+0x46>
 80083b2:	18e1      	adds	r1, r4, r3
 80083b4:	1c5a      	adds	r2, r3, #1
 80083b6:	2030      	movs	r0, #48	; 0x30
 80083b8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80083bc:	4422      	add	r2, r4
 80083be:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80083c2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80083c6:	3302      	adds	r3, #2
 80083c8:	e7c5      	b.n	8008356 <_printf_common+0x62>
 80083ca:	2301      	movs	r3, #1
 80083cc:	4622      	mov	r2, r4
 80083ce:	4639      	mov	r1, r7
 80083d0:	4630      	mov	r0, r6
 80083d2:	47c0      	blx	r8
 80083d4:	3001      	adds	r0, #1
 80083d6:	d0e6      	beq.n	80083a6 <_printf_common+0xb2>
 80083d8:	f109 0901 	add.w	r9, r9, #1
 80083dc:	e7d8      	b.n	8008390 <_printf_common+0x9c>
	...

080083e0 <_printf_i>:
 80083e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80083e4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80083e8:	460c      	mov	r4, r1
 80083ea:	7e09      	ldrb	r1, [r1, #24]
 80083ec:	b085      	sub	sp, #20
 80083ee:	296e      	cmp	r1, #110	; 0x6e
 80083f0:	4617      	mov	r7, r2
 80083f2:	4606      	mov	r6, r0
 80083f4:	4698      	mov	r8, r3
 80083f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80083f8:	f000 80b3 	beq.w	8008562 <_printf_i+0x182>
 80083fc:	d822      	bhi.n	8008444 <_printf_i+0x64>
 80083fe:	2963      	cmp	r1, #99	; 0x63
 8008400:	d036      	beq.n	8008470 <_printf_i+0x90>
 8008402:	d80a      	bhi.n	800841a <_printf_i+0x3a>
 8008404:	2900      	cmp	r1, #0
 8008406:	f000 80b9 	beq.w	800857c <_printf_i+0x19c>
 800840a:	2958      	cmp	r1, #88	; 0x58
 800840c:	f000 8083 	beq.w	8008516 <_printf_i+0x136>
 8008410:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008414:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008418:	e032      	b.n	8008480 <_printf_i+0xa0>
 800841a:	2964      	cmp	r1, #100	; 0x64
 800841c:	d001      	beq.n	8008422 <_printf_i+0x42>
 800841e:	2969      	cmp	r1, #105	; 0x69
 8008420:	d1f6      	bne.n	8008410 <_printf_i+0x30>
 8008422:	6820      	ldr	r0, [r4, #0]
 8008424:	6813      	ldr	r3, [r2, #0]
 8008426:	0605      	lsls	r5, r0, #24
 8008428:	f103 0104 	add.w	r1, r3, #4
 800842c:	d52a      	bpl.n	8008484 <_printf_i+0xa4>
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	6011      	str	r1, [r2, #0]
 8008432:	2b00      	cmp	r3, #0
 8008434:	da03      	bge.n	800843e <_printf_i+0x5e>
 8008436:	222d      	movs	r2, #45	; 0x2d
 8008438:	425b      	negs	r3, r3
 800843a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800843e:	486f      	ldr	r0, [pc, #444]	; (80085fc <_printf_i+0x21c>)
 8008440:	220a      	movs	r2, #10
 8008442:	e039      	b.n	80084b8 <_printf_i+0xd8>
 8008444:	2973      	cmp	r1, #115	; 0x73
 8008446:	f000 809d 	beq.w	8008584 <_printf_i+0x1a4>
 800844a:	d808      	bhi.n	800845e <_printf_i+0x7e>
 800844c:	296f      	cmp	r1, #111	; 0x6f
 800844e:	d020      	beq.n	8008492 <_printf_i+0xb2>
 8008450:	2970      	cmp	r1, #112	; 0x70
 8008452:	d1dd      	bne.n	8008410 <_printf_i+0x30>
 8008454:	6823      	ldr	r3, [r4, #0]
 8008456:	f043 0320 	orr.w	r3, r3, #32
 800845a:	6023      	str	r3, [r4, #0]
 800845c:	e003      	b.n	8008466 <_printf_i+0x86>
 800845e:	2975      	cmp	r1, #117	; 0x75
 8008460:	d017      	beq.n	8008492 <_printf_i+0xb2>
 8008462:	2978      	cmp	r1, #120	; 0x78
 8008464:	d1d4      	bne.n	8008410 <_printf_i+0x30>
 8008466:	2378      	movs	r3, #120	; 0x78
 8008468:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800846c:	4864      	ldr	r0, [pc, #400]	; (8008600 <_printf_i+0x220>)
 800846e:	e055      	b.n	800851c <_printf_i+0x13c>
 8008470:	6813      	ldr	r3, [r2, #0]
 8008472:	1d19      	adds	r1, r3, #4
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	6011      	str	r1, [r2, #0]
 8008478:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800847c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008480:	2301      	movs	r3, #1
 8008482:	e08c      	b.n	800859e <_printf_i+0x1be>
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	6011      	str	r1, [r2, #0]
 8008488:	f010 0f40 	tst.w	r0, #64	; 0x40
 800848c:	bf18      	it	ne
 800848e:	b21b      	sxthne	r3, r3
 8008490:	e7cf      	b.n	8008432 <_printf_i+0x52>
 8008492:	6813      	ldr	r3, [r2, #0]
 8008494:	6825      	ldr	r5, [r4, #0]
 8008496:	1d18      	adds	r0, r3, #4
 8008498:	6010      	str	r0, [r2, #0]
 800849a:	0628      	lsls	r0, r5, #24
 800849c:	d501      	bpl.n	80084a2 <_printf_i+0xc2>
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	e002      	b.n	80084a8 <_printf_i+0xc8>
 80084a2:	0668      	lsls	r0, r5, #25
 80084a4:	d5fb      	bpl.n	800849e <_printf_i+0xbe>
 80084a6:	881b      	ldrh	r3, [r3, #0]
 80084a8:	4854      	ldr	r0, [pc, #336]	; (80085fc <_printf_i+0x21c>)
 80084aa:	296f      	cmp	r1, #111	; 0x6f
 80084ac:	bf14      	ite	ne
 80084ae:	220a      	movne	r2, #10
 80084b0:	2208      	moveq	r2, #8
 80084b2:	2100      	movs	r1, #0
 80084b4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80084b8:	6865      	ldr	r5, [r4, #4]
 80084ba:	60a5      	str	r5, [r4, #8]
 80084bc:	2d00      	cmp	r5, #0
 80084be:	f2c0 8095 	blt.w	80085ec <_printf_i+0x20c>
 80084c2:	6821      	ldr	r1, [r4, #0]
 80084c4:	f021 0104 	bic.w	r1, r1, #4
 80084c8:	6021      	str	r1, [r4, #0]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d13d      	bne.n	800854a <_printf_i+0x16a>
 80084ce:	2d00      	cmp	r5, #0
 80084d0:	f040 808e 	bne.w	80085f0 <_printf_i+0x210>
 80084d4:	4665      	mov	r5, ip
 80084d6:	2a08      	cmp	r2, #8
 80084d8:	d10b      	bne.n	80084f2 <_printf_i+0x112>
 80084da:	6823      	ldr	r3, [r4, #0]
 80084dc:	07db      	lsls	r3, r3, #31
 80084de:	d508      	bpl.n	80084f2 <_printf_i+0x112>
 80084e0:	6923      	ldr	r3, [r4, #16]
 80084e2:	6862      	ldr	r2, [r4, #4]
 80084e4:	429a      	cmp	r2, r3
 80084e6:	bfde      	ittt	le
 80084e8:	2330      	movle	r3, #48	; 0x30
 80084ea:	f805 3c01 	strble.w	r3, [r5, #-1]
 80084ee:	f105 35ff 	addle.w	r5, r5, #4294967295
 80084f2:	ebac 0305 	sub.w	r3, ip, r5
 80084f6:	6123      	str	r3, [r4, #16]
 80084f8:	f8cd 8000 	str.w	r8, [sp]
 80084fc:	463b      	mov	r3, r7
 80084fe:	aa03      	add	r2, sp, #12
 8008500:	4621      	mov	r1, r4
 8008502:	4630      	mov	r0, r6
 8008504:	f7ff fef6 	bl	80082f4 <_printf_common>
 8008508:	3001      	adds	r0, #1
 800850a:	d14d      	bne.n	80085a8 <_printf_i+0x1c8>
 800850c:	f04f 30ff 	mov.w	r0, #4294967295
 8008510:	b005      	add	sp, #20
 8008512:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008516:	4839      	ldr	r0, [pc, #228]	; (80085fc <_printf_i+0x21c>)
 8008518:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800851c:	6813      	ldr	r3, [r2, #0]
 800851e:	6821      	ldr	r1, [r4, #0]
 8008520:	1d1d      	adds	r5, r3, #4
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	6015      	str	r5, [r2, #0]
 8008526:	060a      	lsls	r2, r1, #24
 8008528:	d50b      	bpl.n	8008542 <_printf_i+0x162>
 800852a:	07ca      	lsls	r2, r1, #31
 800852c:	bf44      	itt	mi
 800852e:	f041 0120 	orrmi.w	r1, r1, #32
 8008532:	6021      	strmi	r1, [r4, #0]
 8008534:	b91b      	cbnz	r3, 800853e <_printf_i+0x15e>
 8008536:	6822      	ldr	r2, [r4, #0]
 8008538:	f022 0220 	bic.w	r2, r2, #32
 800853c:	6022      	str	r2, [r4, #0]
 800853e:	2210      	movs	r2, #16
 8008540:	e7b7      	b.n	80084b2 <_printf_i+0xd2>
 8008542:	064d      	lsls	r5, r1, #25
 8008544:	bf48      	it	mi
 8008546:	b29b      	uxthmi	r3, r3
 8008548:	e7ef      	b.n	800852a <_printf_i+0x14a>
 800854a:	4665      	mov	r5, ip
 800854c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008550:	fb02 3311 	mls	r3, r2, r1, r3
 8008554:	5cc3      	ldrb	r3, [r0, r3]
 8008556:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800855a:	460b      	mov	r3, r1
 800855c:	2900      	cmp	r1, #0
 800855e:	d1f5      	bne.n	800854c <_printf_i+0x16c>
 8008560:	e7b9      	b.n	80084d6 <_printf_i+0xf6>
 8008562:	6813      	ldr	r3, [r2, #0]
 8008564:	6825      	ldr	r5, [r4, #0]
 8008566:	6961      	ldr	r1, [r4, #20]
 8008568:	1d18      	adds	r0, r3, #4
 800856a:	6010      	str	r0, [r2, #0]
 800856c:	0628      	lsls	r0, r5, #24
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	d501      	bpl.n	8008576 <_printf_i+0x196>
 8008572:	6019      	str	r1, [r3, #0]
 8008574:	e002      	b.n	800857c <_printf_i+0x19c>
 8008576:	066a      	lsls	r2, r5, #25
 8008578:	d5fb      	bpl.n	8008572 <_printf_i+0x192>
 800857a:	8019      	strh	r1, [r3, #0]
 800857c:	2300      	movs	r3, #0
 800857e:	6123      	str	r3, [r4, #16]
 8008580:	4665      	mov	r5, ip
 8008582:	e7b9      	b.n	80084f8 <_printf_i+0x118>
 8008584:	6813      	ldr	r3, [r2, #0]
 8008586:	1d19      	adds	r1, r3, #4
 8008588:	6011      	str	r1, [r2, #0]
 800858a:	681d      	ldr	r5, [r3, #0]
 800858c:	6862      	ldr	r2, [r4, #4]
 800858e:	2100      	movs	r1, #0
 8008590:	4628      	mov	r0, r5
 8008592:	f7f7 fe45 	bl	8000220 <memchr>
 8008596:	b108      	cbz	r0, 800859c <_printf_i+0x1bc>
 8008598:	1b40      	subs	r0, r0, r5
 800859a:	6060      	str	r0, [r4, #4]
 800859c:	6863      	ldr	r3, [r4, #4]
 800859e:	6123      	str	r3, [r4, #16]
 80085a0:	2300      	movs	r3, #0
 80085a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085a6:	e7a7      	b.n	80084f8 <_printf_i+0x118>
 80085a8:	6923      	ldr	r3, [r4, #16]
 80085aa:	462a      	mov	r2, r5
 80085ac:	4639      	mov	r1, r7
 80085ae:	4630      	mov	r0, r6
 80085b0:	47c0      	blx	r8
 80085b2:	3001      	adds	r0, #1
 80085b4:	d0aa      	beq.n	800850c <_printf_i+0x12c>
 80085b6:	6823      	ldr	r3, [r4, #0]
 80085b8:	079b      	lsls	r3, r3, #30
 80085ba:	d413      	bmi.n	80085e4 <_printf_i+0x204>
 80085bc:	68e0      	ldr	r0, [r4, #12]
 80085be:	9b03      	ldr	r3, [sp, #12]
 80085c0:	4298      	cmp	r0, r3
 80085c2:	bfb8      	it	lt
 80085c4:	4618      	movlt	r0, r3
 80085c6:	e7a3      	b.n	8008510 <_printf_i+0x130>
 80085c8:	2301      	movs	r3, #1
 80085ca:	464a      	mov	r2, r9
 80085cc:	4639      	mov	r1, r7
 80085ce:	4630      	mov	r0, r6
 80085d0:	47c0      	blx	r8
 80085d2:	3001      	adds	r0, #1
 80085d4:	d09a      	beq.n	800850c <_printf_i+0x12c>
 80085d6:	3501      	adds	r5, #1
 80085d8:	68e3      	ldr	r3, [r4, #12]
 80085da:	9a03      	ldr	r2, [sp, #12]
 80085dc:	1a9b      	subs	r3, r3, r2
 80085de:	42ab      	cmp	r3, r5
 80085e0:	dcf2      	bgt.n	80085c8 <_printf_i+0x1e8>
 80085e2:	e7eb      	b.n	80085bc <_printf_i+0x1dc>
 80085e4:	2500      	movs	r5, #0
 80085e6:	f104 0919 	add.w	r9, r4, #25
 80085ea:	e7f5      	b.n	80085d8 <_printf_i+0x1f8>
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d1ac      	bne.n	800854a <_printf_i+0x16a>
 80085f0:	7803      	ldrb	r3, [r0, #0]
 80085f2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80085f6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80085fa:	e76c      	b.n	80084d6 <_printf_i+0xf6>
 80085fc:	0800b84e 	.word	0x0800b84e
 8008600:	0800b85f 	.word	0x0800b85f

08008604 <_scanf_float>:
 8008604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008608:	469a      	mov	sl, r3
 800860a:	688b      	ldr	r3, [r1, #8]
 800860c:	4616      	mov	r6, r2
 800860e:	1e5a      	subs	r2, r3, #1
 8008610:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008614:	b087      	sub	sp, #28
 8008616:	bf83      	ittte	hi
 8008618:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800861c:	189b      	addhi	r3, r3, r2
 800861e:	9301      	strhi	r3, [sp, #4]
 8008620:	2300      	movls	r3, #0
 8008622:	bf86      	itte	hi
 8008624:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008628:	608b      	strhi	r3, [r1, #8]
 800862a:	9301      	strls	r3, [sp, #4]
 800862c:	680b      	ldr	r3, [r1, #0]
 800862e:	4688      	mov	r8, r1
 8008630:	f04f 0b00 	mov.w	fp, #0
 8008634:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008638:	f848 3b1c 	str.w	r3, [r8], #28
 800863c:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8008640:	4607      	mov	r7, r0
 8008642:	460c      	mov	r4, r1
 8008644:	4645      	mov	r5, r8
 8008646:	465a      	mov	r2, fp
 8008648:	46d9      	mov	r9, fp
 800864a:	f8cd b008 	str.w	fp, [sp, #8]
 800864e:	68a1      	ldr	r1, [r4, #8]
 8008650:	b181      	cbz	r1, 8008674 <_scanf_float+0x70>
 8008652:	6833      	ldr	r3, [r6, #0]
 8008654:	781b      	ldrb	r3, [r3, #0]
 8008656:	2b49      	cmp	r3, #73	; 0x49
 8008658:	d071      	beq.n	800873e <_scanf_float+0x13a>
 800865a:	d84d      	bhi.n	80086f8 <_scanf_float+0xf4>
 800865c:	2b39      	cmp	r3, #57	; 0x39
 800865e:	d840      	bhi.n	80086e2 <_scanf_float+0xde>
 8008660:	2b31      	cmp	r3, #49	; 0x31
 8008662:	f080 8088 	bcs.w	8008776 <_scanf_float+0x172>
 8008666:	2b2d      	cmp	r3, #45	; 0x2d
 8008668:	f000 8090 	beq.w	800878c <_scanf_float+0x188>
 800866c:	d815      	bhi.n	800869a <_scanf_float+0x96>
 800866e:	2b2b      	cmp	r3, #43	; 0x2b
 8008670:	f000 808c 	beq.w	800878c <_scanf_float+0x188>
 8008674:	f1b9 0f00 	cmp.w	r9, #0
 8008678:	d003      	beq.n	8008682 <_scanf_float+0x7e>
 800867a:	6823      	ldr	r3, [r4, #0]
 800867c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008680:	6023      	str	r3, [r4, #0]
 8008682:	3a01      	subs	r2, #1
 8008684:	2a01      	cmp	r2, #1
 8008686:	f200 80ea 	bhi.w	800885e <_scanf_float+0x25a>
 800868a:	4545      	cmp	r5, r8
 800868c:	f200 80dc 	bhi.w	8008848 <_scanf_float+0x244>
 8008690:	2601      	movs	r6, #1
 8008692:	4630      	mov	r0, r6
 8008694:	b007      	add	sp, #28
 8008696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800869a:	2b2e      	cmp	r3, #46	; 0x2e
 800869c:	f000 809f 	beq.w	80087de <_scanf_float+0x1da>
 80086a0:	2b30      	cmp	r3, #48	; 0x30
 80086a2:	d1e7      	bne.n	8008674 <_scanf_float+0x70>
 80086a4:	6820      	ldr	r0, [r4, #0]
 80086a6:	f410 7f80 	tst.w	r0, #256	; 0x100
 80086aa:	d064      	beq.n	8008776 <_scanf_float+0x172>
 80086ac:	9b01      	ldr	r3, [sp, #4]
 80086ae:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80086b2:	6020      	str	r0, [r4, #0]
 80086b4:	f109 0901 	add.w	r9, r9, #1
 80086b8:	b11b      	cbz	r3, 80086c2 <_scanf_float+0xbe>
 80086ba:	3b01      	subs	r3, #1
 80086bc:	3101      	adds	r1, #1
 80086be:	9301      	str	r3, [sp, #4]
 80086c0:	60a1      	str	r1, [r4, #8]
 80086c2:	68a3      	ldr	r3, [r4, #8]
 80086c4:	3b01      	subs	r3, #1
 80086c6:	60a3      	str	r3, [r4, #8]
 80086c8:	6923      	ldr	r3, [r4, #16]
 80086ca:	3301      	adds	r3, #1
 80086cc:	6123      	str	r3, [r4, #16]
 80086ce:	6873      	ldr	r3, [r6, #4]
 80086d0:	3b01      	subs	r3, #1
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	6073      	str	r3, [r6, #4]
 80086d6:	f340 80ac 	ble.w	8008832 <_scanf_float+0x22e>
 80086da:	6833      	ldr	r3, [r6, #0]
 80086dc:	3301      	adds	r3, #1
 80086de:	6033      	str	r3, [r6, #0]
 80086e0:	e7b5      	b.n	800864e <_scanf_float+0x4a>
 80086e2:	2b45      	cmp	r3, #69	; 0x45
 80086e4:	f000 8085 	beq.w	80087f2 <_scanf_float+0x1ee>
 80086e8:	2b46      	cmp	r3, #70	; 0x46
 80086ea:	d06a      	beq.n	80087c2 <_scanf_float+0x1be>
 80086ec:	2b41      	cmp	r3, #65	; 0x41
 80086ee:	d1c1      	bne.n	8008674 <_scanf_float+0x70>
 80086f0:	2a01      	cmp	r2, #1
 80086f2:	d1bf      	bne.n	8008674 <_scanf_float+0x70>
 80086f4:	2202      	movs	r2, #2
 80086f6:	e046      	b.n	8008786 <_scanf_float+0x182>
 80086f8:	2b65      	cmp	r3, #101	; 0x65
 80086fa:	d07a      	beq.n	80087f2 <_scanf_float+0x1ee>
 80086fc:	d818      	bhi.n	8008730 <_scanf_float+0x12c>
 80086fe:	2b54      	cmp	r3, #84	; 0x54
 8008700:	d066      	beq.n	80087d0 <_scanf_float+0x1cc>
 8008702:	d811      	bhi.n	8008728 <_scanf_float+0x124>
 8008704:	2b4e      	cmp	r3, #78	; 0x4e
 8008706:	d1b5      	bne.n	8008674 <_scanf_float+0x70>
 8008708:	2a00      	cmp	r2, #0
 800870a:	d146      	bne.n	800879a <_scanf_float+0x196>
 800870c:	f1b9 0f00 	cmp.w	r9, #0
 8008710:	d145      	bne.n	800879e <_scanf_float+0x19a>
 8008712:	6821      	ldr	r1, [r4, #0]
 8008714:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8008718:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800871c:	d13f      	bne.n	800879e <_scanf_float+0x19a>
 800871e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8008722:	6021      	str	r1, [r4, #0]
 8008724:	2201      	movs	r2, #1
 8008726:	e02e      	b.n	8008786 <_scanf_float+0x182>
 8008728:	2b59      	cmp	r3, #89	; 0x59
 800872a:	d01e      	beq.n	800876a <_scanf_float+0x166>
 800872c:	2b61      	cmp	r3, #97	; 0x61
 800872e:	e7de      	b.n	80086ee <_scanf_float+0xea>
 8008730:	2b6e      	cmp	r3, #110	; 0x6e
 8008732:	d0e9      	beq.n	8008708 <_scanf_float+0x104>
 8008734:	d815      	bhi.n	8008762 <_scanf_float+0x15e>
 8008736:	2b66      	cmp	r3, #102	; 0x66
 8008738:	d043      	beq.n	80087c2 <_scanf_float+0x1be>
 800873a:	2b69      	cmp	r3, #105	; 0x69
 800873c:	d19a      	bne.n	8008674 <_scanf_float+0x70>
 800873e:	f1bb 0f00 	cmp.w	fp, #0
 8008742:	d138      	bne.n	80087b6 <_scanf_float+0x1b2>
 8008744:	f1b9 0f00 	cmp.w	r9, #0
 8008748:	d197      	bne.n	800867a <_scanf_float+0x76>
 800874a:	6821      	ldr	r1, [r4, #0]
 800874c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8008750:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8008754:	d195      	bne.n	8008682 <_scanf_float+0x7e>
 8008756:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800875a:	6021      	str	r1, [r4, #0]
 800875c:	f04f 0b01 	mov.w	fp, #1
 8008760:	e011      	b.n	8008786 <_scanf_float+0x182>
 8008762:	2b74      	cmp	r3, #116	; 0x74
 8008764:	d034      	beq.n	80087d0 <_scanf_float+0x1cc>
 8008766:	2b79      	cmp	r3, #121	; 0x79
 8008768:	d184      	bne.n	8008674 <_scanf_float+0x70>
 800876a:	f1bb 0f07 	cmp.w	fp, #7
 800876e:	d181      	bne.n	8008674 <_scanf_float+0x70>
 8008770:	f04f 0b08 	mov.w	fp, #8
 8008774:	e007      	b.n	8008786 <_scanf_float+0x182>
 8008776:	eb12 0f0b 	cmn.w	r2, fp
 800877a:	f47f af7b 	bne.w	8008674 <_scanf_float+0x70>
 800877e:	6821      	ldr	r1, [r4, #0]
 8008780:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8008784:	6021      	str	r1, [r4, #0]
 8008786:	702b      	strb	r3, [r5, #0]
 8008788:	3501      	adds	r5, #1
 800878a:	e79a      	b.n	80086c2 <_scanf_float+0xbe>
 800878c:	6821      	ldr	r1, [r4, #0]
 800878e:	0608      	lsls	r0, r1, #24
 8008790:	f57f af70 	bpl.w	8008674 <_scanf_float+0x70>
 8008794:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008798:	e7f4      	b.n	8008784 <_scanf_float+0x180>
 800879a:	2a02      	cmp	r2, #2
 800879c:	d047      	beq.n	800882e <_scanf_float+0x22a>
 800879e:	f1bb 0f01 	cmp.w	fp, #1
 80087a2:	d003      	beq.n	80087ac <_scanf_float+0x1a8>
 80087a4:	f1bb 0f04 	cmp.w	fp, #4
 80087a8:	f47f af64 	bne.w	8008674 <_scanf_float+0x70>
 80087ac:	f10b 0b01 	add.w	fp, fp, #1
 80087b0:	fa5f fb8b 	uxtb.w	fp, fp
 80087b4:	e7e7      	b.n	8008786 <_scanf_float+0x182>
 80087b6:	f1bb 0f03 	cmp.w	fp, #3
 80087ba:	d0f7      	beq.n	80087ac <_scanf_float+0x1a8>
 80087bc:	f1bb 0f05 	cmp.w	fp, #5
 80087c0:	e7f2      	b.n	80087a8 <_scanf_float+0x1a4>
 80087c2:	f1bb 0f02 	cmp.w	fp, #2
 80087c6:	f47f af55 	bne.w	8008674 <_scanf_float+0x70>
 80087ca:	f04f 0b03 	mov.w	fp, #3
 80087ce:	e7da      	b.n	8008786 <_scanf_float+0x182>
 80087d0:	f1bb 0f06 	cmp.w	fp, #6
 80087d4:	f47f af4e 	bne.w	8008674 <_scanf_float+0x70>
 80087d8:	f04f 0b07 	mov.w	fp, #7
 80087dc:	e7d3      	b.n	8008786 <_scanf_float+0x182>
 80087de:	6821      	ldr	r1, [r4, #0]
 80087e0:	0588      	lsls	r0, r1, #22
 80087e2:	f57f af47 	bpl.w	8008674 <_scanf_float+0x70>
 80087e6:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80087ea:	6021      	str	r1, [r4, #0]
 80087ec:	f8cd 9008 	str.w	r9, [sp, #8]
 80087f0:	e7c9      	b.n	8008786 <_scanf_float+0x182>
 80087f2:	6821      	ldr	r1, [r4, #0]
 80087f4:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80087f8:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80087fc:	d006      	beq.n	800880c <_scanf_float+0x208>
 80087fe:	0548      	lsls	r0, r1, #21
 8008800:	f57f af38 	bpl.w	8008674 <_scanf_float+0x70>
 8008804:	f1b9 0f00 	cmp.w	r9, #0
 8008808:	f43f af3b 	beq.w	8008682 <_scanf_float+0x7e>
 800880c:	0588      	lsls	r0, r1, #22
 800880e:	bf58      	it	pl
 8008810:	9802      	ldrpl	r0, [sp, #8]
 8008812:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8008816:	bf58      	it	pl
 8008818:	eba9 0000 	subpl.w	r0, r9, r0
 800881c:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8008820:	bf58      	it	pl
 8008822:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8008826:	6021      	str	r1, [r4, #0]
 8008828:	f04f 0900 	mov.w	r9, #0
 800882c:	e7ab      	b.n	8008786 <_scanf_float+0x182>
 800882e:	2203      	movs	r2, #3
 8008830:	e7a9      	b.n	8008786 <_scanf_float+0x182>
 8008832:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008836:	9205      	str	r2, [sp, #20]
 8008838:	4631      	mov	r1, r6
 800883a:	4638      	mov	r0, r7
 800883c:	4798      	blx	r3
 800883e:	9a05      	ldr	r2, [sp, #20]
 8008840:	2800      	cmp	r0, #0
 8008842:	f43f af04 	beq.w	800864e <_scanf_float+0x4a>
 8008846:	e715      	b.n	8008674 <_scanf_float+0x70>
 8008848:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800884c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8008850:	4632      	mov	r2, r6
 8008852:	4638      	mov	r0, r7
 8008854:	4798      	blx	r3
 8008856:	6923      	ldr	r3, [r4, #16]
 8008858:	3b01      	subs	r3, #1
 800885a:	6123      	str	r3, [r4, #16]
 800885c:	e715      	b.n	800868a <_scanf_float+0x86>
 800885e:	f10b 33ff 	add.w	r3, fp, #4294967295
 8008862:	2b06      	cmp	r3, #6
 8008864:	d80a      	bhi.n	800887c <_scanf_float+0x278>
 8008866:	f1bb 0f02 	cmp.w	fp, #2
 800886a:	d968      	bls.n	800893e <_scanf_float+0x33a>
 800886c:	f1ab 0b03 	sub.w	fp, fp, #3
 8008870:	fa5f fb8b 	uxtb.w	fp, fp
 8008874:	eba5 0b0b 	sub.w	fp, r5, fp
 8008878:	455d      	cmp	r5, fp
 800887a:	d14b      	bne.n	8008914 <_scanf_float+0x310>
 800887c:	6823      	ldr	r3, [r4, #0]
 800887e:	05da      	lsls	r2, r3, #23
 8008880:	d51f      	bpl.n	80088c2 <_scanf_float+0x2be>
 8008882:	055b      	lsls	r3, r3, #21
 8008884:	d468      	bmi.n	8008958 <_scanf_float+0x354>
 8008886:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800888a:	6923      	ldr	r3, [r4, #16]
 800888c:	2965      	cmp	r1, #101	; 0x65
 800888e:	f103 33ff 	add.w	r3, r3, #4294967295
 8008892:	f105 3bff 	add.w	fp, r5, #4294967295
 8008896:	6123      	str	r3, [r4, #16]
 8008898:	d00d      	beq.n	80088b6 <_scanf_float+0x2b2>
 800889a:	2945      	cmp	r1, #69	; 0x45
 800889c:	d00b      	beq.n	80088b6 <_scanf_float+0x2b2>
 800889e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80088a2:	4632      	mov	r2, r6
 80088a4:	4638      	mov	r0, r7
 80088a6:	4798      	blx	r3
 80088a8:	6923      	ldr	r3, [r4, #16]
 80088aa:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80088ae:	3b01      	subs	r3, #1
 80088b0:	f1a5 0b02 	sub.w	fp, r5, #2
 80088b4:	6123      	str	r3, [r4, #16]
 80088b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80088ba:	4632      	mov	r2, r6
 80088bc:	4638      	mov	r0, r7
 80088be:	4798      	blx	r3
 80088c0:	465d      	mov	r5, fp
 80088c2:	6826      	ldr	r6, [r4, #0]
 80088c4:	f016 0610 	ands.w	r6, r6, #16
 80088c8:	d17a      	bne.n	80089c0 <_scanf_float+0x3bc>
 80088ca:	702e      	strb	r6, [r5, #0]
 80088cc:	6823      	ldr	r3, [r4, #0]
 80088ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80088d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088d6:	d142      	bne.n	800895e <_scanf_float+0x35a>
 80088d8:	9b02      	ldr	r3, [sp, #8]
 80088da:	eba9 0303 	sub.w	r3, r9, r3
 80088de:	425a      	negs	r2, r3
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d149      	bne.n	8008978 <_scanf_float+0x374>
 80088e4:	2200      	movs	r2, #0
 80088e6:	4641      	mov	r1, r8
 80088e8:	4638      	mov	r0, r7
 80088ea:	f000 fea5 	bl	8009638 <_strtod_r>
 80088ee:	6825      	ldr	r5, [r4, #0]
 80088f0:	f8da 3000 	ldr.w	r3, [sl]
 80088f4:	f015 0f02 	tst.w	r5, #2
 80088f8:	f103 0204 	add.w	r2, r3, #4
 80088fc:	ec59 8b10 	vmov	r8, r9, d0
 8008900:	f8ca 2000 	str.w	r2, [sl]
 8008904:	d043      	beq.n	800898e <_scanf_float+0x38a>
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	e9c3 8900 	strd	r8, r9, [r3]
 800890c:	68e3      	ldr	r3, [r4, #12]
 800890e:	3301      	adds	r3, #1
 8008910:	60e3      	str	r3, [r4, #12]
 8008912:	e6be      	b.n	8008692 <_scanf_float+0x8e>
 8008914:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008918:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800891c:	4632      	mov	r2, r6
 800891e:	4638      	mov	r0, r7
 8008920:	4798      	blx	r3
 8008922:	6923      	ldr	r3, [r4, #16]
 8008924:	3b01      	subs	r3, #1
 8008926:	6123      	str	r3, [r4, #16]
 8008928:	e7a6      	b.n	8008878 <_scanf_float+0x274>
 800892a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800892e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8008932:	4632      	mov	r2, r6
 8008934:	4638      	mov	r0, r7
 8008936:	4798      	blx	r3
 8008938:	6923      	ldr	r3, [r4, #16]
 800893a:	3b01      	subs	r3, #1
 800893c:	6123      	str	r3, [r4, #16]
 800893e:	4545      	cmp	r5, r8
 8008940:	d8f3      	bhi.n	800892a <_scanf_float+0x326>
 8008942:	e6a5      	b.n	8008690 <_scanf_float+0x8c>
 8008944:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008948:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800894c:	4632      	mov	r2, r6
 800894e:	4638      	mov	r0, r7
 8008950:	4798      	blx	r3
 8008952:	6923      	ldr	r3, [r4, #16]
 8008954:	3b01      	subs	r3, #1
 8008956:	6123      	str	r3, [r4, #16]
 8008958:	4545      	cmp	r5, r8
 800895a:	d8f3      	bhi.n	8008944 <_scanf_float+0x340>
 800895c:	e698      	b.n	8008690 <_scanf_float+0x8c>
 800895e:	9b03      	ldr	r3, [sp, #12]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d0bf      	beq.n	80088e4 <_scanf_float+0x2e0>
 8008964:	9904      	ldr	r1, [sp, #16]
 8008966:	230a      	movs	r3, #10
 8008968:	4632      	mov	r2, r6
 800896a:	3101      	adds	r1, #1
 800896c:	4638      	mov	r0, r7
 800896e:	f000 ff03 	bl	8009778 <_strtol_r>
 8008972:	9b03      	ldr	r3, [sp, #12]
 8008974:	9d04      	ldr	r5, [sp, #16]
 8008976:	1ac2      	subs	r2, r0, r3
 8008978:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800897c:	429d      	cmp	r5, r3
 800897e:	bf28      	it	cs
 8008980:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8008984:	490f      	ldr	r1, [pc, #60]	; (80089c4 <_scanf_float+0x3c0>)
 8008986:	4628      	mov	r0, r5
 8008988:	f000 f824 	bl	80089d4 <siprintf>
 800898c:	e7aa      	b.n	80088e4 <_scanf_float+0x2e0>
 800898e:	f015 0504 	ands.w	r5, r5, #4
 8008992:	d1b8      	bne.n	8008906 <_scanf_float+0x302>
 8008994:	681f      	ldr	r7, [r3, #0]
 8008996:	ee10 2a10 	vmov	r2, s0
 800899a:	464b      	mov	r3, r9
 800899c:	ee10 0a10 	vmov	r0, s0
 80089a0:	4649      	mov	r1, r9
 80089a2:	f7f8 f8e3 	bl	8000b6c <__aeabi_dcmpun>
 80089a6:	b128      	cbz	r0, 80089b4 <_scanf_float+0x3b0>
 80089a8:	4628      	mov	r0, r5
 80089aa:	f000 f80d 	bl	80089c8 <nanf>
 80089ae:	ed87 0a00 	vstr	s0, [r7]
 80089b2:	e7ab      	b.n	800890c <_scanf_float+0x308>
 80089b4:	4640      	mov	r0, r8
 80089b6:	4649      	mov	r1, r9
 80089b8:	f7f8 f936 	bl	8000c28 <__aeabi_d2f>
 80089bc:	6038      	str	r0, [r7, #0]
 80089be:	e7a5      	b.n	800890c <_scanf_float+0x308>
 80089c0:	2600      	movs	r6, #0
 80089c2:	e666      	b.n	8008692 <_scanf_float+0x8e>
 80089c4:	0800b870 	.word	0x0800b870

080089c8 <nanf>:
 80089c8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80089d0 <nanf+0x8>
 80089cc:	4770      	bx	lr
 80089ce:	bf00      	nop
 80089d0:	7fc00000 	.word	0x7fc00000

080089d4 <siprintf>:
 80089d4:	b40e      	push	{r1, r2, r3}
 80089d6:	b500      	push	{lr}
 80089d8:	b09c      	sub	sp, #112	; 0x70
 80089da:	ab1d      	add	r3, sp, #116	; 0x74
 80089dc:	9002      	str	r0, [sp, #8]
 80089de:	9006      	str	r0, [sp, #24]
 80089e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80089e4:	4809      	ldr	r0, [pc, #36]	; (8008a0c <siprintf+0x38>)
 80089e6:	9107      	str	r1, [sp, #28]
 80089e8:	9104      	str	r1, [sp, #16]
 80089ea:	4909      	ldr	r1, [pc, #36]	; (8008a10 <siprintf+0x3c>)
 80089ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80089f0:	9105      	str	r1, [sp, #20]
 80089f2:	6800      	ldr	r0, [r0, #0]
 80089f4:	9301      	str	r3, [sp, #4]
 80089f6:	a902      	add	r1, sp, #8
 80089f8:	f002 fd84 	bl	800b504 <_svfiprintf_r>
 80089fc:	9b02      	ldr	r3, [sp, #8]
 80089fe:	2200      	movs	r2, #0
 8008a00:	701a      	strb	r2, [r3, #0]
 8008a02:	b01c      	add	sp, #112	; 0x70
 8008a04:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a08:	b003      	add	sp, #12
 8008a0a:	4770      	bx	lr
 8008a0c:	2000000c 	.word	0x2000000c
 8008a10:	ffff0208 	.word	0xffff0208

08008a14 <sulp>:
 8008a14:	b570      	push	{r4, r5, r6, lr}
 8008a16:	4604      	mov	r4, r0
 8008a18:	460d      	mov	r5, r1
 8008a1a:	ec45 4b10 	vmov	d0, r4, r5
 8008a1e:	4616      	mov	r6, r2
 8008a20:	f002 fb2c 	bl	800b07c <__ulp>
 8008a24:	ec51 0b10 	vmov	r0, r1, d0
 8008a28:	b17e      	cbz	r6, 8008a4a <sulp+0x36>
 8008a2a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008a2e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	dd09      	ble.n	8008a4a <sulp+0x36>
 8008a36:	051b      	lsls	r3, r3, #20
 8008a38:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008a3c:	2400      	movs	r4, #0
 8008a3e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008a42:	4622      	mov	r2, r4
 8008a44:	462b      	mov	r3, r5
 8008a46:	f7f7 fdf7 	bl	8000638 <__aeabi_dmul>
 8008a4a:	bd70      	pop	{r4, r5, r6, pc}
 8008a4c:	0000      	movs	r0, r0
	...

08008a50 <_strtod_l>:
 8008a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a54:	461f      	mov	r7, r3
 8008a56:	b0a1      	sub	sp, #132	; 0x84
 8008a58:	2300      	movs	r3, #0
 8008a5a:	4681      	mov	r9, r0
 8008a5c:	4638      	mov	r0, r7
 8008a5e:	460e      	mov	r6, r1
 8008a60:	9217      	str	r2, [sp, #92]	; 0x5c
 8008a62:	931c      	str	r3, [sp, #112]	; 0x70
 8008a64:	f002 f809 	bl	800aa7a <__localeconv_l>
 8008a68:	4680      	mov	r8, r0
 8008a6a:	6800      	ldr	r0, [r0, #0]
 8008a6c:	f7f7 fbd0 	bl	8000210 <strlen>
 8008a70:	f04f 0a00 	mov.w	sl, #0
 8008a74:	4604      	mov	r4, r0
 8008a76:	f04f 0b00 	mov.w	fp, #0
 8008a7a:	961b      	str	r6, [sp, #108]	; 0x6c
 8008a7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008a7e:	781a      	ldrb	r2, [r3, #0]
 8008a80:	2a0d      	cmp	r2, #13
 8008a82:	d832      	bhi.n	8008aea <_strtod_l+0x9a>
 8008a84:	2a09      	cmp	r2, #9
 8008a86:	d236      	bcs.n	8008af6 <_strtod_l+0xa6>
 8008a88:	2a00      	cmp	r2, #0
 8008a8a:	d03e      	beq.n	8008b0a <_strtod_l+0xba>
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	930d      	str	r3, [sp, #52]	; 0x34
 8008a90:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8008a92:	782b      	ldrb	r3, [r5, #0]
 8008a94:	2b30      	cmp	r3, #48	; 0x30
 8008a96:	f040 80ac 	bne.w	8008bf2 <_strtod_l+0x1a2>
 8008a9a:	786b      	ldrb	r3, [r5, #1]
 8008a9c:	2b58      	cmp	r3, #88	; 0x58
 8008a9e:	d001      	beq.n	8008aa4 <_strtod_l+0x54>
 8008aa0:	2b78      	cmp	r3, #120	; 0x78
 8008aa2:	d167      	bne.n	8008b74 <_strtod_l+0x124>
 8008aa4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008aa6:	9301      	str	r3, [sp, #4]
 8008aa8:	ab1c      	add	r3, sp, #112	; 0x70
 8008aaa:	9300      	str	r3, [sp, #0]
 8008aac:	9702      	str	r7, [sp, #8]
 8008aae:	ab1d      	add	r3, sp, #116	; 0x74
 8008ab0:	4a88      	ldr	r2, [pc, #544]	; (8008cd4 <_strtod_l+0x284>)
 8008ab2:	a91b      	add	r1, sp, #108	; 0x6c
 8008ab4:	4648      	mov	r0, r9
 8008ab6:	f001 fd06 	bl	800a4c6 <__gethex>
 8008aba:	f010 0407 	ands.w	r4, r0, #7
 8008abe:	4606      	mov	r6, r0
 8008ac0:	d005      	beq.n	8008ace <_strtod_l+0x7e>
 8008ac2:	2c06      	cmp	r4, #6
 8008ac4:	d12b      	bne.n	8008b1e <_strtod_l+0xce>
 8008ac6:	3501      	adds	r5, #1
 8008ac8:	2300      	movs	r3, #0
 8008aca:	951b      	str	r5, [sp, #108]	; 0x6c
 8008acc:	930d      	str	r3, [sp, #52]	; 0x34
 8008ace:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	f040 859a 	bne.w	800960a <_strtod_l+0xbba>
 8008ad6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ad8:	b1e3      	cbz	r3, 8008b14 <_strtod_l+0xc4>
 8008ada:	4652      	mov	r2, sl
 8008adc:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008ae0:	ec43 2b10 	vmov	d0, r2, r3
 8008ae4:	b021      	add	sp, #132	; 0x84
 8008ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aea:	2a2b      	cmp	r2, #43	; 0x2b
 8008aec:	d015      	beq.n	8008b1a <_strtod_l+0xca>
 8008aee:	2a2d      	cmp	r2, #45	; 0x2d
 8008af0:	d004      	beq.n	8008afc <_strtod_l+0xac>
 8008af2:	2a20      	cmp	r2, #32
 8008af4:	d1ca      	bne.n	8008a8c <_strtod_l+0x3c>
 8008af6:	3301      	adds	r3, #1
 8008af8:	931b      	str	r3, [sp, #108]	; 0x6c
 8008afa:	e7bf      	b.n	8008a7c <_strtod_l+0x2c>
 8008afc:	2201      	movs	r2, #1
 8008afe:	920d      	str	r2, [sp, #52]	; 0x34
 8008b00:	1c5a      	adds	r2, r3, #1
 8008b02:	921b      	str	r2, [sp, #108]	; 0x6c
 8008b04:	785b      	ldrb	r3, [r3, #1]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d1c2      	bne.n	8008a90 <_strtod_l+0x40>
 8008b0a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008b0c:	961b      	str	r6, [sp, #108]	; 0x6c
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	f040 8579 	bne.w	8009606 <_strtod_l+0xbb6>
 8008b14:	4652      	mov	r2, sl
 8008b16:	465b      	mov	r3, fp
 8008b18:	e7e2      	b.n	8008ae0 <_strtod_l+0x90>
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	e7ef      	b.n	8008afe <_strtod_l+0xae>
 8008b1e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008b20:	b13a      	cbz	r2, 8008b32 <_strtod_l+0xe2>
 8008b22:	2135      	movs	r1, #53	; 0x35
 8008b24:	a81e      	add	r0, sp, #120	; 0x78
 8008b26:	f002 fba1 	bl	800b26c <__copybits>
 8008b2a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008b2c:	4648      	mov	r0, r9
 8008b2e:	f002 f80e 	bl	800ab4e <_Bfree>
 8008b32:	3c01      	subs	r4, #1
 8008b34:	2c04      	cmp	r4, #4
 8008b36:	d806      	bhi.n	8008b46 <_strtod_l+0xf6>
 8008b38:	e8df f004 	tbb	[pc, r4]
 8008b3c:	1714030a 	.word	0x1714030a
 8008b40:	0a          	.byte	0x0a
 8008b41:	00          	.byte	0x00
 8008b42:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8008b46:	0730      	lsls	r0, r6, #28
 8008b48:	d5c1      	bpl.n	8008ace <_strtod_l+0x7e>
 8008b4a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008b4e:	e7be      	b.n	8008ace <_strtod_l+0x7e>
 8008b50:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8008b54:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008b56:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008b5a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008b5e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008b62:	e7f0      	b.n	8008b46 <_strtod_l+0xf6>
 8008b64:	f8df b170 	ldr.w	fp, [pc, #368]	; 8008cd8 <_strtod_l+0x288>
 8008b68:	e7ed      	b.n	8008b46 <_strtod_l+0xf6>
 8008b6a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008b6e:	f04f 3aff 	mov.w	sl, #4294967295
 8008b72:	e7e8      	b.n	8008b46 <_strtod_l+0xf6>
 8008b74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008b76:	1c5a      	adds	r2, r3, #1
 8008b78:	921b      	str	r2, [sp, #108]	; 0x6c
 8008b7a:	785b      	ldrb	r3, [r3, #1]
 8008b7c:	2b30      	cmp	r3, #48	; 0x30
 8008b7e:	d0f9      	beq.n	8008b74 <_strtod_l+0x124>
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d0a4      	beq.n	8008ace <_strtod_l+0x7e>
 8008b84:	2301      	movs	r3, #1
 8008b86:	2500      	movs	r5, #0
 8008b88:	9306      	str	r3, [sp, #24]
 8008b8a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008b8c:	9308      	str	r3, [sp, #32]
 8008b8e:	9507      	str	r5, [sp, #28]
 8008b90:	9505      	str	r5, [sp, #20]
 8008b92:	220a      	movs	r2, #10
 8008b94:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8008b96:	7807      	ldrb	r7, [r0, #0]
 8008b98:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8008b9c:	b2d9      	uxtb	r1, r3
 8008b9e:	2909      	cmp	r1, #9
 8008ba0:	d929      	bls.n	8008bf6 <_strtod_l+0x1a6>
 8008ba2:	4622      	mov	r2, r4
 8008ba4:	f8d8 1000 	ldr.w	r1, [r8]
 8008ba8:	f002 fdb4 	bl	800b714 <strncmp>
 8008bac:	2800      	cmp	r0, #0
 8008bae:	d031      	beq.n	8008c14 <_strtod_l+0x1c4>
 8008bb0:	2000      	movs	r0, #0
 8008bb2:	9c05      	ldr	r4, [sp, #20]
 8008bb4:	9004      	str	r0, [sp, #16]
 8008bb6:	463b      	mov	r3, r7
 8008bb8:	4602      	mov	r2, r0
 8008bba:	2b65      	cmp	r3, #101	; 0x65
 8008bbc:	d001      	beq.n	8008bc2 <_strtod_l+0x172>
 8008bbe:	2b45      	cmp	r3, #69	; 0x45
 8008bc0:	d114      	bne.n	8008bec <_strtod_l+0x19c>
 8008bc2:	b924      	cbnz	r4, 8008bce <_strtod_l+0x17e>
 8008bc4:	b910      	cbnz	r0, 8008bcc <_strtod_l+0x17c>
 8008bc6:	9b06      	ldr	r3, [sp, #24]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d09e      	beq.n	8008b0a <_strtod_l+0xba>
 8008bcc:	2400      	movs	r4, #0
 8008bce:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8008bd0:	1c73      	adds	r3, r6, #1
 8008bd2:	931b      	str	r3, [sp, #108]	; 0x6c
 8008bd4:	7873      	ldrb	r3, [r6, #1]
 8008bd6:	2b2b      	cmp	r3, #43	; 0x2b
 8008bd8:	d078      	beq.n	8008ccc <_strtod_l+0x27c>
 8008bda:	2b2d      	cmp	r3, #45	; 0x2d
 8008bdc:	d070      	beq.n	8008cc0 <_strtod_l+0x270>
 8008bde:	f04f 0c00 	mov.w	ip, #0
 8008be2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8008be6:	2f09      	cmp	r7, #9
 8008be8:	d97c      	bls.n	8008ce4 <_strtod_l+0x294>
 8008bea:	961b      	str	r6, [sp, #108]	; 0x6c
 8008bec:	f04f 0e00 	mov.w	lr, #0
 8008bf0:	e09a      	b.n	8008d28 <_strtod_l+0x2d8>
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	e7c7      	b.n	8008b86 <_strtod_l+0x136>
 8008bf6:	9905      	ldr	r1, [sp, #20]
 8008bf8:	2908      	cmp	r1, #8
 8008bfa:	bfdd      	ittte	le
 8008bfc:	9907      	ldrle	r1, [sp, #28]
 8008bfe:	fb02 3301 	mlale	r3, r2, r1, r3
 8008c02:	9307      	strle	r3, [sp, #28]
 8008c04:	fb02 3505 	mlagt	r5, r2, r5, r3
 8008c08:	9b05      	ldr	r3, [sp, #20]
 8008c0a:	3001      	adds	r0, #1
 8008c0c:	3301      	adds	r3, #1
 8008c0e:	9305      	str	r3, [sp, #20]
 8008c10:	901b      	str	r0, [sp, #108]	; 0x6c
 8008c12:	e7bf      	b.n	8008b94 <_strtod_l+0x144>
 8008c14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008c16:	191a      	adds	r2, r3, r4
 8008c18:	921b      	str	r2, [sp, #108]	; 0x6c
 8008c1a:	9a05      	ldr	r2, [sp, #20]
 8008c1c:	5d1b      	ldrb	r3, [r3, r4]
 8008c1e:	2a00      	cmp	r2, #0
 8008c20:	d037      	beq.n	8008c92 <_strtod_l+0x242>
 8008c22:	9c05      	ldr	r4, [sp, #20]
 8008c24:	4602      	mov	r2, r0
 8008c26:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8008c2a:	2909      	cmp	r1, #9
 8008c2c:	d913      	bls.n	8008c56 <_strtod_l+0x206>
 8008c2e:	2101      	movs	r1, #1
 8008c30:	9104      	str	r1, [sp, #16]
 8008c32:	e7c2      	b.n	8008bba <_strtod_l+0x16a>
 8008c34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008c36:	1c5a      	adds	r2, r3, #1
 8008c38:	921b      	str	r2, [sp, #108]	; 0x6c
 8008c3a:	785b      	ldrb	r3, [r3, #1]
 8008c3c:	3001      	adds	r0, #1
 8008c3e:	2b30      	cmp	r3, #48	; 0x30
 8008c40:	d0f8      	beq.n	8008c34 <_strtod_l+0x1e4>
 8008c42:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8008c46:	2a08      	cmp	r2, #8
 8008c48:	f200 84e4 	bhi.w	8009614 <_strtod_l+0xbc4>
 8008c4c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008c4e:	9208      	str	r2, [sp, #32]
 8008c50:	4602      	mov	r2, r0
 8008c52:	2000      	movs	r0, #0
 8008c54:	4604      	mov	r4, r0
 8008c56:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8008c5a:	f100 0101 	add.w	r1, r0, #1
 8008c5e:	d012      	beq.n	8008c86 <_strtod_l+0x236>
 8008c60:	440a      	add	r2, r1
 8008c62:	eb00 0c04 	add.w	ip, r0, r4
 8008c66:	4621      	mov	r1, r4
 8008c68:	270a      	movs	r7, #10
 8008c6a:	458c      	cmp	ip, r1
 8008c6c:	d113      	bne.n	8008c96 <_strtod_l+0x246>
 8008c6e:	1821      	adds	r1, r4, r0
 8008c70:	2908      	cmp	r1, #8
 8008c72:	f104 0401 	add.w	r4, r4, #1
 8008c76:	4404      	add	r4, r0
 8008c78:	dc19      	bgt.n	8008cae <_strtod_l+0x25e>
 8008c7a:	9b07      	ldr	r3, [sp, #28]
 8008c7c:	210a      	movs	r1, #10
 8008c7e:	fb01 e303 	mla	r3, r1, r3, lr
 8008c82:	9307      	str	r3, [sp, #28]
 8008c84:	2100      	movs	r1, #0
 8008c86:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008c88:	1c58      	adds	r0, r3, #1
 8008c8a:	901b      	str	r0, [sp, #108]	; 0x6c
 8008c8c:	785b      	ldrb	r3, [r3, #1]
 8008c8e:	4608      	mov	r0, r1
 8008c90:	e7c9      	b.n	8008c26 <_strtod_l+0x1d6>
 8008c92:	9805      	ldr	r0, [sp, #20]
 8008c94:	e7d3      	b.n	8008c3e <_strtod_l+0x1ee>
 8008c96:	2908      	cmp	r1, #8
 8008c98:	f101 0101 	add.w	r1, r1, #1
 8008c9c:	dc03      	bgt.n	8008ca6 <_strtod_l+0x256>
 8008c9e:	9b07      	ldr	r3, [sp, #28]
 8008ca0:	437b      	muls	r3, r7
 8008ca2:	9307      	str	r3, [sp, #28]
 8008ca4:	e7e1      	b.n	8008c6a <_strtod_l+0x21a>
 8008ca6:	2910      	cmp	r1, #16
 8008ca8:	bfd8      	it	le
 8008caa:	437d      	mulle	r5, r7
 8008cac:	e7dd      	b.n	8008c6a <_strtod_l+0x21a>
 8008cae:	2c10      	cmp	r4, #16
 8008cb0:	bfdc      	itt	le
 8008cb2:	210a      	movle	r1, #10
 8008cb4:	fb01 e505 	mlale	r5, r1, r5, lr
 8008cb8:	e7e4      	b.n	8008c84 <_strtod_l+0x234>
 8008cba:	2301      	movs	r3, #1
 8008cbc:	9304      	str	r3, [sp, #16]
 8008cbe:	e781      	b.n	8008bc4 <_strtod_l+0x174>
 8008cc0:	f04f 0c01 	mov.w	ip, #1
 8008cc4:	1cb3      	adds	r3, r6, #2
 8008cc6:	931b      	str	r3, [sp, #108]	; 0x6c
 8008cc8:	78b3      	ldrb	r3, [r6, #2]
 8008cca:	e78a      	b.n	8008be2 <_strtod_l+0x192>
 8008ccc:	f04f 0c00 	mov.w	ip, #0
 8008cd0:	e7f8      	b.n	8008cc4 <_strtod_l+0x274>
 8008cd2:	bf00      	nop
 8008cd4:	0800b878 	.word	0x0800b878
 8008cd8:	7ff00000 	.word	0x7ff00000
 8008cdc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008cde:	1c5f      	adds	r7, r3, #1
 8008ce0:	971b      	str	r7, [sp, #108]	; 0x6c
 8008ce2:	785b      	ldrb	r3, [r3, #1]
 8008ce4:	2b30      	cmp	r3, #48	; 0x30
 8008ce6:	d0f9      	beq.n	8008cdc <_strtod_l+0x28c>
 8008ce8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8008cec:	2f08      	cmp	r7, #8
 8008cee:	f63f af7d 	bhi.w	8008bec <_strtod_l+0x19c>
 8008cf2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8008cf6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008cf8:	930a      	str	r3, [sp, #40]	; 0x28
 8008cfa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008cfc:	1c5f      	adds	r7, r3, #1
 8008cfe:	971b      	str	r7, [sp, #108]	; 0x6c
 8008d00:	785b      	ldrb	r3, [r3, #1]
 8008d02:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8008d06:	f1b8 0f09 	cmp.w	r8, #9
 8008d0a:	d937      	bls.n	8008d7c <_strtod_l+0x32c>
 8008d0c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008d0e:	1a7f      	subs	r7, r7, r1
 8008d10:	2f08      	cmp	r7, #8
 8008d12:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008d16:	dc37      	bgt.n	8008d88 <_strtod_l+0x338>
 8008d18:	45be      	cmp	lr, r7
 8008d1a:	bfa8      	it	ge
 8008d1c:	46be      	movge	lr, r7
 8008d1e:	f1bc 0f00 	cmp.w	ip, #0
 8008d22:	d001      	beq.n	8008d28 <_strtod_l+0x2d8>
 8008d24:	f1ce 0e00 	rsb	lr, lr, #0
 8008d28:	2c00      	cmp	r4, #0
 8008d2a:	d151      	bne.n	8008dd0 <_strtod_l+0x380>
 8008d2c:	2800      	cmp	r0, #0
 8008d2e:	f47f aece 	bne.w	8008ace <_strtod_l+0x7e>
 8008d32:	9a06      	ldr	r2, [sp, #24]
 8008d34:	2a00      	cmp	r2, #0
 8008d36:	f47f aeca 	bne.w	8008ace <_strtod_l+0x7e>
 8008d3a:	9a04      	ldr	r2, [sp, #16]
 8008d3c:	2a00      	cmp	r2, #0
 8008d3e:	f47f aee4 	bne.w	8008b0a <_strtod_l+0xba>
 8008d42:	2b4e      	cmp	r3, #78	; 0x4e
 8008d44:	d027      	beq.n	8008d96 <_strtod_l+0x346>
 8008d46:	dc21      	bgt.n	8008d8c <_strtod_l+0x33c>
 8008d48:	2b49      	cmp	r3, #73	; 0x49
 8008d4a:	f47f aede 	bne.w	8008b0a <_strtod_l+0xba>
 8008d4e:	49a0      	ldr	r1, [pc, #640]	; (8008fd0 <_strtod_l+0x580>)
 8008d50:	a81b      	add	r0, sp, #108	; 0x6c
 8008d52:	f001 fdeb 	bl	800a92c <__match>
 8008d56:	2800      	cmp	r0, #0
 8008d58:	f43f aed7 	beq.w	8008b0a <_strtod_l+0xba>
 8008d5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008d5e:	499d      	ldr	r1, [pc, #628]	; (8008fd4 <_strtod_l+0x584>)
 8008d60:	3b01      	subs	r3, #1
 8008d62:	a81b      	add	r0, sp, #108	; 0x6c
 8008d64:	931b      	str	r3, [sp, #108]	; 0x6c
 8008d66:	f001 fde1 	bl	800a92c <__match>
 8008d6a:	b910      	cbnz	r0, 8008d72 <_strtod_l+0x322>
 8008d6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008d6e:	3301      	adds	r3, #1
 8008d70:	931b      	str	r3, [sp, #108]	; 0x6c
 8008d72:	f8df b274 	ldr.w	fp, [pc, #628]	; 8008fe8 <_strtod_l+0x598>
 8008d76:	f04f 0a00 	mov.w	sl, #0
 8008d7a:	e6a8      	b.n	8008ace <_strtod_l+0x7e>
 8008d7c:	210a      	movs	r1, #10
 8008d7e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8008d82:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008d86:	e7b8      	b.n	8008cfa <_strtod_l+0x2aa>
 8008d88:	46be      	mov	lr, r7
 8008d8a:	e7c8      	b.n	8008d1e <_strtod_l+0x2ce>
 8008d8c:	2b69      	cmp	r3, #105	; 0x69
 8008d8e:	d0de      	beq.n	8008d4e <_strtod_l+0x2fe>
 8008d90:	2b6e      	cmp	r3, #110	; 0x6e
 8008d92:	f47f aeba 	bne.w	8008b0a <_strtod_l+0xba>
 8008d96:	4990      	ldr	r1, [pc, #576]	; (8008fd8 <_strtod_l+0x588>)
 8008d98:	a81b      	add	r0, sp, #108	; 0x6c
 8008d9a:	f001 fdc7 	bl	800a92c <__match>
 8008d9e:	2800      	cmp	r0, #0
 8008da0:	f43f aeb3 	beq.w	8008b0a <_strtod_l+0xba>
 8008da4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008da6:	781b      	ldrb	r3, [r3, #0]
 8008da8:	2b28      	cmp	r3, #40	; 0x28
 8008daa:	d10e      	bne.n	8008dca <_strtod_l+0x37a>
 8008dac:	aa1e      	add	r2, sp, #120	; 0x78
 8008dae:	498b      	ldr	r1, [pc, #556]	; (8008fdc <_strtod_l+0x58c>)
 8008db0:	a81b      	add	r0, sp, #108	; 0x6c
 8008db2:	f001 fdcf 	bl	800a954 <__hexnan>
 8008db6:	2805      	cmp	r0, #5
 8008db8:	d107      	bne.n	8008dca <_strtod_l+0x37a>
 8008dba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008dbc:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8008dc0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008dc4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008dc8:	e681      	b.n	8008ace <_strtod_l+0x7e>
 8008dca:	f8df b224 	ldr.w	fp, [pc, #548]	; 8008ff0 <_strtod_l+0x5a0>
 8008dce:	e7d2      	b.n	8008d76 <_strtod_l+0x326>
 8008dd0:	ebae 0302 	sub.w	r3, lr, r2
 8008dd4:	9306      	str	r3, [sp, #24]
 8008dd6:	9b05      	ldr	r3, [sp, #20]
 8008dd8:	9807      	ldr	r0, [sp, #28]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	bf08      	it	eq
 8008dde:	4623      	moveq	r3, r4
 8008de0:	2c10      	cmp	r4, #16
 8008de2:	9305      	str	r3, [sp, #20]
 8008de4:	46a0      	mov	r8, r4
 8008de6:	bfa8      	it	ge
 8008de8:	f04f 0810 	movge.w	r8, #16
 8008dec:	f7f7 fbaa 	bl	8000544 <__aeabi_ui2d>
 8008df0:	2c09      	cmp	r4, #9
 8008df2:	4682      	mov	sl, r0
 8008df4:	468b      	mov	fp, r1
 8008df6:	dc13      	bgt.n	8008e20 <_strtod_l+0x3d0>
 8008df8:	9b06      	ldr	r3, [sp, #24]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	f43f ae67 	beq.w	8008ace <_strtod_l+0x7e>
 8008e00:	9b06      	ldr	r3, [sp, #24]
 8008e02:	dd7a      	ble.n	8008efa <_strtod_l+0x4aa>
 8008e04:	2b16      	cmp	r3, #22
 8008e06:	dc61      	bgt.n	8008ecc <_strtod_l+0x47c>
 8008e08:	4a75      	ldr	r2, [pc, #468]	; (8008fe0 <_strtod_l+0x590>)
 8008e0a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8008e0e:	e9de 0100 	ldrd	r0, r1, [lr]
 8008e12:	4652      	mov	r2, sl
 8008e14:	465b      	mov	r3, fp
 8008e16:	f7f7 fc0f 	bl	8000638 <__aeabi_dmul>
 8008e1a:	4682      	mov	sl, r0
 8008e1c:	468b      	mov	fp, r1
 8008e1e:	e656      	b.n	8008ace <_strtod_l+0x7e>
 8008e20:	4b6f      	ldr	r3, [pc, #444]	; (8008fe0 <_strtod_l+0x590>)
 8008e22:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008e26:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008e2a:	f7f7 fc05 	bl	8000638 <__aeabi_dmul>
 8008e2e:	4606      	mov	r6, r0
 8008e30:	4628      	mov	r0, r5
 8008e32:	460f      	mov	r7, r1
 8008e34:	f7f7 fb86 	bl	8000544 <__aeabi_ui2d>
 8008e38:	4602      	mov	r2, r0
 8008e3a:	460b      	mov	r3, r1
 8008e3c:	4630      	mov	r0, r6
 8008e3e:	4639      	mov	r1, r7
 8008e40:	f7f7 fa44 	bl	80002cc <__adddf3>
 8008e44:	2c0f      	cmp	r4, #15
 8008e46:	4682      	mov	sl, r0
 8008e48:	468b      	mov	fp, r1
 8008e4a:	ddd5      	ble.n	8008df8 <_strtod_l+0x3a8>
 8008e4c:	9b06      	ldr	r3, [sp, #24]
 8008e4e:	eba4 0808 	sub.w	r8, r4, r8
 8008e52:	4498      	add	r8, r3
 8008e54:	f1b8 0f00 	cmp.w	r8, #0
 8008e58:	f340 8096 	ble.w	8008f88 <_strtod_l+0x538>
 8008e5c:	f018 030f 	ands.w	r3, r8, #15
 8008e60:	d00a      	beq.n	8008e78 <_strtod_l+0x428>
 8008e62:	495f      	ldr	r1, [pc, #380]	; (8008fe0 <_strtod_l+0x590>)
 8008e64:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008e68:	4652      	mov	r2, sl
 8008e6a:	465b      	mov	r3, fp
 8008e6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e70:	f7f7 fbe2 	bl	8000638 <__aeabi_dmul>
 8008e74:	4682      	mov	sl, r0
 8008e76:	468b      	mov	fp, r1
 8008e78:	f038 080f 	bics.w	r8, r8, #15
 8008e7c:	d073      	beq.n	8008f66 <_strtod_l+0x516>
 8008e7e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008e82:	dd47      	ble.n	8008f14 <_strtod_l+0x4c4>
 8008e84:	2400      	movs	r4, #0
 8008e86:	46a0      	mov	r8, r4
 8008e88:	9407      	str	r4, [sp, #28]
 8008e8a:	9405      	str	r4, [sp, #20]
 8008e8c:	2322      	movs	r3, #34	; 0x22
 8008e8e:	f8df b158 	ldr.w	fp, [pc, #344]	; 8008fe8 <_strtod_l+0x598>
 8008e92:	f8c9 3000 	str.w	r3, [r9]
 8008e96:	f04f 0a00 	mov.w	sl, #0
 8008e9a:	9b07      	ldr	r3, [sp, #28]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	f43f ae16 	beq.w	8008ace <_strtod_l+0x7e>
 8008ea2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008ea4:	4648      	mov	r0, r9
 8008ea6:	f001 fe52 	bl	800ab4e <_Bfree>
 8008eaa:	9905      	ldr	r1, [sp, #20]
 8008eac:	4648      	mov	r0, r9
 8008eae:	f001 fe4e 	bl	800ab4e <_Bfree>
 8008eb2:	4641      	mov	r1, r8
 8008eb4:	4648      	mov	r0, r9
 8008eb6:	f001 fe4a 	bl	800ab4e <_Bfree>
 8008eba:	9907      	ldr	r1, [sp, #28]
 8008ebc:	4648      	mov	r0, r9
 8008ebe:	f001 fe46 	bl	800ab4e <_Bfree>
 8008ec2:	4621      	mov	r1, r4
 8008ec4:	4648      	mov	r0, r9
 8008ec6:	f001 fe42 	bl	800ab4e <_Bfree>
 8008eca:	e600      	b.n	8008ace <_strtod_l+0x7e>
 8008ecc:	9a06      	ldr	r2, [sp, #24]
 8008ece:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	dbba      	blt.n	8008e4c <_strtod_l+0x3fc>
 8008ed6:	4d42      	ldr	r5, [pc, #264]	; (8008fe0 <_strtod_l+0x590>)
 8008ed8:	f1c4 040f 	rsb	r4, r4, #15
 8008edc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8008ee0:	4652      	mov	r2, sl
 8008ee2:	465b      	mov	r3, fp
 8008ee4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ee8:	f7f7 fba6 	bl	8000638 <__aeabi_dmul>
 8008eec:	9b06      	ldr	r3, [sp, #24]
 8008eee:	1b1c      	subs	r4, r3, r4
 8008ef0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8008ef4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008ef8:	e78d      	b.n	8008e16 <_strtod_l+0x3c6>
 8008efa:	f113 0f16 	cmn.w	r3, #22
 8008efe:	dba5      	blt.n	8008e4c <_strtod_l+0x3fc>
 8008f00:	4a37      	ldr	r2, [pc, #220]	; (8008fe0 <_strtod_l+0x590>)
 8008f02:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8008f06:	e9d2 2300 	ldrd	r2, r3, [r2]
 8008f0a:	4650      	mov	r0, sl
 8008f0c:	4659      	mov	r1, fp
 8008f0e:	f7f7 fcbd 	bl	800088c <__aeabi_ddiv>
 8008f12:	e782      	b.n	8008e1a <_strtod_l+0x3ca>
 8008f14:	2300      	movs	r3, #0
 8008f16:	4e33      	ldr	r6, [pc, #204]	; (8008fe4 <_strtod_l+0x594>)
 8008f18:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008f1c:	4650      	mov	r0, sl
 8008f1e:	4659      	mov	r1, fp
 8008f20:	461d      	mov	r5, r3
 8008f22:	f1b8 0f01 	cmp.w	r8, #1
 8008f26:	dc21      	bgt.n	8008f6c <_strtod_l+0x51c>
 8008f28:	b10b      	cbz	r3, 8008f2e <_strtod_l+0x4de>
 8008f2a:	4682      	mov	sl, r0
 8008f2c:	468b      	mov	fp, r1
 8008f2e:	4b2d      	ldr	r3, [pc, #180]	; (8008fe4 <_strtod_l+0x594>)
 8008f30:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008f34:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008f38:	4652      	mov	r2, sl
 8008f3a:	465b      	mov	r3, fp
 8008f3c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8008f40:	f7f7 fb7a 	bl	8000638 <__aeabi_dmul>
 8008f44:	4b28      	ldr	r3, [pc, #160]	; (8008fe8 <_strtod_l+0x598>)
 8008f46:	460a      	mov	r2, r1
 8008f48:	400b      	ands	r3, r1
 8008f4a:	4928      	ldr	r1, [pc, #160]	; (8008fec <_strtod_l+0x59c>)
 8008f4c:	428b      	cmp	r3, r1
 8008f4e:	4682      	mov	sl, r0
 8008f50:	d898      	bhi.n	8008e84 <_strtod_l+0x434>
 8008f52:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008f56:	428b      	cmp	r3, r1
 8008f58:	bf86      	itte	hi
 8008f5a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8008ff4 <_strtod_l+0x5a4>
 8008f5e:	f04f 3aff 	movhi.w	sl, #4294967295
 8008f62:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008f66:	2300      	movs	r3, #0
 8008f68:	9304      	str	r3, [sp, #16]
 8008f6a:	e077      	b.n	800905c <_strtod_l+0x60c>
 8008f6c:	f018 0f01 	tst.w	r8, #1
 8008f70:	d006      	beq.n	8008f80 <_strtod_l+0x530>
 8008f72:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8008f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f7a:	f7f7 fb5d 	bl	8000638 <__aeabi_dmul>
 8008f7e:	2301      	movs	r3, #1
 8008f80:	3501      	adds	r5, #1
 8008f82:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008f86:	e7cc      	b.n	8008f22 <_strtod_l+0x4d2>
 8008f88:	d0ed      	beq.n	8008f66 <_strtod_l+0x516>
 8008f8a:	f1c8 0800 	rsb	r8, r8, #0
 8008f8e:	f018 020f 	ands.w	r2, r8, #15
 8008f92:	d00a      	beq.n	8008faa <_strtod_l+0x55a>
 8008f94:	4b12      	ldr	r3, [pc, #72]	; (8008fe0 <_strtod_l+0x590>)
 8008f96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f9a:	4650      	mov	r0, sl
 8008f9c:	4659      	mov	r1, fp
 8008f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa2:	f7f7 fc73 	bl	800088c <__aeabi_ddiv>
 8008fa6:	4682      	mov	sl, r0
 8008fa8:	468b      	mov	fp, r1
 8008faa:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008fae:	d0da      	beq.n	8008f66 <_strtod_l+0x516>
 8008fb0:	f1b8 0f1f 	cmp.w	r8, #31
 8008fb4:	dd20      	ble.n	8008ff8 <_strtod_l+0x5a8>
 8008fb6:	2400      	movs	r4, #0
 8008fb8:	46a0      	mov	r8, r4
 8008fba:	9407      	str	r4, [sp, #28]
 8008fbc:	9405      	str	r4, [sp, #20]
 8008fbe:	2322      	movs	r3, #34	; 0x22
 8008fc0:	f04f 0a00 	mov.w	sl, #0
 8008fc4:	f04f 0b00 	mov.w	fp, #0
 8008fc8:	f8c9 3000 	str.w	r3, [r9]
 8008fcc:	e765      	b.n	8008e9a <_strtod_l+0x44a>
 8008fce:	bf00      	nop
 8008fd0:	0800b841 	.word	0x0800b841
 8008fd4:	0800b8cb 	.word	0x0800b8cb
 8008fd8:	0800b849 	.word	0x0800b849
 8008fdc:	0800b88c 	.word	0x0800b88c
 8008fe0:	0800b908 	.word	0x0800b908
 8008fe4:	0800b8e0 	.word	0x0800b8e0
 8008fe8:	7ff00000 	.word	0x7ff00000
 8008fec:	7ca00000 	.word	0x7ca00000
 8008ff0:	fff80000 	.word	0xfff80000
 8008ff4:	7fefffff 	.word	0x7fefffff
 8008ff8:	f018 0310 	ands.w	r3, r8, #16
 8008ffc:	bf18      	it	ne
 8008ffe:	236a      	movne	r3, #106	; 0x6a
 8009000:	4da0      	ldr	r5, [pc, #640]	; (8009284 <_strtod_l+0x834>)
 8009002:	9304      	str	r3, [sp, #16]
 8009004:	4650      	mov	r0, sl
 8009006:	4659      	mov	r1, fp
 8009008:	2300      	movs	r3, #0
 800900a:	f1b8 0f00 	cmp.w	r8, #0
 800900e:	f300 810a 	bgt.w	8009226 <_strtod_l+0x7d6>
 8009012:	b10b      	cbz	r3, 8009018 <_strtod_l+0x5c8>
 8009014:	4682      	mov	sl, r0
 8009016:	468b      	mov	fp, r1
 8009018:	9b04      	ldr	r3, [sp, #16]
 800901a:	b1bb      	cbz	r3, 800904c <_strtod_l+0x5fc>
 800901c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8009020:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009024:	2b00      	cmp	r3, #0
 8009026:	4659      	mov	r1, fp
 8009028:	dd10      	ble.n	800904c <_strtod_l+0x5fc>
 800902a:	2b1f      	cmp	r3, #31
 800902c:	f340 8107 	ble.w	800923e <_strtod_l+0x7ee>
 8009030:	2b34      	cmp	r3, #52	; 0x34
 8009032:	bfde      	ittt	le
 8009034:	3b20      	suble	r3, #32
 8009036:	f04f 32ff 	movle.w	r2, #4294967295
 800903a:	fa02 f303 	lslle.w	r3, r2, r3
 800903e:	f04f 0a00 	mov.w	sl, #0
 8009042:	bfcc      	ite	gt
 8009044:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009048:	ea03 0b01 	andle.w	fp, r3, r1
 800904c:	2200      	movs	r2, #0
 800904e:	2300      	movs	r3, #0
 8009050:	4650      	mov	r0, sl
 8009052:	4659      	mov	r1, fp
 8009054:	f7f7 fd58 	bl	8000b08 <__aeabi_dcmpeq>
 8009058:	2800      	cmp	r0, #0
 800905a:	d1ac      	bne.n	8008fb6 <_strtod_l+0x566>
 800905c:	9b07      	ldr	r3, [sp, #28]
 800905e:	9300      	str	r3, [sp, #0]
 8009060:	9a05      	ldr	r2, [sp, #20]
 8009062:	9908      	ldr	r1, [sp, #32]
 8009064:	4623      	mov	r3, r4
 8009066:	4648      	mov	r0, r9
 8009068:	f001 fdc3 	bl	800abf2 <__s2b>
 800906c:	9007      	str	r0, [sp, #28]
 800906e:	2800      	cmp	r0, #0
 8009070:	f43f af08 	beq.w	8008e84 <_strtod_l+0x434>
 8009074:	9a06      	ldr	r2, [sp, #24]
 8009076:	9b06      	ldr	r3, [sp, #24]
 8009078:	2a00      	cmp	r2, #0
 800907a:	f1c3 0300 	rsb	r3, r3, #0
 800907e:	bfa8      	it	ge
 8009080:	2300      	movge	r3, #0
 8009082:	930e      	str	r3, [sp, #56]	; 0x38
 8009084:	2400      	movs	r4, #0
 8009086:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800908a:	9316      	str	r3, [sp, #88]	; 0x58
 800908c:	46a0      	mov	r8, r4
 800908e:	9b07      	ldr	r3, [sp, #28]
 8009090:	4648      	mov	r0, r9
 8009092:	6859      	ldr	r1, [r3, #4]
 8009094:	f001 fd27 	bl	800aae6 <_Balloc>
 8009098:	9005      	str	r0, [sp, #20]
 800909a:	2800      	cmp	r0, #0
 800909c:	f43f aef6 	beq.w	8008e8c <_strtod_l+0x43c>
 80090a0:	9b07      	ldr	r3, [sp, #28]
 80090a2:	691a      	ldr	r2, [r3, #16]
 80090a4:	3202      	adds	r2, #2
 80090a6:	f103 010c 	add.w	r1, r3, #12
 80090aa:	0092      	lsls	r2, r2, #2
 80090ac:	300c      	adds	r0, #12
 80090ae:	f001 fd0f 	bl	800aad0 <memcpy>
 80090b2:	aa1e      	add	r2, sp, #120	; 0x78
 80090b4:	a91d      	add	r1, sp, #116	; 0x74
 80090b6:	ec4b ab10 	vmov	d0, sl, fp
 80090ba:	4648      	mov	r0, r9
 80090bc:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80090c0:	f002 f852 	bl	800b168 <__d2b>
 80090c4:	901c      	str	r0, [sp, #112]	; 0x70
 80090c6:	2800      	cmp	r0, #0
 80090c8:	f43f aee0 	beq.w	8008e8c <_strtod_l+0x43c>
 80090cc:	2101      	movs	r1, #1
 80090ce:	4648      	mov	r0, r9
 80090d0:	f001 fe1b 	bl	800ad0a <__i2b>
 80090d4:	4680      	mov	r8, r0
 80090d6:	2800      	cmp	r0, #0
 80090d8:	f43f aed8 	beq.w	8008e8c <_strtod_l+0x43c>
 80090dc:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80090de:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80090e0:	2e00      	cmp	r6, #0
 80090e2:	bfab      	itete	ge
 80090e4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80090e6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80090e8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80090ea:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80090ec:	bfac      	ite	ge
 80090ee:	18f7      	addge	r7, r6, r3
 80090f0:	1b9d      	sublt	r5, r3, r6
 80090f2:	9b04      	ldr	r3, [sp, #16]
 80090f4:	1af6      	subs	r6, r6, r3
 80090f6:	4416      	add	r6, r2
 80090f8:	4b63      	ldr	r3, [pc, #396]	; (8009288 <_strtod_l+0x838>)
 80090fa:	3e01      	subs	r6, #1
 80090fc:	429e      	cmp	r6, r3
 80090fe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009102:	f280 80af 	bge.w	8009264 <_strtod_l+0x814>
 8009106:	1b9b      	subs	r3, r3, r6
 8009108:	2b1f      	cmp	r3, #31
 800910a:	eba2 0203 	sub.w	r2, r2, r3
 800910e:	f04f 0101 	mov.w	r1, #1
 8009112:	f300 809b 	bgt.w	800924c <_strtod_l+0x7fc>
 8009116:	fa01 f303 	lsl.w	r3, r1, r3
 800911a:	930f      	str	r3, [sp, #60]	; 0x3c
 800911c:	2300      	movs	r3, #0
 800911e:	930a      	str	r3, [sp, #40]	; 0x28
 8009120:	18be      	adds	r6, r7, r2
 8009122:	9b04      	ldr	r3, [sp, #16]
 8009124:	42b7      	cmp	r7, r6
 8009126:	4415      	add	r5, r2
 8009128:	441d      	add	r5, r3
 800912a:	463b      	mov	r3, r7
 800912c:	bfa8      	it	ge
 800912e:	4633      	movge	r3, r6
 8009130:	42ab      	cmp	r3, r5
 8009132:	bfa8      	it	ge
 8009134:	462b      	movge	r3, r5
 8009136:	2b00      	cmp	r3, #0
 8009138:	bfc2      	ittt	gt
 800913a:	1af6      	subgt	r6, r6, r3
 800913c:	1aed      	subgt	r5, r5, r3
 800913e:	1aff      	subgt	r7, r7, r3
 8009140:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009142:	b1bb      	cbz	r3, 8009174 <_strtod_l+0x724>
 8009144:	4641      	mov	r1, r8
 8009146:	461a      	mov	r2, r3
 8009148:	4648      	mov	r0, r9
 800914a:	f001 fe7d 	bl	800ae48 <__pow5mult>
 800914e:	4680      	mov	r8, r0
 8009150:	2800      	cmp	r0, #0
 8009152:	f43f ae9b 	beq.w	8008e8c <_strtod_l+0x43c>
 8009156:	4601      	mov	r1, r0
 8009158:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800915a:	4648      	mov	r0, r9
 800915c:	f001 fdde 	bl	800ad1c <__multiply>
 8009160:	900c      	str	r0, [sp, #48]	; 0x30
 8009162:	2800      	cmp	r0, #0
 8009164:	f43f ae92 	beq.w	8008e8c <_strtod_l+0x43c>
 8009168:	991c      	ldr	r1, [sp, #112]	; 0x70
 800916a:	4648      	mov	r0, r9
 800916c:	f001 fcef 	bl	800ab4e <_Bfree>
 8009170:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009172:	931c      	str	r3, [sp, #112]	; 0x70
 8009174:	2e00      	cmp	r6, #0
 8009176:	dc7a      	bgt.n	800926e <_strtod_l+0x81e>
 8009178:	9b06      	ldr	r3, [sp, #24]
 800917a:	2b00      	cmp	r3, #0
 800917c:	dd08      	ble.n	8009190 <_strtod_l+0x740>
 800917e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009180:	9905      	ldr	r1, [sp, #20]
 8009182:	4648      	mov	r0, r9
 8009184:	f001 fe60 	bl	800ae48 <__pow5mult>
 8009188:	9005      	str	r0, [sp, #20]
 800918a:	2800      	cmp	r0, #0
 800918c:	f43f ae7e 	beq.w	8008e8c <_strtod_l+0x43c>
 8009190:	2d00      	cmp	r5, #0
 8009192:	dd08      	ble.n	80091a6 <_strtod_l+0x756>
 8009194:	462a      	mov	r2, r5
 8009196:	9905      	ldr	r1, [sp, #20]
 8009198:	4648      	mov	r0, r9
 800919a:	f001 fea3 	bl	800aee4 <__lshift>
 800919e:	9005      	str	r0, [sp, #20]
 80091a0:	2800      	cmp	r0, #0
 80091a2:	f43f ae73 	beq.w	8008e8c <_strtod_l+0x43c>
 80091a6:	2f00      	cmp	r7, #0
 80091a8:	dd08      	ble.n	80091bc <_strtod_l+0x76c>
 80091aa:	4641      	mov	r1, r8
 80091ac:	463a      	mov	r2, r7
 80091ae:	4648      	mov	r0, r9
 80091b0:	f001 fe98 	bl	800aee4 <__lshift>
 80091b4:	4680      	mov	r8, r0
 80091b6:	2800      	cmp	r0, #0
 80091b8:	f43f ae68 	beq.w	8008e8c <_strtod_l+0x43c>
 80091bc:	9a05      	ldr	r2, [sp, #20]
 80091be:	991c      	ldr	r1, [sp, #112]	; 0x70
 80091c0:	4648      	mov	r0, r9
 80091c2:	f001 fefd 	bl	800afc0 <__mdiff>
 80091c6:	4604      	mov	r4, r0
 80091c8:	2800      	cmp	r0, #0
 80091ca:	f43f ae5f 	beq.w	8008e8c <_strtod_l+0x43c>
 80091ce:	68c3      	ldr	r3, [r0, #12]
 80091d0:	930c      	str	r3, [sp, #48]	; 0x30
 80091d2:	2300      	movs	r3, #0
 80091d4:	60c3      	str	r3, [r0, #12]
 80091d6:	4641      	mov	r1, r8
 80091d8:	f001 fed8 	bl	800af8c <__mcmp>
 80091dc:	2800      	cmp	r0, #0
 80091de:	da55      	bge.n	800928c <_strtod_l+0x83c>
 80091e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091e2:	b9e3      	cbnz	r3, 800921e <_strtod_l+0x7ce>
 80091e4:	f1ba 0f00 	cmp.w	sl, #0
 80091e8:	d119      	bne.n	800921e <_strtod_l+0x7ce>
 80091ea:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80091ee:	b9b3      	cbnz	r3, 800921e <_strtod_l+0x7ce>
 80091f0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80091f4:	0d1b      	lsrs	r3, r3, #20
 80091f6:	051b      	lsls	r3, r3, #20
 80091f8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80091fc:	d90f      	bls.n	800921e <_strtod_l+0x7ce>
 80091fe:	6963      	ldr	r3, [r4, #20]
 8009200:	b913      	cbnz	r3, 8009208 <_strtod_l+0x7b8>
 8009202:	6923      	ldr	r3, [r4, #16]
 8009204:	2b01      	cmp	r3, #1
 8009206:	dd0a      	ble.n	800921e <_strtod_l+0x7ce>
 8009208:	4621      	mov	r1, r4
 800920a:	2201      	movs	r2, #1
 800920c:	4648      	mov	r0, r9
 800920e:	f001 fe69 	bl	800aee4 <__lshift>
 8009212:	4641      	mov	r1, r8
 8009214:	4604      	mov	r4, r0
 8009216:	f001 feb9 	bl	800af8c <__mcmp>
 800921a:	2800      	cmp	r0, #0
 800921c:	dc67      	bgt.n	80092ee <_strtod_l+0x89e>
 800921e:	9b04      	ldr	r3, [sp, #16]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d171      	bne.n	8009308 <_strtod_l+0x8b8>
 8009224:	e63d      	b.n	8008ea2 <_strtod_l+0x452>
 8009226:	f018 0f01 	tst.w	r8, #1
 800922a:	d004      	beq.n	8009236 <_strtod_l+0x7e6>
 800922c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009230:	f7f7 fa02 	bl	8000638 <__aeabi_dmul>
 8009234:	2301      	movs	r3, #1
 8009236:	ea4f 0868 	mov.w	r8, r8, asr #1
 800923a:	3508      	adds	r5, #8
 800923c:	e6e5      	b.n	800900a <_strtod_l+0x5ba>
 800923e:	f04f 32ff 	mov.w	r2, #4294967295
 8009242:	fa02 f303 	lsl.w	r3, r2, r3
 8009246:	ea03 0a0a 	and.w	sl, r3, sl
 800924a:	e6ff      	b.n	800904c <_strtod_l+0x5fc>
 800924c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8009250:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8009254:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8009258:	36e2      	adds	r6, #226	; 0xe2
 800925a:	fa01 f306 	lsl.w	r3, r1, r6
 800925e:	930a      	str	r3, [sp, #40]	; 0x28
 8009260:	910f      	str	r1, [sp, #60]	; 0x3c
 8009262:	e75d      	b.n	8009120 <_strtod_l+0x6d0>
 8009264:	2300      	movs	r3, #0
 8009266:	930a      	str	r3, [sp, #40]	; 0x28
 8009268:	2301      	movs	r3, #1
 800926a:	930f      	str	r3, [sp, #60]	; 0x3c
 800926c:	e758      	b.n	8009120 <_strtod_l+0x6d0>
 800926e:	4632      	mov	r2, r6
 8009270:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009272:	4648      	mov	r0, r9
 8009274:	f001 fe36 	bl	800aee4 <__lshift>
 8009278:	901c      	str	r0, [sp, #112]	; 0x70
 800927a:	2800      	cmp	r0, #0
 800927c:	f47f af7c 	bne.w	8009178 <_strtod_l+0x728>
 8009280:	e604      	b.n	8008e8c <_strtod_l+0x43c>
 8009282:	bf00      	nop
 8009284:	0800b8a0 	.word	0x0800b8a0
 8009288:	fffffc02 	.word	0xfffffc02
 800928c:	465d      	mov	r5, fp
 800928e:	f040 8086 	bne.w	800939e <_strtod_l+0x94e>
 8009292:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009294:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009298:	b32a      	cbz	r2, 80092e6 <_strtod_l+0x896>
 800929a:	4aaf      	ldr	r2, [pc, #700]	; (8009558 <_strtod_l+0xb08>)
 800929c:	4293      	cmp	r3, r2
 800929e:	d153      	bne.n	8009348 <_strtod_l+0x8f8>
 80092a0:	9b04      	ldr	r3, [sp, #16]
 80092a2:	4650      	mov	r0, sl
 80092a4:	b1d3      	cbz	r3, 80092dc <_strtod_l+0x88c>
 80092a6:	4aad      	ldr	r2, [pc, #692]	; (800955c <_strtod_l+0xb0c>)
 80092a8:	402a      	ands	r2, r5
 80092aa:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80092ae:	f04f 31ff 	mov.w	r1, #4294967295
 80092b2:	d816      	bhi.n	80092e2 <_strtod_l+0x892>
 80092b4:	0d12      	lsrs	r2, r2, #20
 80092b6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80092ba:	fa01 f303 	lsl.w	r3, r1, r3
 80092be:	4298      	cmp	r0, r3
 80092c0:	d142      	bne.n	8009348 <_strtod_l+0x8f8>
 80092c2:	4ba7      	ldr	r3, [pc, #668]	; (8009560 <_strtod_l+0xb10>)
 80092c4:	429d      	cmp	r5, r3
 80092c6:	d102      	bne.n	80092ce <_strtod_l+0x87e>
 80092c8:	3001      	adds	r0, #1
 80092ca:	f43f addf 	beq.w	8008e8c <_strtod_l+0x43c>
 80092ce:	4ba3      	ldr	r3, [pc, #652]	; (800955c <_strtod_l+0xb0c>)
 80092d0:	402b      	ands	r3, r5
 80092d2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80092d6:	f04f 0a00 	mov.w	sl, #0
 80092da:	e7a0      	b.n	800921e <_strtod_l+0x7ce>
 80092dc:	f04f 33ff 	mov.w	r3, #4294967295
 80092e0:	e7ed      	b.n	80092be <_strtod_l+0x86e>
 80092e2:	460b      	mov	r3, r1
 80092e4:	e7eb      	b.n	80092be <_strtod_l+0x86e>
 80092e6:	bb7b      	cbnz	r3, 8009348 <_strtod_l+0x8f8>
 80092e8:	f1ba 0f00 	cmp.w	sl, #0
 80092ec:	d12c      	bne.n	8009348 <_strtod_l+0x8f8>
 80092ee:	9904      	ldr	r1, [sp, #16]
 80092f0:	4a9a      	ldr	r2, [pc, #616]	; (800955c <_strtod_l+0xb0c>)
 80092f2:	465b      	mov	r3, fp
 80092f4:	b1f1      	cbz	r1, 8009334 <_strtod_l+0x8e4>
 80092f6:	ea02 010b 	and.w	r1, r2, fp
 80092fa:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80092fe:	dc19      	bgt.n	8009334 <_strtod_l+0x8e4>
 8009300:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009304:	f77f ae5b 	ble.w	8008fbe <_strtod_l+0x56e>
 8009308:	4a96      	ldr	r2, [pc, #600]	; (8009564 <_strtod_l+0xb14>)
 800930a:	2300      	movs	r3, #0
 800930c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8009310:	4650      	mov	r0, sl
 8009312:	4659      	mov	r1, fp
 8009314:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009318:	f7f7 f98e 	bl	8000638 <__aeabi_dmul>
 800931c:	4682      	mov	sl, r0
 800931e:	468b      	mov	fp, r1
 8009320:	2900      	cmp	r1, #0
 8009322:	f47f adbe 	bne.w	8008ea2 <_strtod_l+0x452>
 8009326:	2800      	cmp	r0, #0
 8009328:	f47f adbb 	bne.w	8008ea2 <_strtod_l+0x452>
 800932c:	2322      	movs	r3, #34	; 0x22
 800932e:	f8c9 3000 	str.w	r3, [r9]
 8009332:	e5b6      	b.n	8008ea2 <_strtod_l+0x452>
 8009334:	4013      	ands	r3, r2
 8009336:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800933a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800933e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009342:	f04f 3aff 	mov.w	sl, #4294967295
 8009346:	e76a      	b.n	800921e <_strtod_l+0x7ce>
 8009348:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800934a:	b193      	cbz	r3, 8009372 <_strtod_l+0x922>
 800934c:	422b      	tst	r3, r5
 800934e:	f43f af66 	beq.w	800921e <_strtod_l+0x7ce>
 8009352:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009354:	9a04      	ldr	r2, [sp, #16]
 8009356:	4650      	mov	r0, sl
 8009358:	4659      	mov	r1, fp
 800935a:	b173      	cbz	r3, 800937a <_strtod_l+0x92a>
 800935c:	f7ff fb5a 	bl	8008a14 <sulp>
 8009360:	4602      	mov	r2, r0
 8009362:	460b      	mov	r3, r1
 8009364:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009368:	f7f6 ffb0 	bl	80002cc <__adddf3>
 800936c:	4682      	mov	sl, r0
 800936e:	468b      	mov	fp, r1
 8009370:	e755      	b.n	800921e <_strtod_l+0x7ce>
 8009372:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009374:	ea13 0f0a 	tst.w	r3, sl
 8009378:	e7e9      	b.n	800934e <_strtod_l+0x8fe>
 800937a:	f7ff fb4b 	bl	8008a14 <sulp>
 800937e:	4602      	mov	r2, r0
 8009380:	460b      	mov	r3, r1
 8009382:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009386:	f7f6 ff9f 	bl	80002c8 <__aeabi_dsub>
 800938a:	2200      	movs	r2, #0
 800938c:	2300      	movs	r3, #0
 800938e:	4682      	mov	sl, r0
 8009390:	468b      	mov	fp, r1
 8009392:	f7f7 fbb9 	bl	8000b08 <__aeabi_dcmpeq>
 8009396:	2800      	cmp	r0, #0
 8009398:	f47f ae11 	bne.w	8008fbe <_strtod_l+0x56e>
 800939c:	e73f      	b.n	800921e <_strtod_l+0x7ce>
 800939e:	4641      	mov	r1, r8
 80093a0:	4620      	mov	r0, r4
 80093a2:	f001 ff30 	bl	800b206 <__ratio>
 80093a6:	ec57 6b10 	vmov	r6, r7, d0
 80093aa:	2200      	movs	r2, #0
 80093ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80093b0:	ee10 0a10 	vmov	r0, s0
 80093b4:	4639      	mov	r1, r7
 80093b6:	f7f7 fbbb 	bl	8000b30 <__aeabi_dcmple>
 80093ba:	2800      	cmp	r0, #0
 80093bc:	d077      	beq.n	80094ae <_strtod_l+0xa5e>
 80093be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d04a      	beq.n	800945a <_strtod_l+0xa0a>
 80093c4:	4b68      	ldr	r3, [pc, #416]	; (8009568 <_strtod_l+0xb18>)
 80093c6:	2200      	movs	r2, #0
 80093c8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80093cc:	4f66      	ldr	r7, [pc, #408]	; (8009568 <_strtod_l+0xb18>)
 80093ce:	2600      	movs	r6, #0
 80093d0:	4b62      	ldr	r3, [pc, #392]	; (800955c <_strtod_l+0xb0c>)
 80093d2:	402b      	ands	r3, r5
 80093d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80093d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80093d8:	4b64      	ldr	r3, [pc, #400]	; (800956c <_strtod_l+0xb1c>)
 80093da:	429a      	cmp	r2, r3
 80093dc:	f040 80ce 	bne.w	800957c <_strtod_l+0xb2c>
 80093e0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80093e4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80093e8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80093ec:	ec4b ab10 	vmov	d0, sl, fp
 80093f0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80093f4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80093f8:	f001 fe40 	bl	800b07c <__ulp>
 80093fc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009400:	ec53 2b10 	vmov	r2, r3, d0
 8009404:	f7f7 f918 	bl	8000638 <__aeabi_dmul>
 8009408:	4652      	mov	r2, sl
 800940a:	465b      	mov	r3, fp
 800940c:	f7f6 ff5e 	bl	80002cc <__adddf3>
 8009410:	460b      	mov	r3, r1
 8009412:	4952      	ldr	r1, [pc, #328]	; (800955c <_strtod_l+0xb0c>)
 8009414:	4a56      	ldr	r2, [pc, #344]	; (8009570 <_strtod_l+0xb20>)
 8009416:	4019      	ands	r1, r3
 8009418:	4291      	cmp	r1, r2
 800941a:	4682      	mov	sl, r0
 800941c:	d95b      	bls.n	80094d6 <_strtod_l+0xa86>
 800941e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009420:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009424:	4293      	cmp	r3, r2
 8009426:	d103      	bne.n	8009430 <_strtod_l+0x9e0>
 8009428:	9b08      	ldr	r3, [sp, #32]
 800942a:	3301      	adds	r3, #1
 800942c:	f43f ad2e 	beq.w	8008e8c <_strtod_l+0x43c>
 8009430:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8009560 <_strtod_l+0xb10>
 8009434:	f04f 3aff 	mov.w	sl, #4294967295
 8009438:	991c      	ldr	r1, [sp, #112]	; 0x70
 800943a:	4648      	mov	r0, r9
 800943c:	f001 fb87 	bl	800ab4e <_Bfree>
 8009440:	9905      	ldr	r1, [sp, #20]
 8009442:	4648      	mov	r0, r9
 8009444:	f001 fb83 	bl	800ab4e <_Bfree>
 8009448:	4641      	mov	r1, r8
 800944a:	4648      	mov	r0, r9
 800944c:	f001 fb7f 	bl	800ab4e <_Bfree>
 8009450:	4621      	mov	r1, r4
 8009452:	4648      	mov	r0, r9
 8009454:	f001 fb7b 	bl	800ab4e <_Bfree>
 8009458:	e619      	b.n	800908e <_strtod_l+0x63e>
 800945a:	f1ba 0f00 	cmp.w	sl, #0
 800945e:	d11a      	bne.n	8009496 <_strtod_l+0xa46>
 8009460:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009464:	b9eb      	cbnz	r3, 80094a2 <_strtod_l+0xa52>
 8009466:	2200      	movs	r2, #0
 8009468:	4b3f      	ldr	r3, [pc, #252]	; (8009568 <_strtod_l+0xb18>)
 800946a:	4630      	mov	r0, r6
 800946c:	4639      	mov	r1, r7
 800946e:	f7f7 fb55 	bl	8000b1c <__aeabi_dcmplt>
 8009472:	b9c8      	cbnz	r0, 80094a8 <_strtod_l+0xa58>
 8009474:	4630      	mov	r0, r6
 8009476:	4639      	mov	r1, r7
 8009478:	2200      	movs	r2, #0
 800947a:	4b3e      	ldr	r3, [pc, #248]	; (8009574 <_strtod_l+0xb24>)
 800947c:	f7f7 f8dc 	bl	8000638 <__aeabi_dmul>
 8009480:	4606      	mov	r6, r0
 8009482:	460f      	mov	r7, r1
 8009484:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009488:	9618      	str	r6, [sp, #96]	; 0x60
 800948a:	9319      	str	r3, [sp, #100]	; 0x64
 800948c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8009490:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009494:	e79c      	b.n	80093d0 <_strtod_l+0x980>
 8009496:	f1ba 0f01 	cmp.w	sl, #1
 800949a:	d102      	bne.n	80094a2 <_strtod_l+0xa52>
 800949c:	2d00      	cmp	r5, #0
 800949e:	f43f ad8e 	beq.w	8008fbe <_strtod_l+0x56e>
 80094a2:	2200      	movs	r2, #0
 80094a4:	4b34      	ldr	r3, [pc, #208]	; (8009578 <_strtod_l+0xb28>)
 80094a6:	e78f      	b.n	80093c8 <_strtod_l+0x978>
 80094a8:	2600      	movs	r6, #0
 80094aa:	4f32      	ldr	r7, [pc, #200]	; (8009574 <_strtod_l+0xb24>)
 80094ac:	e7ea      	b.n	8009484 <_strtod_l+0xa34>
 80094ae:	4b31      	ldr	r3, [pc, #196]	; (8009574 <_strtod_l+0xb24>)
 80094b0:	4630      	mov	r0, r6
 80094b2:	4639      	mov	r1, r7
 80094b4:	2200      	movs	r2, #0
 80094b6:	f7f7 f8bf 	bl	8000638 <__aeabi_dmul>
 80094ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80094bc:	4606      	mov	r6, r0
 80094be:	460f      	mov	r7, r1
 80094c0:	b933      	cbnz	r3, 80094d0 <_strtod_l+0xa80>
 80094c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80094c6:	9010      	str	r0, [sp, #64]	; 0x40
 80094c8:	9311      	str	r3, [sp, #68]	; 0x44
 80094ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80094ce:	e7df      	b.n	8009490 <_strtod_l+0xa40>
 80094d0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80094d4:	e7f9      	b.n	80094ca <_strtod_l+0xa7a>
 80094d6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80094da:	9b04      	ldr	r3, [sp, #16]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d1ab      	bne.n	8009438 <_strtod_l+0x9e8>
 80094e0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80094e4:	0d1b      	lsrs	r3, r3, #20
 80094e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80094e8:	051b      	lsls	r3, r3, #20
 80094ea:	429a      	cmp	r2, r3
 80094ec:	465d      	mov	r5, fp
 80094ee:	d1a3      	bne.n	8009438 <_strtod_l+0x9e8>
 80094f0:	4639      	mov	r1, r7
 80094f2:	4630      	mov	r0, r6
 80094f4:	f7f7 fb50 	bl	8000b98 <__aeabi_d2iz>
 80094f8:	f7f7 f834 	bl	8000564 <__aeabi_i2d>
 80094fc:	460b      	mov	r3, r1
 80094fe:	4602      	mov	r2, r0
 8009500:	4639      	mov	r1, r7
 8009502:	4630      	mov	r0, r6
 8009504:	f7f6 fee0 	bl	80002c8 <__aeabi_dsub>
 8009508:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800950a:	4606      	mov	r6, r0
 800950c:	460f      	mov	r7, r1
 800950e:	b933      	cbnz	r3, 800951e <_strtod_l+0xace>
 8009510:	f1ba 0f00 	cmp.w	sl, #0
 8009514:	d103      	bne.n	800951e <_strtod_l+0xace>
 8009516:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800951a:	2d00      	cmp	r5, #0
 800951c:	d06d      	beq.n	80095fa <_strtod_l+0xbaa>
 800951e:	a30a      	add	r3, pc, #40	; (adr r3, 8009548 <_strtod_l+0xaf8>)
 8009520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009524:	4630      	mov	r0, r6
 8009526:	4639      	mov	r1, r7
 8009528:	f7f7 faf8 	bl	8000b1c <__aeabi_dcmplt>
 800952c:	2800      	cmp	r0, #0
 800952e:	f47f acb8 	bne.w	8008ea2 <_strtod_l+0x452>
 8009532:	a307      	add	r3, pc, #28	; (adr r3, 8009550 <_strtod_l+0xb00>)
 8009534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009538:	4630      	mov	r0, r6
 800953a:	4639      	mov	r1, r7
 800953c:	f7f7 fb0c 	bl	8000b58 <__aeabi_dcmpgt>
 8009540:	2800      	cmp	r0, #0
 8009542:	f43f af79 	beq.w	8009438 <_strtod_l+0x9e8>
 8009546:	e4ac      	b.n	8008ea2 <_strtod_l+0x452>
 8009548:	94a03595 	.word	0x94a03595
 800954c:	3fdfffff 	.word	0x3fdfffff
 8009550:	35afe535 	.word	0x35afe535
 8009554:	3fe00000 	.word	0x3fe00000
 8009558:	000fffff 	.word	0x000fffff
 800955c:	7ff00000 	.word	0x7ff00000
 8009560:	7fefffff 	.word	0x7fefffff
 8009564:	39500000 	.word	0x39500000
 8009568:	3ff00000 	.word	0x3ff00000
 800956c:	7fe00000 	.word	0x7fe00000
 8009570:	7c9fffff 	.word	0x7c9fffff
 8009574:	3fe00000 	.word	0x3fe00000
 8009578:	bff00000 	.word	0xbff00000
 800957c:	9b04      	ldr	r3, [sp, #16]
 800957e:	b333      	cbz	r3, 80095ce <_strtod_l+0xb7e>
 8009580:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009582:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009586:	d822      	bhi.n	80095ce <_strtod_l+0xb7e>
 8009588:	a327      	add	r3, pc, #156	; (adr r3, 8009628 <_strtod_l+0xbd8>)
 800958a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800958e:	4630      	mov	r0, r6
 8009590:	4639      	mov	r1, r7
 8009592:	f7f7 facd 	bl	8000b30 <__aeabi_dcmple>
 8009596:	b1a0      	cbz	r0, 80095c2 <_strtod_l+0xb72>
 8009598:	4639      	mov	r1, r7
 800959a:	4630      	mov	r0, r6
 800959c:	f7f7 fb24 	bl	8000be8 <__aeabi_d2uiz>
 80095a0:	2800      	cmp	r0, #0
 80095a2:	bf08      	it	eq
 80095a4:	2001      	moveq	r0, #1
 80095a6:	f7f6 ffcd 	bl	8000544 <__aeabi_ui2d>
 80095aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80095ac:	4606      	mov	r6, r0
 80095ae:	460f      	mov	r7, r1
 80095b0:	bb03      	cbnz	r3, 80095f4 <_strtod_l+0xba4>
 80095b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80095b6:	9012      	str	r0, [sp, #72]	; 0x48
 80095b8:	9313      	str	r3, [sp, #76]	; 0x4c
 80095ba:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80095be:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80095c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80095c6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80095ca:	1a9b      	subs	r3, r3, r2
 80095cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80095ce:	ed9d 0b08 	vldr	d0, [sp, #32]
 80095d2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80095d6:	f001 fd51 	bl	800b07c <__ulp>
 80095da:	4650      	mov	r0, sl
 80095dc:	ec53 2b10 	vmov	r2, r3, d0
 80095e0:	4659      	mov	r1, fp
 80095e2:	f7f7 f829 	bl	8000638 <__aeabi_dmul>
 80095e6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80095ea:	f7f6 fe6f 	bl	80002cc <__adddf3>
 80095ee:	4682      	mov	sl, r0
 80095f0:	468b      	mov	fp, r1
 80095f2:	e772      	b.n	80094da <_strtod_l+0xa8a>
 80095f4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80095f8:	e7df      	b.n	80095ba <_strtod_l+0xb6a>
 80095fa:	a30d      	add	r3, pc, #52	; (adr r3, 8009630 <_strtod_l+0xbe0>)
 80095fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009600:	f7f7 fa8c 	bl	8000b1c <__aeabi_dcmplt>
 8009604:	e79c      	b.n	8009540 <_strtod_l+0xaf0>
 8009606:	2300      	movs	r3, #0
 8009608:	930d      	str	r3, [sp, #52]	; 0x34
 800960a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800960c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800960e:	6013      	str	r3, [r2, #0]
 8009610:	f7ff ba61 	b.w	8008ad6 <_strtod_l+0x86>
 8009614:	2b65      	cmp	r3, #101	; 0x65
 8009616:	f04f 0200 	mov.w	r2, #0
 800961a:	f43f ab4e 	beq.w	8008cba <_strtod_l+0x26a>
 800961e:	2101      	movs	r1, #1
 8009620:	4614      	mov	r4, r2
 8009622:	9104      	str	r1, [sp, #16]
 8009624:	f7ff bacb 	b.w	8008bbe <_strtod_l+0x16e>
 8009628:	ffc00000 	.word	0xffc00000
 800962c:	41dfffff 	.word	0x41dfffff
 8009630:	94a03595 	.word	0x94a03595
 8009634:	3fcfffff 	.word	0x3fcfffff

08009638 <_strtod_r>:
 8009638:	4b05      	ldr	r3, [pc, #20]	; (8009650 <_strtod_r+0x18>)
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	b410      	push	{r4}
 800963e:	6a1b      	ldr	r3, [r3, #32]
 8009640:	4c04      	ldr	r4, [pc, #16]	; (8009654 <_strtod_r+0x1c>)
 8009642:	2b00      	cmp	r3, #0
 8009644:	bf08      	it	eq
 8009646:	4623      	moveq	r3, r4
 8009648:	f85d 4b04 	ldr.w	r4, [sp], #4
 800964c:	f7ff ba00 	b.w	8008a50 <_strtod_l>
 8009650:	2000000c 	.word	0x2000000c
 8009654:	20000070 	.word	0x20000070

08009658 <strtod>:
 8009658:	4b07      	ldr	r3, [pc, #28]	; (8009678 <strtod+0x20>)
 800965a:	4a08      	ldr	r2, [pc, #32]	; (800967c <strtod+0x24>)
 800965c:	b410      	push	{r4}
 800965e:	681c      	ldr	r4, [r3, #0]
 8009660:	6a23      	ldr	r3, [r4, #32]
 8009662:	2b00      	cmp	r3, #0
 8009664:	bf08      	it	eq
 8009666:	4613      	moveq	r3, r2
 8009668:	460a      	mov	r2, r1
 800966a:	4601      	mov	r1, r0
 800966c:	4620      	mov	r0, r4
 800966e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009672:	f7ff b9ed 	b.w	8008a50 <_strtod_l>
 8009676:	bf00      	nop
 8009678:	2000000c 	.word	0x2000000c
 800967c:	20000070 	.word	0x20000070

08009680 <_strtol_l.isra.0>:
 8009680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009684:	4680      	mov	r8, r0
 8009686:	4689      	mov	r9, r1
 8009688:	4692      	mov	sl, r2
 800968a:	461e      	mov	r6, r3
 800968c:	460f      	mov	r7, r1
 800968e:	463d      	mov	r5, r7
 8009690:	9808      	ldr	r0, [sp, #32]
 8009692:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009696:	f001 f9ed 	bl	800aa74 <__locale_ctype_ptr_l>
 800969a:	4420      	add	r0, r4
 800969c:	7843      	ldrb	r3, [r0, #1]
 800969e:	f013 0308 	ands.w	r3, r3, #8
 80096a2:	d132      	bne.n	800970a <_strtol_l.isra.0+0x8a>
 80096a4:	2c2d      	cmp	r4, #45	; 0x2d
 80096a6:	d132      	bne.n	800970e <_strtol_l.isra.0+0x8e>
 80096a8:	787c      	ldrb	r4, [r7, #1]
 80096aa:	1cbd      	adds	r5, r7, #2
 80096ac:	2201      	movs	r2, #1
 80096ae:	2e00      	cmp	r6, #0
 80096b0:	d05d      	beq.n	800976e <_strtol_l.isra.0+0xee>
 80096b2:	2e10      	cmp	r6, #16
 80096b4:	d109      	bne.n	80096ca <_strtol_l.isra.0+0x4a>
 80096b6:	2c30      	cmp	r4, #48	; 0x30
 80096b8:	d107      	bne.n	80096ca <_strtol_l.isra.0+0x4a>
 80096ba:	782b      	ldrb	r3, [r5, #0]
 80096bc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80096c0:	2b58      	cmp	r3, #88	; 0x58
 80096c2:	d14f      	bne.n	8009764 <_strtol_l.isra.0+0xe4>
 80096c4:	786c      	ldrb	r4, [r5, #1]
 80096c6:	2610      	movs	r6, #16
 80096c8:	3502      	adds	r5, #2
 80096ca:	2a00      	cmp	r2, #0
 80096cc:	bf14      	ite	ne
 80096ce:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80096d2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80096d6:	2700      	movs	r7, #0
 80096d8:	fbb1 fcf6 	udiv	ip, r1, r6
 80096dc:	4638      	mov	r0, r7
 80096de:	fb06 1e1c 	mls	lr, r6, ip, r1
 80096e2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80096e6:	2b09      	cmp	r3, #9
 80096e8:	d817      	bhi.n	800971a <_strtol_l.isra.0+0x9a>
 80096ea:	461c      	mov	r4, r3
 80096ec:	42a6      	cmp	r6, r4
 80096ee:	dd23      	ble.n	8009738 <_strtol_l.isra.0+0xb8>
 80096f0:	1c7b      	adds	r3, r7, #1
 80096f2:	d007      	beq.n	8009704 <_strtol_l.isra.0+0x84>
 80096f4:	4584      	cmp	ip, r0
 80096f6:	d31c      	bcc.n	8009732 <_strtol_l.isra.0+0xb2>
 80096f8:	d101      	bne.n	80096fe <_strtol_l.isra.0+0x7e>
 80096fa:	45a6      	cmp	lr, r4
 80096fc:	db19      	blt.n	8009732 <_strtol_l.isra.0+0xb2>
 80096fe:	fb00 4006 	mla	r0, r0, r6, r4
 8009702:	2701      	movs	r7, #1
 8009704:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009708:	e7eb      	b.n	80096e2 <_strtol_l.isra.0+0x62>
 800970a:	462f      	mov	r7, r5
 800970c:	e7bf      	b.n	800968e <_strtol_l.isra.0+0xe>
 800970e:	2c2b      	cmp	r4, #43	; 0x2b
 8009710:	bf04      	itt	eq
 8009712:	1cbd      	addeq	r5, r7, #2
 8009714:	787c      	ldrbeq	r4, [r7, #1]
 8009716:	461a      	mov	r2, r3
 8009718:	e7c9      	b.n	80096ae <_strtol_l.isra.0+0x2e>
 800971a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800971e:	2b19      	cmp	r3, #25
 8009720:	d801      	bhi.n	8009726 <_strtol_l.isra.0+0xa6>
 8009722:	3c37      	subs	r4, #55	; 0x37
 8009724:	e7e2      	b.n	80096ec <_strtol_l.isra.0+0x6c>
 8009726:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800972a:	2b19      	cmp	r3, #25
 800972c:	d804      	bhi.n	8009738 <_strtol_l.isra.0+0xb8>
 800972e:	3c57      	subs	r4, #87	; 0x57
 8009730:	e7dc      	b.n	80096ec <_strtol_l.isra.0+0x6c>
 8009732:	f04f 37ff 	mov.w	r7, #4294967295
 8009736:	e7e5      	b.n	8009704 <_strtol_l.isra.0+0x84>
 8009738:	1c7b      	adds	r3, r7, #1
 800973a:	d108      	bne.n	800974e <_strtol_l.isra.0+0xce>
 800973c:	2322      	movs	r3, #34	; 0x22
 800973e:	f8c8 3000 	str.w	r3, [r8]
 8009742:	4608      	mov	r0, r1
 8009744:	f1ba 0f00 	cmp.w	sl, #0
 8009748:	d107      	bne.n	800975a <_strtol_l.isra.0+0xda>
 800974a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800974e:	b102      	cbz	r2, 8009752 <_strtol_l.isra.0+0xd2>
 8009750:	4240      	negs	r0, r0
 8009752:	f1ba 0f00 	cmp.w	sl, #0
 8009756:	d0f8      	beq.n	800974a <_strtol_l.isra.0+0xca>
 8009758:	b10f      	cbz	r7, 800975e <_strtol_l.isra.0+0xde>
 800975a:	f105 39ff 	add.w	r9, r5, #4294967295
 800975e:	f8ca 9000 	str.w	r9, [sl]
 8009762:	e7f2      	b.n	800974a <_strtol_l.isra.0+0xca>
 8009764:	2430      	movs	r4, #48	; 0x30
 8009766:	2e00      	cmp	r6, #0
 8009768:	d1af      	bne.n	80096ca <_strtol_l.isra.0+0x4a>
 800976a:	2608      	movs	r6, #8
 800976c:	e7ad      	b.n	80096ca <_strtol_l.isra.0+0x4a>
 800976e:	2c30      	cmp	r4, #48	; 0x30
 8009770:	d0a3      	beq.n	80096ba <_strtol_l.isra.0+0x3a>
 8009772:	260a      	movs	r6, #10
 8009774:	e7a9      	b.n	80096ca <_strtol_l.isra.0+0x4a>
	...

08009778 <_strtol_r>:
 8009778:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800977a:	4c06      	ldr	r4, [pc, #24]	; (8009794 <_strtol_r+0x1c>)
 800977c:	4d06      	ldr	r5, [pc, #24]	; (8009798 <_strtol_r+0x20>)
 800977e:	6824      	ldr	r4, [r4, #0]
 8009780:	6a24      	ldr	r4, [r4, #32]
 8009782:	2c00      	cmp	r4, #0
 8009784:	bf08      	it	eq
 8009786:	462c      	moveq	r4, r5
 8009788:	9400      	str	r4, [sp, #0]
 800978a:	f7ff ff79 	bl	8009680 <_strtol_l.isra.0>
 800978e:	b003      	add	sp, #12
 8009790:	bd30      	pop	{r4, r5, pc}
 8009792:	bf00      	nop
 8009794:	2000000c 	.word	0x2000000c
 8009798:	20000070 	.word	0x20000070

0800979c <quorem>:
 800979c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097a0:	6903      	ldr	r3, [r0, #16]
 80097a2:	690c      	ldr	r4, [r1, #16]
 80097a4:	42a3      	cmp	r3, r4
 80097a6:	4680      	mov	r8, r0
 80097a8:	f2c0 8082 	blt.w	80098b0 <quorem+0x114>
 80097ac:	3c01      	subs	r4, #1
 80097ae:	f101 0714 	add.w	r7, r1, #20
 80097b2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80097b6:	f100 0614 	add.w	r6, r0, #20
 80097ba:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80097be:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80097c2:	eb06 030c 	add.w	r3, r6, ip
 80097c6:	3501      	adds	r5, #1
 80097c8:	eb07 090c 	add.w	r9, r7, ip
 80097cc:	9301      	str	r3, [sp, #4]
 80097ce:	fbb0 f5f5 	udiv	r5, r0, r5
 80097d2:	b395      	cbz	r5, 800983a <quorem+0x9e>
 80097d4:	f04f 0a00 	mov.w	sl, #0
 80097d8:	4638      	mov	r0, r7
 80097da:	46b6      	mov	lr, r6
 80097dc:	46d3      	mov	fp, sl
 80097de:	f850 2b04 	ldr.w	r2, [r0], #4
 80097e2:	b293      	uxth	r3, r2
 80097e4:	fb05 a303 	mla	r3, r5, r3, sl
 80097e8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80097ec:	b29b      	uxth	r3, r3
 80097ee:	ebab 0303 	sub.w	r3, fp, r3
 80097f2:	0c12      	lsrs	r2, r2, #16
 80097f4:	f8de b000 	ldr.w	fp, [lr]
 80097f8:	fb05 a202 	mla	r2, r5, r2, sl
 80097fc:	fa13 f38b 	uxtah	r3, r3, fp
 8009800:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009804:	fa1f fb82 	uxth.w	fp, r2
 8009808:	f8de 2000 	ldr.w	r2, [lr]
 800980c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009810:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009814:	b29b      	uxth	r3, r3
 8009816:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800981a:	4581      	cmp	r9, r0
 800981c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009820:	f84e 3b04 	str.w	r3, [lr], #4
 8009824:	d2db      	bcs.n	80097de <quorem+0x42>
 8009826:	f856 300c 	ldr.w	r3, [r6, ip]
 800982a:	b933      	cbnz	r3, 800983a <quorem+0x9e>
 800982c:	9b01      	ldr	r3, [sp, #4]
 800982e:	3b04      	subs	r3, #4
 8009830:	429e      	cmp	r6, r3
 8009832:	461a      	mov	r2, r3
 8009834:	d330      	bcc.n	8009898 <quorem+0xfc>
 8009836:	f8c8 4010 	str.w	r4, [r8, #16]
 800983a:	4640      	mov	r0, r8
 800983c:	f001 fba6 	bl	800af8c <__mcmp>
 8009840:	2800      	cmp	r0, #0
 8009842:	db25      	blt.n	8009890 <quorem+0xf4>
 8009844:	3501      	adds	r5, #1
 8009846:	4630      	mov	r0, r6
 8009848:	f04f 0c00 	mov.w	ip, #0
 800984c:	f857 2b04 	ldr.w	r2, [r7], #4
 8009850:	f8d0 e000 	ldr.w	lr, [r0]
 8009854:	b293      	uxth	r3, r2
 8009856:	ebac 0303 	sub.w	r3, ip, r3
 800985a:	0c12      	lsrs	r2, r2, #16
 800985c:	fa13 f38e 	uxtah	r3, r3, lr
 8009860:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009864:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009868:	b29b      	uxth	r3, r3
 800986a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800986e:	45b9      	cmp	r9, r7
 8009870:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009874:	f840 3b04 	str.w	r3, [r0], #4
 8009878:	d2e8      	bcs.n	800984c <quorem+0xb0>
 800987a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800987e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8009882:	b92a      	cbnz	r2, 8009890 <quorem+0xf4>
 8009884:	3b04      	subs	r3, #4
 8009886:	429e      	cmp	r6, r3
 8009888:	461a      	mov	r2, r3
 800988a:	d30b      	bcc.n	80098a4 <quorem+0x108>
 800988c:	f8c8 4010 	str.w	r4, [r8, #16]
 8009890:	4628      	mov	r0, r5
 8009892:	b003      	add	sp, #12
 8009894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009898:	6812      	ldr	r2, [r2, #0]
 800989a:	3b04      	subs	r3, #4
 800989c:	2a00      	cmp	r2, #0
 800989e:	d1ca      	bne.n	8009836 <quorem+0x9a>
 80098a0:	3c01      	subs	r4, #1
 80098a2:	e7c5      	b.n	8009830 <quorem+0x94>
 80098a4:	6812      	ldr	r2, [r2, #0]
 80098a6:	3b04      	subs	r3, #4
 80098a8:	2a00      	cmp	r2, #0
 80098aa:	d1ef      	bne.n	800988c <quorem+0xf0>
 80098ac:	3c01      	subs	r4, #1
 80098ae:	e7ea      	b.n	8009886 <quorem+0xea>
 80098b0:	2000      	movs	r0, #0
 80098b2:	e7ee      	b.n	8009892 <quorem+0xf6>
 80098b4:	0000      	movs	r0, r0
	...

080098b8 <_dtoa_r>:
 80098b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098bc:	ec57 6b10 	vmov	r6, r7, d0
 80098c0:	b097      	sub	sp, #92	; 0x5c
 80098c2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80098c4:	9106      	str	r1, [sp, #24]
 80098c6:	4604      	mov	r4, r0
 80098c8:	920b      	str	r2, [sp, #44]	; 0x2c
 80098ca:	9312      	str	r3, [sp, #72]	; 0x48
 80098cc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80098d0:	e9cd 6700 	strd	r6, r7, [sp]
 80098d4:	b93d      	cbnz	r5, 80098e6 <_dtoa_r+0x2e>
 80098d6:	2010      	movs	r0, #16
 80098d8:	f001 f8e0 	bl	800aa9c <malloc>
 80098dc:	6260      	str	r0, [r4, #36]	; 0x24
 80098de:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80098e2:	6005      	str	r5, [r0, #0]
 80098e4:	60c5      	str	r5, [r0, #12]
 80098e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098e8:	6819      	ldr	r1, [r3, #0]
 80098ea:	b151      	cbz	r1, 8009902 <_dtoa_r+0x4a>
 80098ec:	685a      	ldr	r2, [r3, #4]
 80098ee:	604a      	str	r2, [r1, #4]
 80098f0:	2301      	movs	r3, #1
 80098f2:	4093      	lsls	r3, r2
 80098f4:	608b      	str	r3, [r1, #8]
 80098f6:	4620      	mov	r0, r4
 80098f8:	f001 f929 	bl	800ab4e <_Bfree>
 80098fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098fe:	2200      	movs	r2, #0
 8009900:	601a      	str	r2, [r3, #0]
 8009902:	1e3b      	subs	r3, r7, #0
 8009904:	bfbb      	ittet	lt
 8009906:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800990a:	9301      	strlt	r3, [sp, #4]
 800990c:	2300      	movge	r3, #0
 800990e:	2201      	movlt	r2, #1
 8009910:	bfac      	ite	ge
 8009912:	f8c8 3000 	strge.w	r3, [r8]
 8009916:	f8c8 2000 	strlt.w	r2, [r8]
 800991a:	4baf      	ldr	r3, [pc, #700]	; (8009bd8 <_dtoa_r+0x320>)
 800991c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009920:	ea33 0308 	bics.w	r3, r3, r8
 8009924:	d114      	bne.n	8009950 <_dtoa_r+0x98>
 8009926:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009928:	f242 730f 	movw	r3, #9999	; 0x270f
 800992c:	6013      	str	r3, [r2, #0]
 800992e:	9b00      	ldr	r3, [sp, #0]
 8009930:	b923      	cbnz	r3, 800993c <_dtoa_r+0x84>
 8009932:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8009936:	2800      	cmp	r0, #0
 8009938:	f000 8542 	beq.w	800a3c0 <_dtoa_r+0xb08>
 800993c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800993e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8009bec <_dtoa_r+0x334>
 8009942:	2b00      	cmp	r3, #0
 8009944:	f000 8544 	beq.w	800a3d0 <_dtoa_r+0xb18>
 8009948:	f10b 0303 	add.w	r3, fp, #3
 800994c:	f000 bd3e 	b.w	800a3cc <_dtoa_r+0xb14>
 8009950:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009954:	2200      	movs	r2, #0
 8009956:	2300      	movs	r3, #0
 8009958:	4630      	mov	r0, r6
 800995a:	4639      	mov	r1, r7
 800995c:	f7f7 f8d4 	bl	8000b08 <__aeabi_dcmpeq>
 8009960:	4681      	mov	r9, r0
 8009962:	b168      	cbz	r0, 8009980 <_dtoa_r+0xc8>
 8009964:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009966:	2301      	movs	r3, #1
 8009968:	6013      	str	r3, [r2, #0]
 800996a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800996c:	2b00      	cmp	r3, #0
 800996e:	f000 8524 	beq.w	800a3ba <_dtoa_r+0xb02>
 8009972:	4b9a      	ldr	r3, [pc, #616]	; (8009bdc <_dtoa_r+0x324>)
 8009974:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009976:	f103 3bff 	add.w	fp, r3, #4294967295
 800997a:	6013      	str	r3, [r2, #0]
 800997c:	f000 bd28 	b.w	800a3d0 <_dtoa_r+0xb18>
 8009980:	aa14      	add	r2, sp, #80	; 0x50
 8009982:	a915      	add	r1, sp, #84	; 0x54
 8009984:	ec47 6b10 	vmov	d0, r6, r7
 8009988:	4620      	mov	r0, r4
 800998a:	f001 fbed 	bl	800b168 <__d2b>
 800998e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009992:	9004      	str	r0, [sp, #16]
 8009994:	2d00      	cmp	r5, #0
 8009996:	d07c      	beq.n	8009a92 <_dtoa_r+0x1da>
 8009998:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800999c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80099a0:	46b2      	mov	sl, r6
 80099a2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80099a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80099aa:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80099ae:	2200      	movs	r2, #0
 80099b0:	4b8b      	ldr	r3, [pc, #556]	; (8009be0 <_dtoa_r+0x328>)
 80099b2:	4650      	mov	r0, sl
 80099b4:	4659      	mov	r1, fp
 80099b6:	f7f6 fc87 	bl	80002c8 <__aeabi_dsub>
 80099ba:	a381      	add	r3, pc, #516	; (adr r3, 8009bc0 <_dtoa_r+0x308>)
 80099bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c0:	f7f6 fe3a 	bl	8000638 <__aeabi_dmul>
 80099c4:	a380      	add	r3, pc, #512	; (adr r3, 8009bc8 <_dtoa_r+0x310>)
 80099c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ca:	f7f6 fc7f 	bl	80002cc <__adddf3>
 80099ce:	4606      	mov	r6, r0
 80099d0:	4628      	mov	r0, r5
 80099d2:	460f      	mov	r7, r1
 80099d4:	f7f6 fdc6 	bl	8000564 <__aeabi_i2d>
 80099d8:	a37d      	add	r3, pc, #500	; (adr r3, 8009bd0 <_dtoa_r+0x318>)
 80099da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099de:	f7f6 fe2b 	bl	8000638 <__aeabi_dmul>
 80099e2:	4602      	mov	r2, r0
 80099e4:	460b      	mov	r3, r1
 80099e6:	4630      	mov	r0, r6
 80099e8:	4639      	mov	r1, r7
 80099ea:	f7f6 fc6f 	bl	80002cc <__adddf3>
 80099ee:	4606      	mov	r6, r0
 80099f0:	460f      	mov	r7, r1
 80099f2:	f7f7 f8d1 	bl	8000b98 <__aeabi_d2iz>
 80099f6:	2200      	movs	r2, #0
 80099f8:	4682      	mov	sl, r0
 80099fa:	2300      	movs	r3, #0
 80099fc:	4630      	mov	r0, r6
 80099fe:	4639      	mov	r1, r7
 8009a00:	f7f7 f88c 	bl	8000b1c <__aeabi_dcmplt>
 8009a04:	b148      	cbz	r0, 8009a1a <_dtoa_r+0x162>
 8009a06:	4650      	mov	r0, sl
 8009a08:	f7f6 fdac 	bl	8000564 <__aeabi_i2d>
 8009a0c:	4632      	mov	r2, r6
 8009a0e:	463b      	mov	r3, r7
 8009a10:	f7f7 f87a 	bl	8000b08 <__aeabi_dcmpeq>
 8009a14:	b908      	cbnz	r0, 8009a1a <_dtoa_r+0x162>
 8009a16:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009a1a:	f1ba 0f16 	cmp.w	sl, #22
 8009a1e:	d859      	bhi.n	8009ad4 <_dtoa_r+0x21c>
 8009a20:	4970      	ldr	r1, [pc, #448]	; (8009be4 <_dtoa_r+0x32c>)
 8009a22:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009a26:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a2e:	f7f7 f893 	bl	8000b58 <__aeabi_dcmpgt>
 8009a32:	2800      	cmp	r0, #0
 8009a34:	d050      	beq.n	8009ad8 <_dtoa_r+0x220>
 8009a36:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a3e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009a40:	1b5d      	subs	r5, r3, r5
 8009a42:	f1b5 0801 	subs.w	r8, r5, #1
 8009a46:	bf49      	itett	mi
 8009a48:	f1c5 0301 	rsbmi	r3, r5, #1
 8009a4c:	2300      	movpl	r3, #0
 8009a4e:	9305      	strmi	r3, [sp, #20]
 8009a50:	f04f 0800 	movmi.w	r8, #0
 8009a54:	bf58      	it	pl
 8009a56:	9305      	strpl	r3, [sp, #20]
 8009a58:	f1ba 0f00 	cmp.w	sl, #0
 8009a5c:	db3e      	blt.n	8009adc <_dtoa_r+0x224>
 8009a5e:	2300      	movs	r3, #0
 8009a60:	44d0      	add	r8, sl
 8009a62:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009a66:	9307      	str	r3, [sp, #28]
 8009a68:	9b06      	ldr	r3, [sp, #24]
 8009a6a:	2b09      	cmp	r3, #9
 8009a6c:	f200 8090 	bhi.w	8009b90 <_dtoa_r+0x2d8>
 8009a70:	2b05      	cmp	r3, #5
 8009a72:	bfc4      	itt	gt
 8009a74:	3b04      	subgt	r3, #4
 8009a76:	9306      	strgt	r3, [sp, #24]
 8009a78:	9b06      	ldr	r3, [sp, #24]
 8009a7a:	f1a3 0302 	sub.w	r3, r3, #2
 8009a7e:	bfcc      	ite	gt
 8009a80:	2500      	movgt	r5, #0
 8009a82:	2501      	movle	r5, #1
 8009a84:	2b03      	cmp	r3, #3
 8009a86:	f200 808f 	bhi.w	8009ba8 <_dtoa_r+0x2f0>
 8009a8a:	e8df f003 	tbb	[pc, r3]
 8009a8e:	7f7d      	.short	0x7f7d
 8009a90:	7131      	.short	0x7131
 8009a92:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8009a96:	441d      	add	r5, r3
 8009a98:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8009a9c:	2820      	cmp	r0, #32
 8009a9e:	dd13      	ble.n	8009ac8 <_dtoa_r+0x210>
 8009aa0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8009aa4:	9b00      	ldr	r3, [sp, #0]
 8009aa6:	fa08 f800 	lsl.w	r8, r8, r0
 8009aaa:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8009aae:	fa23 f000 	lsr.w	r0, r3, r0
 8009ab2:	ea48 0000 	orr.w	r0, r8, r0
 8009ab6:	f7f6 fd45 	bl	8000544 <__aeabi_ui2d>
 8009aba:	2301      	movs	r3, #1
 8009abc:	4682      	mov	sl, r0
 8009abe:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8009ac2:	3d01      	subs	r5, #1
 8009ac4:	9313      	str	r3, [sp, #76]	; 0x4c
 8009ac6:	e772      	b.n	80099ae <_dtoa_r+0xf6>
 8009ac8:	9b00      	ldr	r3, [sp, #0]
 8009aca:	f1c0 0020 	rsb	r0, r0, #32
 8009ace:	fa03 f000 	lsl.w	r0, r3, r0
 8009ad2:	e7f0      	b.n	8009ab6 <_dtoa_r+0x1fe>
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	e7b1      	b.n	8009a3c <_dtoa_r+0x184>
 8009ad8:	900f      	str	r0, [sp, #60]	; 0x3c
 8009ada:	e7b0      	b.n	8009a3e <_dtoa_r+0x186>
 8009adc:	9b05      	ldr	r3, [sp, #20]
 8009ade:	eba3 030a 	sub.w	r3, r3, sl
 8009ae2:	9305      	str	r3, [sp, #20]
 8009ae4:	f1ca 0300 	rsb	r3, sl, #0
 8009ae8:	9307      	str	r3, [sp, #28]
 8009aea:	2300      	movs	r3, #0
 8009aec:	930e      	str	r3, [sp, #56]	; 0x38
 8009aee:	e7bb      	b.n	8009a68 <_dtoa_r+0x1b0>
 8009af0:	2301      	movs	r3, #1
 8009af2:	930a      	str	r3, [sp, #40]	; 0x28
 8009af4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	dd59      	ble.n	8009bae <_dtoa_r+0x2f6>
 8009afa:	9302      	str	r3, [sp, #8]
 8009afc:	4699      	mov	r9, r3
 8009afe:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009b00:	2200      	movs	r2, #0
 8009b02:	6072      	str	r2, [r6, #4]
 8009b04:	2204      	movs	r2, #4
 8009b06:	f102 0014 	add.w	r0, r2, #20
 8009b0a:	4298      	cmp	r0, r3
 8009b0c:	6871      	ldr	r1, [r6, #4]
 8009b0e:	d953      	bls.n	8009bb8 <_dtoa_r+0x300>
 8009b10:	4620      	mov	r0, r4
 8009b12:	f000 ffe8 	bl	800aae6 <_Balloc>
 8009b16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b18:	6030      	str	r0, [r6, #0]
 8009b1a:	f1b9 0f0e 	cmp.w	r9, #14
 8009b1e:	f8d3 b000 	ldr.w	fp, [r3]
 8009b22:	f200 80e6 	bhi.w	8009cf2 <_dtoa_r+0x43a>
 8009b26:	2d00      	cmp	r5, #0
 8009b28:	f000 80e3 	beq.w	8009cf2 <_dtoa_r+0x43a>
 8009b2c:	ed9d 7b00 	vldr	d7, [sp]
 8009b30:	f1ba 0f00 	cmp.w	sl, #0
 8009b34:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8009b38:	dd74      	ble.n	8009c24 <_dtoa_r+0x36c>
 8009b3a:	4a2a      	ldr	r2, [pc, #168]	; (8009be4 <_dtoa_r+0x32c>)
 8009b3c:	f00a 030f 	and.w	r3, sl, #15
 8009b40:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009b44:	ed93 7b00 	vldr	d7, [r3]
 8009b48:	ea4f 162a 	mov.w	r6, sl, asr #4
 8009b4c:	06f0      	lsls	r0, r6, #27
 8009b4e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8009b52:	d565      	bpl.n	8009c20 <_dtoa_r+0x368>
 8009b54:	4b24      	ldr	r3, [pc, #144]	; (8009be8 <_dtoa_r+0x330>)
 8009b56:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009b5a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009b5e:	f7f6 fe95 	bl	800088c <__aeabi_ddiv>
 8009b62:	e9cd 0100 	strd	r0, r1, [sp]
 8009b66:	f006 060f 	and.w	r6, r6, #15
 8009b6a:	2503      	movs	r5, #3
 8009b6c:	4f1e      	ldr	r7, [pc, #120]	; (8009be8 <_dtoa_r+0x330>)
 8009b6e:	e04c      	b.n	8009c0a <_dtoa_r+0x352>
 8009b70:	2301      	movs	r3, #1
 8009b72:	930a      	str	r3, [sp, #40]	; 0x28
 8009b74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b76:	4453      	add	r3, sl
 8009b78:	f103 0901 	add.w	r9, r3, #1
 8009b7c:	9302      	str	r3, [sp, #8]
 8009b7e:	464b      	mov	r3, r9
 8009b80:	2b01      	cmp	r3, #1
 8009b82:	bfb8      	it	lt
 8009b84:	2301      	movlt	r3, #1
 8009b86:	e7ba      	b.n	8009afe <_dtoa_r+0x246>
 8009b88:	2300      	movs	r3, #0
 8009b8a:	e7b2      	b.n	8009af2 <_dtoa_r+0x23a>
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	e7f0      	b.n	8009b72 <_dtoa_r+0x2ba>
 8009b90:	2501      	movs	r5, #1
 8009b92:	2300      	movs	r3, #0
 8009b94:	9306      	str	r3, [sp, #24]
 8009b96:	950a      	str	r5, [sp, #40]	; 0x28
 8009b98:	f04f 33ff 	mov.w	r3, #4294967295
 8009b9c:	9302      	str	r3, [sp, #8]
 8009b9e:	4699      	mov	r9, r3
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	2312      	movs	r3, #18
 8009ba4:	920b      	str	r2, [sp, #44]	; 0x2c
 8009ba6:	e7aa      	b.n	8009afe <_dtoa_r+0x246>
 8009ba8:	2301      	movs	r3, #1
 8009baa:	930a      	str	r3, [sp, #40]	; 0x28
 8009bac:	e7f4      	b.n	8009b98 <_dtoa_r+0x2e0>
 8009bae:	2301      	movs	r3, #1
 8009bb0:	9302      	str	r3, [sp, #8]
 8009bb2:	4699      	mov	r9, r3
 8009bb4:	461a      	mov	r2, r3
 8009bb6:	e7f5      	b.n	8009ba4 <_dtoa_r+0x2ec>
 8009bb8:	3101      	adds	r1, #1
 8009bba:	6071      	str	r1, [r6, #4]
 8009bbc:	0052      	lsls	r2, r2, #1
 8009bbe:	e7a2      	b.n	8009b06 <_dtoa_r+0x24e>
 8009bc0:	636f4361 	.word	0x636f4361
 8009bc4:	3fd287a7 	.word	0x3fd287a7
 8009bc8:	8b60c8b3 	.word	0x8b60c8b3
 8009bcc:	3fc68a28 	.word	0x3fc68a28
 8009bd0:	509f79fb 	.word	0x509f79fb
 8009bd4:	3fd34413 	.word	0x3fd34413
 8009bd8:	7ff00000 	.word	0x7ff00000
 8009bdc:	0800b84d 	.word	0x0800b84d
 8009be0:	3ff80000 	.word	0x3ff80000
 8009be4:	0800b908 	.word	0x0800b908
 8009be8:	0800b8e0 	.word	0x0800b8e0
 8009bec:	0800b8d1 	.word	0x0800b8d1
 8009bf0:	07f1      	lsls	r1, r6, #31
 8009bf2:	d508      	bpl.n	8009c06 <_dtoa_r+0x34e>
 8009bf4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009bf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009bfc:	f7f6 fd1c 	bl	8000638 <__aeabi_dmul>
 8009c00:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009c04:	3501      	adds	r5, #1
 8009c06:	1076      	asrs	r6, r6, #1
 8009c08:	3708      	adds	r7, #8
 8009c0a:	2e00      	cmp	r6, #0
 8009c0c:	d1f0      	bne.n	8009bf0 <_dtoa_r+0x338>
 8009c0e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009c12:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009c16:	f7f6 fe39 	bl	800088c <__aeabi_ddiv>
 8009c1a:	e9cd 0100 	strd	r0, r1, [sp]
 8009c1e:	e01a      	b.n	8009c56 <_dtoa_r+0x39e>
 8009c20:	2502      	movs	r5, #2
 8009c22:	e7a3      	b.n	8009b6c <_dtoa_r+0x2b4>
 8009c24:	f000 80a0 	beq.w	8009d68 <_dtoa_r+0x4b0>
 8009c28:	f1ca 0600 	rsb	r6, sl, #0
 8009c2c:	4b9f      	ldr	r3, [pc, #636]	; (8009eac <_dtoa_r+0x5f4>)
 8009c2e:	4fa0      	ldr	r7, [pc, #640]	; (8009eb0 <_dtoa_r+0x5f8>)
 8009c30:	f006 020f 	and.w	r2, r6, #15
 8009c34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c3c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009c40:	f7f6 fcfa 	bl	8000638 <__aeabi_dmul>
 8009c44:	e9cd 0100 	strd	r0, r1, [sp]
 8009c48:	1136      	asrs	r6, r6, #4
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	2502      	movs	r5, #2
 8009c4e:	2e00      	cmp	r6, #0
 8009c50:	d17f      	bne.n	8009d52 <_dtoa_r+0x49a>
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d1e1      	bne.n	8009c1a <_dtoa_r+0x362>
 8009c56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	f000 8087 	beq.w	8009d6c <_dtoa_r+0x4b4>
 8009c5e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009c62:	2200      	movs	r2, #0
 8009c64:	4b93      	ldr	r3, [pc, #588]	; (8009eb4 <_dtoa_r+0x5fc>)
 8009c66:	4630      	mov	r0, r6
 8009c68:	4639      	mov	r1, r7
 8009c6a:	f7f6 ff57 	bl	8000b1c <__aeabi_dcmplt>
 8009c6e:	2800      	cmp	r0, #0
 8009c70:	d07c      	beq.n	8009d6c <_dtoa_r+0x4b4>
 8009c72:	f1b9 0f00 	cmp.w	r9, #0
 8009c76:	d079      	beq.n	8009d6c <_dtoa_r+0x4b4>
 8009c78:	9b02      	ldr	r3, [sp, #8]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	dd35      	ble.n	8009cea <_dtoa_r+0x432>
 8009c7e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009c82:	9308      	str	r3, [sp, #32]
 8009c84:	4639      	mov	r1, r7
 8009c86:	2200      	movs	r2, #0
 8009c88:	4b8b      	ldr	r3, [pc, #556]	; (8009eb8 <_dtoa_r+0x600>)
 8009c8a:	4630      	mov	r0, r6
 8009c8c:	f7f6 fcd4 	bl	8000638 <__aeabi_dmul>
 8009c90:	e9cd 0100 	strd	r0, r1, [sp]
 8009c94:	9f02      	ldr	r7, [sp, #8]
 8009c96:	3501      	adds	r5, #1
 8009c98:	4628      	mov	r0, r5
 8009c9a:	f7f6 fc63 	bl	8000564 <__aeabi_i2d>
 8009c9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ca2:	f7f6 fcc9 	bl	8000638 <__aeabi_dmul>
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	4b84      	ldr	r3, [pc, #528]	; (8009ebc <_dtoa_r+0x604>)
 8009caa:	f7f6 fb0f 	bl	80002cc <__adddf3>
 8009cae:	4605      	mov	r5, r0
 8009cb0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009cb4:	2f00      	cmp	r7, #0
 8009cb6:	d15d      	bne.n	8009d74 <_dtoa_r+0x4bc>
 8009cb8:	2200      	movs	r2, #0
 8009cba:	4b81      	ldr	r3, [pc, #516]	; (8009ec0 <_dtoa_r+0x608>)
 8009cbc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009cc0:	f7f6 fb02 	bl	80002c8 <__aeabi_dsub>
 8009cc4:	462a      	mov	r2, r5
 8009cc6:	4633      	mov	r3, r6
 8009cc8:	e9cd 0100 	strd	r0, r1, [sp]
 8009ccc:	f7f6 ff44 	bl	8000b58 <__aeabi_dcmpgt>
 8009cd0:	2800      	cmp	r0, #0
 8009cd2:	f040 8288 	bne.w	800a1e6 <_dtoa_r+0x92e>
 8009cd6:	462a      	mov	r2, r5
 8009cd8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009cdc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009ce0:	f7f6 ff1c 	bl	8000b1c <__aeabi_dcmplt>
 8009ce4:	2800      	cmp	r0, #0
 8009ce6:	f040 827c 	bne.w	800a1e2 <_dtoa_r+0x92a>
 8009cea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009cee:	e9cd 2300 	strd	r2, r3, [sp]
 8009cf2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	f2c0 8150 	blt.w	8009f9a <_dtoa_r+0x6e2>
 8009cfa:	f1ba 0f0e 	cmp.w	sl, #14
 8009cfe:	f300 814c 	bgt.w	8009f9a <_dtoa_r+0x6e2>
 8009d02:	4b6a      	ldr	r3, [pc, #424]	; (8009eac <_dtoa_r+0x5f4>)
 8009d04:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009d08:	ed93 7b00 	vldr	d7, [r3]
 8009d0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009d14:	f280 80d8 	bge.w	8009ec8 <_dtoa_r+0x610>
 8009d18:	f1b9 0f00 	cmp.w	r9, #0
 8009d1c:	f300 80d4 	bgt.w	8009ec8 <_dtoa_r+0x610>
 8009d20:	f040 825e 	bne.w	800a1e0 <_dtoa_r+0x928>
 8009d24:	2200      	movs	r2, #0
 8009d26:	4b66      	ldr	r3, [pc, #408]	; (8009ec0 <_dtoa_r+0x608>)
 8009d28:	ec51 0b17 	vmov	r0, r1, d7
 8009d2c:	f7f6 fc84 	bl	8000638 <__aeabi_dmul>
 8009d30:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d34:	f7f6 ff06 	bl	8000b44 <__aeabi_dcmpge>
 8009d38:	464f      	mov	r7, r9
 8009d3a:	464e      	mov	r6, r9
 8009d3c:	2800      	cmp	r0, #0
 8009d3e:	f040 8234 	bne.w	800a1aa <_dtoa_r+0x8f2>
 8009d42:	2331      	movs	r3, #49	; 0x31
 8009d44:	f10b 0501 	add.w	r5, fp, #1
 8009d48:	f88b 3000 	strb.w	r3, [fp]
 8009d4c:	f10a 0a01 	add.w	sl, sl, #1
 8009d50:	e22f      	b.n	800a1b2 <_dtoa_r+0x8fa>
 8009d52:	07f2      	lsls	r2, r6, #31
 8009d54:	d505      	bpl.n	8009d62 <_dtoa_r+0x4aa>
 8009d56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d5a:	f7f6 fc6d 	bl	8000638 <__aeabi_dmul>
 8009d5e:	3501      	adds	r5, #1
 8009d60:	2301      	movs	r3, #1
 8009d62:	1076      	asrs	r6, r6, #1
 8009d64:	3708      	adds	r7, #8
 8009d66:	e772      	b.n	8009c4e <_dtoa_r+0x396>
 8009d68:	2502      	movs	r5, #2
 8009d6a:	e774      	b.n	8009c56 <_dtoa_r+0x39e>
 8009d6c:	f8cd a020 	str.w	sl, [sp, #32]
 8009d70:	464f      	mov	r7, r9
 8009d72:	e791      	b.n	8009c98 <_dtoa_r+0x3e0>
 8009d74:	4b4d      	ldr	r3, [pc, #308]	; (8009eac <_dtoa_r+0x5f4>)
 8009d76:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009d7a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8009d7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d047      	beq.n	8009e14 <_dtoa_r+0x55c>
 8009d84:	4602      	mov	r2, r0
 8009d86:	460b      	mov	r3, r1
 8009d88:	2000      	movs	r0, #0
 8009d8a:	494e      	ldr	r1, [pc, #312]	; (8009ec4 <_dtoa_r+0x60c>)
 8009d8c:	f7f6 fd7e 	bl	800088c <__aeabi_ddiv>
 8009d90:	462a      	mov	r2, r5
 8009d92:	4633      	mov	r3, r6
 8009d94:	f7f6 fa98 	bl	80002c8 <__aeabi_dsub>
 8009d98:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009d9c:	465d      	mov	r5, fp
 8009d9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009da2:	f7f6 fef9 	bl	8000b98 <__aeabi_d2iz>
 8009da6:	4606      	mov	r6, r0
 8009da8:	f7f6 fbdc 	bl	8000564 <__aeabi_i2d>
 8009dac:	4602      	mov	r2, r0
 8009dae:	460b      	mov	r3, r1
 8009db0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009db4:	f7f6 fa88 	bl	80002c8 <__aeabi_dsub>
 8009db8:	3630      	adds	r6, #48	; 0x30
 8009dba:	f805 6b01 	strb.w	r6, [r5], #1
 8009dbe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009dc2:	e9cd 0100 	strd	r0, r1, [sp]
 8009dc6:	f7f6 fea9 	bl	8000b1c <__aeabi_dcmplt>
 8009dca:	2800      	cmp	r0, #0
 8009dcc:	d163      	bne.n	8009e96 <_dtoa_r+0x5de>
 8009dce:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009dd2:	2000      	movs	r0, #0
 8009dd4:	4937      	ldr	r1, [pc, #220]	; (8009eb4 <_dtoa_r+0x5fc>)
 8009dd6:	f7f6 fa77 	bl	80002c8 <__aeabi_dsub>
 8009dda:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009dde:	f7f6 fe9d 	bl	8000b1c <__aeabi_dcmplt>
 8009de2:	2800      	cmp	r0, #0
 8009de4:	f040 80b7 	bne.w	8009f56 <_dtoa_r+0x69e>
 8009de8:	eba5 030b 	sub.w	r3, r5, fp
 8009dec:	429f      	cmp	r7, r3
 8009dee:	f77f af7c 	ble.w	8009cea <_dtoa_r+0x432>
 8009df2:	2200      	movs	r2, #0
 8009df4:	4b30      	ldr	r3, [pc, #192]	; (8009eb8 <_dtoa_r+0x600>)
 8009df6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009dfa:	f7f6 fc1d 	bl	8000638 <__aeabi_dmul>
 8009dfe:	2200      	movs	r2, #0
 8009e00:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009e04:	4b2c      	ldr	r3, [pc, #176]	; (8009eb8 <_dtoa_r+0x600>)
 8009e06:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e0a:	f7f6 fc15 	bl	8000638 <__aeabi_dmul>
 8009e0e:	e9cd 0100 	strd	r0, r1, [sp]
 8009e12:	e7c4      	b.n	8009d9e <_dtoa_r+0x4e6>
 8009e14:	462a      	mov	r2, r5
 8009e16:	4633      	mov	r3, r6
 8009e18:	f7f6 fc0e 	bl	8000638 <__aeabi_dmul>
 8009e1c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009e20:	eb0b 0507 	add.w	r5, fp, r7
 8009e24:	465e      	mov	r6, fp
 8009e26:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e2a:	f7f6 feb5 	bl	8000b98 <__aeabi_d2iz>
 8009e2e:	4607      	mov	r7, r0
 8009e30:	f7f6 fb98 	bl	8000564 <__aeabi_i2d>
 8009e34:	3730      	adds	r7, #48	; 0x30
 8009e36:	4602      	mov	r2, r0
 8009e38:	460b      	mov	r3, r1
 8009e3a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e3e:	f7f6 fa43 	bl	80002c8 <__aeabi_dsub>
 8009e42:	f806 7b01 	strb.w	r7, [r6], #1
 8009e46:	42ae      	cmp	r6, r5
 8009e48:	e9cd 0100 	strd	r0, r1, [sp]
 8009e4c:	f04f 0200 	mov.w	r2, #0
 8009e50:	d126      	bne.n	8009ea0 <_dtoa_r+0x5e8>
 8009e52:	4b1c      	ldr	r3, [pc, #112]	; (8009ec4 <_dtoa_r+0x60c>)
 8009e54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009e58:	f7f6 fa38 	bl	80002cc <__adddf3>
 8009e5c:	4602      	mov	r2, r0
 8009e5e:	460b      	mov	r3, r1
 8009e60:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e64:	f7f6 fe78 	bl	8000b58 <__aeabi_dcmpgt>
 8009e68:	2800      	cmp	r0, #0
 8009e6a:	d174      	bne.n	8009f56 <_dtoa_r+0x69e>
 8009e6c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009e70:	2000      	movs	r0, #0
 8009e72:	4914      	ldr	r1, [pc, #80]	; (8009ec4 <_dtoa_r+0x60c>)
 8009e74:	f7f6 fa28 	bl	80002c8 <__aeabi_dsub>
 8009e78:	4602      	mov	r2, r0
 8009e7a:	460b      	mov	r3, r1
 8009e7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e80:	f7f6 fe4c 	bl	8000b1c <__aeabi_dcmplt>
 8009e84:	2800      	cmp	r0, #0
 8009e86:	f43f af30 	beq.w	8009cea <_dtoa_r+0x432>
 8009e8a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009e8e:	2b30      	cmp	r3, #48	; 0x30
 8009e90:	f105 32ff 	add.w	r2, r5, #4294967295
 8009e94:	d002      	beq.n	8009e9c <_dtoa_r+0x5e4>
 8009e96:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009e9a:	e04a      	b.n	8009f32 <_dtoa_r+0x67a>
 8009e9c:	4615      	mov	r5, r2
 8009e9e:	e7f4      	b.n	8009e8a <_dtoa_r+0x5d2>
 8009ea0:	4b05      	ldr	r3, [pc, #20]	; (8009eb8 <_dtoa_r+0x600>)
 8009ea2:	f7f6 fbc9 	bl	8000638 <__aeabi_dmul>
 8009ea6:	e9cd 0100 	strd	r0, r1, [sp]
 8009eaa:	e7bc      	b.n	8009e26 <_dtoa_r+0x56e>
 8009eac:	0800b908 	.word	0x0800b908
 8009eb0:	0800b8e0 	.word	0x0800b8e0
 8009eb4:	3ff00000 	.word	0x3ff00000
 8009eb8:	40240000 	.word	0x40240000
 8009ebc:	401c0000 	.word	0x401c0000
 8009ec0:	40140000 	.word	0x40140000
 8009ec4:	3fe00000 	.word	0x3fe00000
 8009ec8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009ecc:	465d      	mov	r5, fp
 8009ece:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ed2:	4630      	mov	r0, r6
 8009ed4:	4639      	mov	r1, r7
 8009ed6:	f7f6 fcd9 	bl	800088c <__aeabi_ddiv>
 8009eda:	f7f6 fe5d 	bl	8000b98 <__aeabi_d2iz>
 8009ede:	4680      	mov	r8, r0
 8009ee0:	f7f6 fb40 	bl	8000564 <__aeabi_i2d>
 8009ee4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ee8:	f7f6 fba6 	bl	8000638 <__aeabi_dmul>
 8009eec:	4602      	mov	r2, r0
 8009eee:	460b      	mov	r3, r1
 8009ef0:	4630      	mov	r0, r6
 8009ef2:	4639      	mov	r1, r7
 8009ef4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8009ef8:	f7f6 f9e6 	bl	80002c8 <__aeabi_dsub>
 8009efc:	f805 6b01 	strb.w	r6, [r5], #1
 8009f00:	eba5 060b 	sub.w	r6, r5, fp
 8009f04:	45b1      	cmp	r9, r6
 8009f06:	4602      	mov	r2, r0
 8009f08:	460b      	mov	r3, r1
 8009f0a:	d139      	bne.n	8009f80 <_dtoa_r+0x6c8>
 8009f0c:	f7f6 f9de 	bl	80002cc <__adddf3>
 8009f10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f14:	4606      	mov	r6, r0
 8009f16:	460f      	mov	r7, r1
 8009f18:	f7f6 fe1e 	bl	8000b58 <__aeabi_dcmpgt>
 8009f1c:	b9c8      	cbnz	r0, 8009f52 <_dtoa_r+0x69a>
 8009f1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f22:	4630      	mov	r0, r6
 8009f24:	4639      	mov	r1, r7
 8009f26:	f7f6 fdef 	bl	8000b08 <__aeabi_dcmpeq>
 8009f2a:	b110      	cbz	r0, 8009f32 <_dtoa_r+0x67a>
 8009f2c:	f018 0f01 	tst.w	r8, #1
 8009f30:	d10f      	bne.n	8009f52 <_dtoa_r+0x69a>
 8009f32:	9904      	ldr	r1, [sp, #16]
 8009f34:	4620      	mov	r0, r4
 8009f36:	f000 fe0a 	bl	800ab4e <_Bfree>
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009f3e:	702b      	strb	r3, [r5, #0]
 8009f40:	f10a 0301 	add.w	r3, sl, #1
 8009f44:	6013      	str	r3, [r2, #0]
 8009f46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	f000 8241 	beq.w	800a3d0 <_dtoa_r+0xb18>
 8009f4e:	601d      	str	r5, [r3, #0]
 8009f50:	e23e      	b.n	800a3d0 <_dtoa_r+0xb18>
 8009f52:	f8cd a020 	str.w	sl, [sp, #32]
 8009f56:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009f5a:	2a39      	cmp	r2, #57	; 0x39
 8009f5c:	f105 33ff 	add.w	r3, r5, #4294967295
 8009f60:	d108      	bne.n	8009f74 <_dtoa_r+0x6bc>
 8009f62:	459b      	cmp	fp, r3
 8009f64:	d10a      	bne.n	8009f7c <_dtoa_r+0x6c4>
 8009f66:	9b08      	ldr	r3, [sp, #32]
 8009f68:	3301      	adds	r3, #1
 8009f6a:	9308      	str	r3, [sp, #32]
 8009f6c:	2330      	movs	r3, #48	; 0x30
 8009f6e:	f88b 3000 	strb.w	r3, [fp]
 8009f72:	465b      	mov	r3, fp
 8009f74:	781a      	ldrb	r2, [r3, #0]
 8009f76:	3201      	adds	r2, #1
 8009f78:	701a      	strb	r2, [r3, #0]
 8009f7a:	e78c      	b.n	8009e96 <_dtoa_r+0x5de>
 8009f7c:	461d      	mov	r5, r3
 8009f7e:	e7ea      	b.n	8009f56 <_dtoa_r+0x69e>
 8009f80:	2200      	movs	r2, #0
 8009f82:	4b9b      	ldr	r3, [pc, #620]	; (800a1f0 <_dtoa_r+0x938>)
 8009f84:	f7f6 fb58 	bl	8000638 <__aeabi_dmul>
 8009f88:	2200      	movs	r2, #0
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	4606      	mov	r6, r0
 8009f8e:	460f      	mov	r7, r1
 8009f90:	f7f6 fdba 	bl	8000b08 <__aeabi_dcmpeq>
 8009f94:	2800      	cmp	r0, #0
 8009f96:	d09a      	beq.n	8009ece <_dtoa_r+0x616>
 8009f98:	e7cb      	b.n	8009f32 <_dtoa_r+0x67a>
 8009f9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f9c:	2a00      	cmp	r2, #0
 8009f9e:	f000 808b 	beq.w	800a0b8 <_dtoa_r+0x800>
 8009fa2:	9a06      	ldr	r2, [sp, #24]
 8009fa4:	2a01      	cmp	r2, #1
 8009fa6:	dc6e      	bgt.n	800a086 <_dtoa_r+0x7ce>
 8009fa8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009faa:	2a00      	cmp	r2, #0
 8009fac:	d067      	beq.n	800a07e <_dtoa_r+0x7c6>
 8009fae:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009fb2:	9f07      	ldr	r7, [sp, #28]
 8009fb4:	9d05      	ldr	r5, [sp, #20]
 8009fb6:	9a05      	ldr	r2, [sp, #20]
 8009fb8:	2101      	movs	r1, #1
 8009fba:	441a      	add	r2, r3
 8009fbc:	4620      	mov	r0, r4
 8009fbe:	9205      	str	r2, [sp, #20]
 8009fc0:	4498      	add	r8, r3
 8009fc2:	f000 fea2 	bl	800ad0a <__i2b>
 8009fc6:	4606      	mov	r6, r0
 8009fc8:	2d00      	cmp	r5, #0
 8009fca:	dd0c      	ble.n	8009fe6 <_dtoa_r+0x72e>
 8009fcc:	f1b8 0f00 	cmp.w	r8, #0
 8009fd0:	dd09      	ble.n	8009fe6 <_dtoa_r+0x72e>
 8009fd2:	4545      	cmp	r5, r8
 8009fd4:	9a05      	ldr	r2, [sp, #20]
 8009fd6:	462b      	mov	r3, r5
 8009fd8:	bfa8      	it	ge
 8009fda:	4643      	movge	r3, r8
 8009fdc:	1ad2      	subs	r2, r2, r3
 8009fde:	9205      	str	r2, [sp, #20]
 8009fe0:	1aed      	subs	r5, r5, r3
 8009fe2:	eba8 0803 	sub.w	r8, r8, r3
 8009fe6:	9b07      	ldr	r3, [sp, #28]
 8009fe8:	b1eb      	cbz	r3, 800a026 <_dtoa_r+0x76e>
 8009fea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d067      	beq.n	800a0c0 <_dtoa_r+0x808>
 8009ff0:	b18f      	cbz	r7, 800a016 <_dtoa_r+0x75e>
 8009ff2:	4631      	mov	r1, r6
 8009ff4:	463a      	mov	r2, r7
 8009ff6:	4620      	mov	r0, r4
 8009ff8:	f000 ff26 	bl	800ae48 <__pow5mult>
 8009ffc:	9a04      	ldr	r2, [sp, #16]
 8009ffe:	4601      	mov	r1, r0
 800a000:	4606      	mov	r6, r0
 800a002:	4620      	mov	r0, r4
 800a004:	f000 fe8a 	bl	800ad1c <__multiply>
 800a008:	9904      	ldr	r1, [sp, #16]
 800a00a:	9008      	str	r0, [sp, #32]
 800a00c:	4620      	mov	r0, r4
 800a00e:	f000 fd9e 	bl	800ab4e <_Bfree>
 800a012:	9b08      	ldr	r3, [sp, #32]
 800a014:	9304      	str	r3, [sp, #16]
 800a016:	9b07      	ldr	r3, [sp, #28]
 800a018:	1bda      	subs	r2, r3, r7
 800a01a:	d004      	beq.n	800a026 <_dtoa_r+0x76e>
 800a01c:	9904      	ldr	r1, [sp, #16]
 800a01e:	4620      	mov	r0, r4
 800a020:	f000 ff12 	bl	800ae48 <__pow5mult>
 800a024:	9004      	str	r0, [sp, #16]
 800a026:	2101      	movs	r1, #1
 800a028:	4620      	mov	r0, r4
 800a02a:	f000 fe6e 	bl	800ad0a <__i2b>
 800a02e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a030:	4607      	mov	r7, r0
 800a032:	2b00      	cmp	r3, #0
 800a034:	f000 81d0 	beq.w	800a3d8 <_dtoa_r+0xb20>
 800a038:	461a      	mov	r2, r3
 800a03a:	4601      	mov	r1, r0
 800a03c:	4620      	mov	r0, r4
 800a03e:	f000 ff03 	bl	800ae48 <__pow5mult>
 800a042:	9b06      	ldr	r3, [sp, #24]
 800a044:	2b01      	cmp	r3, #1
 800a046:	4607      	mov	r7, r0
 800a048:	dc40      	bgt.n	800a0cc <_dtoa_r+0x814>
 800a04a:	9b00      	ldr	r3, [sp, #0]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d139      	bne.n	800a0c4 <_dtoa_r+0x80c>
 800a050:	9b01      	ldr	r3, [sp, #4]
 800a052:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a056:	2b00      	cmp	r3, #0
 800a058:	d136      	bne.n	800a0c8 <_dtoa_r+0x810>
 800a05a:	9b01      	ldr	r3, [sp, #4]
 800a05c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a060:	0d1b      	lsrs	r3, r3, #20
 800a062:	051b      	lsls	r3, r3, #20
 800a064:	b12b      	cbz	r3, 800a072 <_dtoa_r+0x7ba>
 800a066:	9b05      	ldr	r3, [sp, #20]
 800a068:	3301      	adds	r3, #1
 800a06a:	9305      	str	r3, [sp, #20]
 800a06c:	f108 0801 	add.w	r8, r8, #1
 800a070:	2301      	movs	r3, #1
 800a072:	9307      	str	r3, [sp, #28]
 800a074:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a076:	2b00      	cmp	r3, #0
 800a078:	d12a      	bne.n	800a0d0 <_dtoa_r+0x818>
 800a07a:	2001      	movs	r0, #1
 800a07c:	e030      	b.n	800a0e0 <_dtoa_r+0x828>
 800a07e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a080:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a084:	e795      	b.n	8009fb2 <_dtoa_r+0x6fa>
 800a086:	9b07      	ldr	r3, [sp, #28]
 800a088:	f109 37ff 	add.w	r7, r9, #4294967295
 800a08c:	42bb      	cmp	r3, r7
 800a08e:	bfbf      	itttt	lt
 800a090:	9b07      	ldrlt	r3, [sp, #28]
 800a092:	9707      	strlt	r7, [sp, #28]
 800a094:	1afa      	sublt	r2, r7, r3
 800a096:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a098:	bfbb      	ittet	lt
 800a09a:	189b      	addlt	r3, r3, r2
 800a09c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a09e:	1bdf      	subge	r7, r3, r7
 800a0a0:	2700      	movlt	r7, #0
 800a0a2:	f1b9 0f00 	cmp.w	r9, #0
 800a0a6:	bfb5      	itete	lt
 800a0a8:	9b05      	ldrlt	r3, [sp, #20]
 800a0aa:	9d05      	ldrge	r5, [sp, #20]
 800a0ac:	eba3 0509 	sublt.w	r5, r3, r9
 800a0b0:	464b      	movge	r3, r9
 800a0b2:	bfb8      	it	lt
 800a0b4:	2300      	movlt	r3, #0
 800a0b6:	e77e      	b.n	8009fb6 <_dtoa_r+0x6fe>
 800a0b8:	9f07      	ldr	r7, [sp, #28]
 800a0ba:	9d05      	ldr	r5, [sp, #20]
 800a0bc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800a0be:	e783      	b.n	8009fc8 <_dtoa_r+0x710>
 800a0c0:	9a07      	ldr	r2, [sp, #28]
 800a0c2:	e7ab      	b.n	800a01c <_dtoa_r+0x764>
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	e7d4      	b.n	800a072 <_dtoa_r+0x7ba>
 800a0c8:	9b00      	ldr	r3, [sp, #0]
 800a0ca:	e7d2      	b.n	800a072 <_dtoa_r+0x7ba>
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	9307      	str	r3, [sp, #28]
 800a0d0:	693b      	ldr	r3, [r7, #16]
 800a0d2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800a0d6:	6918      	ldr	r0, [r3, #16]
 800a0d8:	f000 fdc9 	bl	800ac6e <__hi0bits>
 800a0dc:	f1c0 0020 	rsb	r0, r0, #32
 800a0e0:	4440      	add	r0, r8
 800a0e2:	f010 001f 	ands.w	r0, r0, #31
 800a0e6:	d047      	beq.n	800a178 <_dtoa_r+0x8c0>
 800a0e8:	f1c0 0320 	rsb	r3, r0, #32
 800a0ec:	2b04      	cmp	r3, #4
 800a0ee:	dd3b      	ble.n	800a168 <_dtoa_r+0x8b0>
 800a0f0:	9b05      	ldr	r3, [sp, #20]
 800a0f2:	f1c0 001c 	rsb	r0, r0, #28
 800a0f6:	4403      	add	r3, r0
 800a0f8:	9305      	str	r3, [sp, #20]
 800a0fa:	4405      	add	r5, r0
 800a0fc:	4480      	add	r8, r0
 800a0fe:	9b05      	ldr	r3, [sp, #20]
 800a100:	2b00      	cmp	r3, #0
 800a102:	dd05      	ble.n	800a110 <_dtoa_r+0x858>
 800a104:	461a      	mov	r2, r3
 800a106:	9904      	ldr	r1, [sp, #16]
 800a108:	4620      	mov	r0, r4
 800a10a:	f000 feeb 	bl	800aee4 <__lshift>
 800a10e:	9004      	str	r0, [sp, #16]
 800a110:	f1b8 0f00 	cmp.w	r8, #0
 800a114:	dd05      	ble.n	800a122 <_dtoa_r+0x86a>
 800a116:	4639      	mov	r1, r7
 800a118:	4642      	mov	r2, r8
 800a11a:	4620      	mov	r0, r4
 800a11c:	f000 fee2 	bl	800aee4 <__lshift>
 800a120:	4607      	mov	r7, r0
 800a122:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a124:	b353      	cbz	r3, 800a17c <_dtoa_r+0x8c4>
 800a126:	4639      	mov	r1, r7
 800a128:	9804      	ldr	r0, [sp, #16]
 800a12a:	f000 ff2f 	bl	800af8c <__mcmp>
 800a12e:	2800      	cmp	r0, #0
 800a130:	da24      	bge.n	800a17c <_dtoa_r+0x8c4>
 800a132:	2300      	movs	r3, #0
 800a134:	220a      	movs	r2, #10
 800a136:	9904      	ldr	r1, [sp, #16]
 800a138:	4620      	mov	r0, r4
 800a13a:	f000 fd1f 	bl	800ab7c <__multadd>
 800a13e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a140:	9004      	str	r0, [sp, #16]
 800a142:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a146:	2b00      	cmp	r3, #0
 800a148:	f000 814d 	beq.w	800a3e6 <_dtoa_r+0xb2e>
 800a14c:	2300      	movs	r3, #0
 800a14e:	4631      	mov	r1, r6
 800a150:	220a      	movs	r2, #10
 800a152:	4620      	mov	r0, r4
 800a154:	f000 fd12 	bl	800ab7c <__multadd>
 800a158:	9b02      	ldr	r3, [sp, #8]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	4606      	mov	r6, r0
 800a15e:	dc4f      	bgt.n	800a200 <_dtoa_r+0x948>
 800a160:	9b06      	ldr	r3, [sp, #24]
 800a162:	2b02      	cmp	r3, #2
 800a164:	dd4c      	ble.n	800a200 <_dtoa_r+0x948>
 800a166:	e011      	b.n	800a18c <_dtoa_r+0x8d4>
 800a168:	d0c9      	beq.n	800a0fe <_dtoa_r+0x846>
 800a16a:	9a05      	ldr	r2, [sp, #20]
 800a16c:	331c      	adds	r3, #28
 800a16e:	441a      	add	r2, r3
 800a170:	9205      	str	r2, [sp, #20]
 800a172:	441d      	add	r5, r3
 800a174:	4498      	add	r8, r3
 800a176:	e7c2      	b.n	800a0fe <_dtoa_r+0x846>
 800a178:	4603      	mov	r3, r0
 800a17a:	e7f6      	b.n	800a16a <_dtoa_r+0x8b2>
 800a17c:	f1b9 0f00 	cmp.w	r9, #0
 800a180:	dc38      	bgt.n	800a1f4 <_dtoa_r+0x93c>
 800a182:	9b06      	ldr	r3, [sp, #24]
 800a184:	2b02      	cmp	r3, #2
 800a186:	dd35      	ble.n	800a1f4 <_dtoa_r+0x93c>
 800a188:	f8cd 9008 	str.w	r9, [sp, #8]
 800a18c:	9b02      	ldr	r3, [sp, #8]
 800a18e:	b963      	cbnz	r3, 800a1aa <_dtoa_r+0x8f2>
 800a190:	4639      	mov	r1, r7
 800a192:	2205      	movs	r2, #5
 800a194:	4620      	mov	r0, r4
 800a196:	f000 fcf1 	bl	800ab7c <__multadd>
 800a19a:	4601      	mov	r1, r0
 800a19c:	4607      	mov	r7, r0
 800a19e:	9804      	ldr	r0, [sp, #16]
 800a1a0:	f000 fef4 	bl	800af8c <__mcmp>
 800a1a4:	2800      	cmp	r0, #0
 800a1a6:	f73f adcc 	bgt.w	8009d42 <_dtoa_r+0x48a>
 800a1aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1ac:	465d      	mov	r5, fp
 800a1ae:	ea6f 0a03 	mvn.w	sl, r3
 800a1b2:	f04f 0900 	mov.w	r9, #0
 800a1b6:	4639      	mov	r1, r7
 800a1b8:	4620      	mov	r0, r4
 800a1ba:	f000 fcc8 	bl	800ab4e <_Bfree>
 800a1be:	2e00      	cmp	r6, #0
 800a1c0:	f43f aeb7 	beq.w	8009f32 <_dtoa_r+0x67a>
 800a1c4:	f1b9 0f00 	cmp.w	r9, #0
 800a1c8:	d005      	beq.n	800a1d6 <_dtoa_r+0x91e>
 800a1ca:	45b1      	cmp	r9, r6
 800a1cc:	d003      	beq.n	800a1d6 <_dtoa_r+0x91e>
 800a1ce:	4649      	mov	r1, r9
 800a1d0:	4620      	mov	r0, r4
 800a1d2:	f000 fcbc 	bl	800ab4e <_Bfree>
 800a1d6:	4631      	mov	r1, r6
 800a1d8:	4620      	mov	r0, r4
 800a1da:	f000 fcb8 	bl	800ab4e <_Bfree>
 800a1de:	e6a8      	b.n	8009f32 <_dtoa_r+0x67a>
 800a1e0:	2700      	movs	r7, #0
 800a1e2:	463e      	mov	r6, r7
 800a1e4:	e7e1      	b.n	800a1aa <_dtoa_r+0x8f2>
 800a1e6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a1ea:	463e      	mov	r6, r7
 800a1ec:	e5a9      	b.n	8009d42 <_dtoa_r+0x48a>
 800a1ee:	bf00      	nop
 800a1f0:	40240000 	.word	0x40240000
 800a1f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1f6:	f8cd 9008 	str.w	r9, [sp, #8]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	f000 80fa 	beq.w	800a3f4 <_dtoa_r+0xb3c>
 800a200:	2d00      	cmp	r5, #0
 800a202:	dd05      	ble.n	800a210 <_dtoa_r+0x958>
 800a204:	4631      	mov	r1, r6
 800a206:	462a      	mov	r2, r5
 800a208:	4620      	mov	r0, r4
 800a20a:	f000 fe6b 	bl	800aee4 <__lshift>
 800a20e:	4606      	mov	r6, r0
 800a210:	9b07      	ldr	r3, [sp, #28]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d04c      	beq.n	800a2b0 <_dtoa_r+0x9f8>
 800a216:	6871      	ldr	r1, [r6, #4]
 800a218:	4620      	mov	r0, r4
 800a21a:	f000 fc64 	bl	800aae6 <_Balloc>
 800a21e:	6932      	ldr	r2, [r6, #16]
 800a220:	3202      	adds	r2, #2
 800a222:	4605      	mov	r5, r0
 800a224:	0092      	lsls	r2, r2, #2
 800a226:	f106 010c 	add.w	r1, r6, #12
 800a22a:	300c      	adds	r0, #12
 800a22c:	f000 fc50 	bl	800aad0 <memcpy>
 800a230:	2201      	movs	r2, #1
 800a232:	4629      	mov	r1, r5
 800a234:	4620      	mov	r0, r4
 800a236:	f000 fe55 	bl	800aee4 <__lshift>
 800a23a:	9b00      	ldr	r3, [sp, #0]
 800a23c:	f8cd b014 	str.w	fp, [sp, #20]
 800a240:	f003 0301 	and.w	r3, r3, #1
 800a244:	46b1      	mov	r9, r6
 800a246:	9307      	str	r3, [sp, #28]
 800a248:	4606      	mov	r6, r0
 800a24a:	4639      	mov	r1, r7
 800a24c:	9804      	ldr	r0, [sp, #16]
 800a24e:	f7ff faa5 	bl	800979c <quorem>
 800a252:	4649      	mov	r1, r9
 800a254:	4605      	mov	r5, r0
 800a256:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a25a:	9804      	ldr	r0, [sp, #16]
 800a25c:	f000 fe96 	bl	800af8c <__mcmp>
 800a260:	4632      	mov	r2, r6
 800a262:	9000      	str	r0, [sp, #0]
 800a264:	4639      	mov	r1, r7
 800a266:	4620      	mov	r0, r4
 800a268:	f000 feaa 	bl	800afc0 <__mdiff>
 800a26c:	68c3      	ldr	r3, [r0, #12]
 800a26e:	4602      	mov	r2, r0
 800a270:	bb03      	cbnz	r3, 800a2b4 <_dtoa_r+0x9fc>
 800a272:	4601      	mov	r1, r0
 800a274:	9008      	str	r0, [sp, #32]
 800a276:	9804      	ldr	r0, [sp, #16]
 800a278:	f000 fe88 	bl	800af8c <__mcmp>
 800a27c:	9a08      	ldr	r2, [sp, #32]
 800a27e:	4603      	mov	r3, r0
 800a280:	4611      	mov	r1, r2
 800a282:	4620      	mov	r0, r4
 800a284:	9308      	str	r3, [sp, #32]
 800a286:	f000 fc62 	bl	800ab4e <_Bfree>
 800a28a:	9b08      	ldr	r3, [sp, #32]
 800a28c:	b9a3      	cbnz	r3, 800a2b8 <_dtoa_r+0xa00>
 800a28e:	9a06      	ldr	r2, [sp, #24]
 800a290:	b992      	cbnz	r2, 800a2b8 <_dtoa_r+0xa00>
 800a292:	9a07      	ldr	r2, [sp, #28]
 800a294:	b982      	cbnz	r2, 800a2b8 <_dtoa_r+0xa00>
 800a296:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a29a:	d029      	beq.n	800a2f0 <_dtoa_r+0xa38>
 800a29c:	9b00      	ldr	r3, [sp, #0]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	dd01      	ble.n	800a2a6 <_dtoa_r+0x9ee>
 800a2a2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800a2a6:	9b05      	ldr	r3, [sp, #20]
 800a2a8:	1c5d      	adds	r5, r3, #1
 800a2aa:	f883 8000 	strb.w	r8, [r3]
 800a2ae:	e782      	b.n	800a1b6 <_dtoa_r+0x8fe>
 800a2b0:	4630      	mov	r0, r6
 800a2b2:	e7c2      	b.n	800a23a <_dtoa_r+0x982>
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	e7e3      	b.n	800a280 <_dtoa_r+0x9c8>
 800a2b8:	9a00      	ldr	r2, [sp, #0]
 800a2ba:	2a00      	cmp	r2, #0
 800a2bc:	db04      	blt.n	800a2c8 <_dtoa_r+0xa10>
 800a2be:	d125      	bne.n	800a30c <_dtoa_r+0xa54>
 800a2c0:	9a06      	ldr	r2, [sp, #24]
 800a2c2:	bb1a      	cbnz	r2, 800a30c <_dtoa_r+0xa54>
 800a2c4:	9a07      	ldr	r2, [sp, #28]
 800a2c6:	bb0a      	cbnz	r2, 800a30c <_dtoa_r+0xa54>
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	ddec      	ble.n	800a2a6 <_dtoa_r+0x9ee>
 800a2cc:	2201      	movs	r2, #1
 800a2ce:	9904      	ldr	r1, [sp, #16]
 800a2d0:	4620      	mov	r0, r4
 800a2d2:	f000 fe07 	bl	800aee4 <__lshift>
 800a2d6:	4639      	mov	r1, r7
 800a2d8:	9004      	str	r0, [sp, #16]
 800a2da:	f000 fe57 	bl	800af8c <__mcmp>
 800a2de:	2800      	cmp	r0, #0
 800a2e0:	dc03      	bgt.n	800a2ea <_dtoa_r+0xa32>
 800a2e2:	d1e0      	bne.n	800a2a6 <_dtoa_r+0x9ee>
 800a2e4:	f018 0f01 	tst.w	r8, #1
 800a2e8:	d0dd      	beq.n	800a2a6 <_dtoa_r+0x9ee>
 800a2ea:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a2ee:	d1d8      	bne.n	800a2a2 <_dtoa_r+0x9ea>
 800a2f0:	9b05      	ldr	r3, [sp, #20]
 800a2f2:	9a05      	ldr	r2, [sp, #20]
 800a2f4:	1c5d      	adds	r5, r3, #1
 800a2f6:	2339      	movs	r3, #57	; 0x39
 800a2f8:	7013      	strb	r3, [r2, #0]
 800a2fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a2fe:	2b39      	cmp	r3, #57	; 0x39
 800a300:	f105 32ff 	add.w	r2, r5, #4294967295
 800a304:	d04f      	beq.n	800a3a6 <_dtoa_r+0xaee>
 800a306:	3301      	adds	r3, #1
 800a308:	7013      	strb	r3, [r2, #0]
 800a30a:	e754      	b.n	800a1b6 <_dtoa_r+0x8fe>
 800a30c:	9a05      	ldr	r2, [sp, #20]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	f102 0501 	add.w	r5, r2, #1
 800a314:	dd06      	ble.n	800a324 <_dtoa_r+0xa6c>
 800a316:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a31a:	d0e9      	beq.n	800a2f0 <_dtoa_r+0xa38>
 800a31c:	f108 0801 	add.w	r8, r8, #1
 800a320:	9b05      	ldr	r3, [sp, #20]
 800a322:	e7c2      	b.n	800a2aa <_dtoa_r+0x9f2>
 800a324:	9a02      	ldr	r2, [sp, #8]
 800a326:	f805 8c01 	strb.w	r8, [r5, #-1]
 800a32a:	eba5 030b 	sub.w	r3, r5, fp
 800a32e:	4293      	cmp	r3, r2
 800a330:	d021      	beq.n	800a376 <_dtoa_r+0xabe>
 800a332:	2300      	movs	r3, #0
 800a334:	220a      	movs	r2, #10
 800a336:	9904      	ldr	r1, [sp, #16]
 800a338:	4620      	mov	r0, r4
 800a33a:	f000 fc1f 	bl	800ab7c <__multadd>
 800a33e:	45b1      	cmp	r9, r6
 800a340:	9004      	str	r0, [sp, #16]
 800a342:	f04f 0300 	mov.w	r3, #0
 800a346:	f04f 020a 	mov.w	r2, #10
 800a34a:	4649      	mov	r1, r9
 800a34c:	4620      	mov	r0, r4
 800a34e:	d105      	bne.n	800a35c <_dtoa_r+0xaa4>
 800a350:	f000 fc14 	bl	800ab7c <__multadd>
 800a354:	4681      	mov	r9, r0
 800a356:	4606      	mov	r6, r0
 800a358:	9505      	str	r5, [sp, #20]
 800a35a:	e776      	b.n	800a24a <_dtoa_r+0x992>
 800a35c:	f000 fc0e 	bl	800ab7c <__multadd>
 800a360:	4631      	mov	r1, r6
 800a362:	4681      	mov	r9, r0
 800a364:	2300      	movs	r3, #0
 800a366:	220a      	movs	r2, #10
 800a368:	4620      	mov	r0, r4
 800a36a:	f000 fc07 	bl	800ab7c <__multadd>
 800a36e:	4606      	mov	r6, r0
 800a370:	e7f2      	b.n	800a358 <_dtoa_r+0xaa0>
 800a372:	f04f 0900 	mov.w	r9, #0
 800a376:	2201      	movs	r2, #1
 800a378:	9904      	ldr	r1, [sp, #16]
 800a37a:	4620      	mov	r0, r4
 800a37c:	f000 fdb2 	bl	800aee4 <__lshift>
 800a380:	4639      	mov	r1, r7
 800a382:	9004      	str	r0, [sp, #16]
 800a384:	f000 fe02 	bl	800af8c <__mcmp>
 800a388:	2800      	cmp	r0, #0
 800a38a:	dcb6      	bgt.n	800a2fa <_dtoa_r+0xa42>
 800a38c:	d102      	bne.n	800a394 <_dtoa_r+0xadc>
 800a38e:	f018 0f01 	tst.w	r8, #1
 800a392:	d1b2      	bne.n	800a2fa <_dtoa_r+0xa42>
 800a394:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a398:	2b30      	cmp	r3, #48	; 0x30
 800a39a:	f105 32ff 	add.w	r2, r5, #4294967295
 800a39e:	f47f af0a 	bne.w	800a1b6 <_dtoa_r+0x8fe>
 800a3a2:	4615      	mov	r5, r2
 800a3a4:	e7f6      	b.n	800a394 <_dtoa_r+0xadc>
 800a3a6:	4593      	cmp	fp, r2
 800a3a8:	d105      	bne.n	800a3b6 <_dtoa_r+0xafe>
 800a3aa:	2331      	movs	r3, #49	; 0x31
 800a3ac:	f10a 0a01 	add.w	sl, sl, #1
 800a3b0:	f88b 3000 	strb.w	r3, [fp]
 800a3b4:	e6ff      	b.n	800a1b6 <_dtoa_r+0x8fe>
 800a3b6:	4615      	mov	r5, r2
 800a3b8:	e79f      	b.n	800a2fa <_dtoa_r+0xa42>
 800a3ba:	f8df b064 	ldr.w	fp, [pc, #100]	; 800a420 <_dtoa_r+0xb68>
 800a3be:	e007      	b.n	800a3d0 <_dtoa_r+0xb18>
 800a3c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a3c2:	f8df b060 	ldr.w	fp, [pc, #96]	; 800a424 <_dtoa_r+0xb6c>
 800a3c6:	b11b      	cbz	r3, 800a3d0 <_dtoa_r+0xb18>
 800a3c8:	f10b 0308 	add.w	r3, fp, #8
 800a3cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a3ce:	6013      	str	r3, [r2, #0]
 800a3d0:	4658      	mov	r0, fp
 800a3d2:	b017      	add	sp, #92	; 0x5c
 800a3d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3d8:	9b06      	ldr	r3, [sp, #24]
 800a3da:	2b01      	cmp	r3, #1
 800a3dc:	f77f ae35 	ble.w	800a04a <_dtoa_r+0x792>
 800a3e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a3e2:	9307      	str	r3, [sp, #28]
 800a3e4:	e649      	b.n	800a07a <_dtoa_r+0x7c2>
 800a3e6:	9b02      	ldr	r3, [sp, #8]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	dc03      	bgt.n	800a3f4 <_dtoa_r+0xb3c>
 800a3ec:	9b06      	ldr	r3, [sp, #24]
 800a3ee:	2b02      	cmp	r3, #2
 800a3f0:	f73f aecc 	bgt.w	800a18c <_dtoa_r+0x8d4>
 800a3f4:	465d      	mov	r5, fp
 800a3f6:	4639      	mov	r1, r7
 800a3f8:	9804      	ldr	r0, [sp, #16]
 800a3fa:	f7ff f9cf 	bl	800979c <quorem>
 800a3fe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a402:	f805 8b01 	strb.w	r8, [r5], #1
 800a406:	9a02      	ldr	r2, [sp, #8]
 800a408:	eba5 030b 	sub.w	r3, r5, fp
 800a40c:	429a      	cmp	r2, r3
 800a40e:	ddb0      	ble.n	800a372 <_dtoa_r+0xaba>
 800a410:	2300      	movs	r3, #0
 800a412:	220a      	movs	r2, #10
 800a414:	9904      	ldr	r1, [sp, #16]
 800a416:	4620      	mov	r0, r4
 800a418:	f000 fbb0 	bl	800ab7c <__multadd>
 800a41c:	9004      	str	r0, [sp, #16]
 800a41e:	e7ea      	b.n	800a3f6 <_dtoa_r+0xb3e>
 800a420:	0800b84c 	.word	0x0800b84c
 800a424:	0800b8c8 	.word	0x0800b8c8

0800a428 <rshift>:
 800a428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a42a:	6906      	ldr	r6, [r0, #16]
 800a42c:	114b      	asrs	r3, r1, #5
 800a42e:	429e      	cmp	r6, r3
 800a430:	f100 0414 	add.w	r4, r0, #20
 800a434:	dd30      	ble.n	800a498 <rshift+0x70>
 800a436:	f011 011f 	ands.w	r1, r1, #31
 800a43a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800a43e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800a442:	d108      	bne.n	800a456 <rshift+0x2e>
 800a444:	4621      	mov	r1, r4
 800a446:	42b2      	cmp	r2, r6
 800a448:	460b      	mov	r3, r1
 800a44a:	d211      	bcs.n	800a470 <rshift+0x48>
 800a44c:	f852 3b04 	ldr.w	r3, [r2], #4
 800a450:	f841 3b04 	str.w	r3, [r1], #4
 800a454:	e7f7      	b.n	800a446 <rshift+0x1e>
 800a456:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800a45a:	f1c1 0c20 	rsb	ip, r1, #32
 800a45e:	40cd      	lsrs	r5, r1
 800a460:	3204      	adds	r2, #4
 800a462:	4623      	mov	r3, r4
 800a464:	42b2      	cmp	r2, r6
 800a466:	4617      	mov	r7, r2
 800a468:	d30c      	bcc.n	800a484 <rshift+0x5c>
 800a46a:	601d      	str	r5, [r3, #0]
 800a46c:	b105      	cbz	r5, 800a470 <rshift+0x48>
 800a46e:	3304      	adds	r3, #4
 800a470:	1b1a      	subs	r2, r3, r4
 800a472:	42a3      	cmp	r3, r4
 800a474:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a478:	bf08      	it	eq
 800a47a:	2300      	moveq	r3, #0
 800a47c:	6102      	str	r2, [r0, #16]
 800a47e:	bf08      	it	eq
 800a480:	6143      	streq	r3, [r0, #20]
 800a482:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a484:	683f      	ldr	r7, [r7, #0]
 800a486:	fa07 f70c 	lsl.w	r7, r7, ip
 800a48a:	433d      	orrs	r5, r7
 800a48c:	f843 5b04 	str.w	r5, [r3], #4
 800a490:	f852 5b04 	ldr.w	r5, [r2], #4
 800a494:	40cd      	lsrs	r5, r1
 800a496:	e7e5      	b.n	800a464 <rshift+0x3c>
 800a498:	4623      	mov	r3, r4
 800a49a:	e7e9      	b.n	800a470 <rshift+0x48>

0800a49c <__hexdig_fun>:
 800a49c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a4a0:	2b09      	cmp	r3, #9
 800a4a2:	d802      	bhi.n	800a4aa <__hexdig_fun+0xe>
 800a4a4:	3820      	subs	r0, #32
 800a4a6:	b2c0      	uxtb	r0, r0
 800a4a8:	4770      	bx	lr
 800a4aa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a4ae:	2b05      	cmp	r3, #5
 800a4b0:	d801      	bhi.n	800a4b6 <__hexdig_fun+0x1a>
 800a4b2:	3847      	subs	r0, #71	; 0x47
 800a4b4:	e7f7      	b.n	800a4a6 <__hexdig_fun+0xa>
 800a4b6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a4ba:	2b05      	cmp	r3, #5
 800a4bc:	d801      	bhi.n	800a4c2 <__hexdig_fun+0x26>
 800a4be:	3827      	subs	r0, #39	; 0x27
 800a4c0:	e7f1      	b.n	800a4a6 <__hexdig_fun+0xa>
 800a4c2:	2000      	movs	r0, #0
 800a4c4:	4770      	bx	lr

0800a4c6 <__gethex>:
 800a4c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4ca:	b08b      	sub	sp, #44	; 0x2c
 800a4cc:	468a      	mov	sl, r1
 800a4ce:	9002      	str	r0, [sp, #8]
 800a4d0:	9816      	ldr	r0, [sp, #88]	; 0x58
 800a4d2:	9306      	str	r3, [sp, #24]
 800a4d4:	4690      	mov	r8, r2
 800a4d6:	f000 fad0 	bl	800aa7a <__localeconv_l>
 800a4da:	6803      	ldr	r3, [r0, #0]
 800a4dc:	9303      	str	r3, [sp, #12]
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f7f5 fe96 	bl	8000210 <strlen>
 800a4e4:	9b03      	ldr	r3, [sp, #12]
 800a4e6:	9001      	str	r0, [sp, #4]
 800a4e8:	4403      	add	r3, r0
 800a4ea:	f04f 0b00 	mov.w	fp, #0
 800a4ee:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a4f2:	9307      	str	r3, [sp, #28]
 800a4f4:	f8da 3000 	ldr.w	r3, [sl]
 800a4f8:	3302      	adds	r3, #2
 800a4fa:	461f      	mov	r7, r3
 800a4fc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a500:	2830      	cmp	r0, #48	; 0x30
 800a502:	d06c      	beq.n	800a5de <__gethex+0x118>
 800a504:	f7ff ffca 	bl	800a49c <__hexdig_fun>
 800a508:	4604      	mov	r4, r0
 800a50a:	2800      	cmp	r0, #0
 800a50c:	d16a      	bne.n	800a5e4 <__gethex+0x11e>
 800a50e:	9a01      	ldr	r2, [sp, #4]
 800a510:	9903      	ldr	r1, [sp, #12]
 800a512:	4638      	mov	r0, r7
 800a514:	f001 f8fe 	bl	800b714 <strncmp>
 800a518:	2800      	cmp	r0, #0
 800a51a:	d166      	bne.n	800a5ea <__gethex+0x124>
 800a51c:	9b01      	ldr	r3, [sp, #4]
 800a51e:	5cf8      	ldrb	r0, [r7, r3]
 800a520:	18fe      	adds	r6, r7, r3
 800a522:	f7ff ffbb 	bl	800a49c <__hexdig_fun>
 800a526:	2800      	cmp	r0, #0
 800a528:	d062      	beq.n	800a5f0 <__gethex+0x12a>
 800a52a:	4633      	mov	r3, r6
 800a52c:	7818      	ldrb	r0, [r3, #0]
 800a52e:	2830      	cmp	r0, #48	; 0x30
 800a530:	461f      	mov	r7, r3
 800a532:	f103 0301 	add.w	r3, r3, #1
 800a536:	d0f9      	beq.n	800a52c <__gethex+0x66>
 800a538:	f7ff ffb0 	bl	800a49c <__hexdig_fun>
 800a53c:	fab0 f580 	clz	r5, r0
 800a540:	096d      	lsrs	r5, r5, #5
 800a542:	4634      	mov	r4, r6
 800a544:	f04f 0b01 	mov.w	fp, #1
 800a548:	463a      	mov	r2, r7
 800a54a:	4616      	mov	r6, r2
 800a54c:	3201      	adds	r2, #1
 800a54e:	7830      	ldrb	r0, [r6, #0]
 800a550:	f7ff ffa4 	bl	800a49c <__hexdig_fun>
 800a554:	2800      	cmp	r0, #0
 800a556:	d1f8      	bne.n	800a54a <__gethex+0x84>
 800a558:	9a01      	ldr	r2, [sp, #4]
 800a55a:	9903      	ldr	r1, [sp, #12]
 800a55c:	4630      	mov	r0, r6
 800a55e:	f001 f8d9 	bl	800b714 <strncmp>
 800a562:	b950      	cbnz	r0, 800a57a <__gethex+0xb4>
 800a564:	b954      	cbnz	r4, 800a57c <__gethex+0xb6>
 800a566:	9b01      	ldr	r3, [sp, #4]
 800a568:	18f4      	adds	r4, r6, r3
 800a56a:	4622      	mov	r2, r4
 800a56c:	4616      	mov	r6, r2
 800a56e:	3201      	adds	r2, #1
 800a570:	7830      	ldrb	r0, [r6, #0]
 800a572:	f7ff ff93 	bl	800a49c <__hexdig_fun>
 800a576:	2800      	cmp	r0, #0
 800a578:	d1f8      	bne.n	800a56c <__gethex+0xa6>
 800a57a:	b10c      	cbz	r4, 800a580 <__gethex+0xba>
 800a57c:	1ba4      	subs	r4, r4, r6
 800a57e:	00a4      	lsls	r4, r4, #2
 800a580:	7833      	ldrb	r3, [r6, #0]
 800a582:	2b50      	cmp	r3, #80	; 0x50
 800a584:	d001      	beq.n	800a58a <__gethex+0xc4>
 800a586:	2b70      	cmp	r3, #112	; 0x70
 800a588:	d140      	bne.n	800a60c <__gethex+0x146>
 800a58a:	7873      	ldrb	r3, [r6, #1]
 800a58c:	2b2b      	cmp	r3, #43	; 0x2b
 800a58e:	d031      	beq.n	800a5f4 <__gethex+0x12e>
 800a590:	2b2d      	cmp	r3, #45	; 0x2d
 800a592:	d033      	beq.n	800a5fc <__gethex+0x136>
 800a594:	1c71      	adds	r1, r6, #1
 800a596:	f04f 0900 	mov.w	r9, #0
 800a59a:	7808      	ldrb	r0, [r1, #0]
 800a59c:	f7ff ff7e 	bl	800a49c <__hexdig_fun>
 800a5a0:	1e43      	subs	r3, r0, #1
 800a5a2:	b2db      	uxtb	r3, r3
 800a5a4:	2b18      	cmp	r3, #24
 800a5a6:	d831      	bhi.n	800a60c <__gethex+0x146>
 800a5a8:	f1a0 0210 	sub.w	r2, r0, #16
 800a5ac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a5b0:	f7ff ff74 	bl	800a49c <__hexdig_fun>
 800a5b4:	1e43      	subs	r3, r0, #1
 800a5b6:	b2db      	uxtb	r3, r3
 800a5b8:	2b18      	cmp	r3, #24
 800a5ba:	d922      	bls.n	800a602 <__gethex+0x13c>
 800a5bc:	f1b9 0f00 	cmp.w	r9, #0
 800a5c0:	d000      	beq.n	800a5c4 <__gethex+0xfe>
 800a5c2:	4252      	negs	r2, r2
 800a5c4:	4414      	add	r4, r2
 800a5c6:	f8ca 1000 	str.w	r1, [sl]
 800a5ca:	b30d      	cbz	r5, 800a610 <__gethex+0x14a>
 800a5cc:	f1bb 0f00 	cmp.w	fp, #0
 800a5d0:	bf0c      	ite	eq
 800a5d2:	2706      	moveq	r7, #6
 800a5d4:	2700      	movne	r7, #0
 800a5d6:	4638      	mov	r0, r7
 800a5d8:	b00b      	add	sp, #44	; 0x2c
 800a5da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5de:	f10b 0b01 	add.w	fp, fp, #1
 800a5e2:	e78a      	b.n	800a4fa <__gethex+0x34>
 800a5e4:	2500      	movs	r5, #0
 800a5e6:	462c      	mov	r4, r5
 800a5e8:	e7ae      	b.n	800a548 <__gethex+0x82>
 800a5ea:	463e      	mov	r6, r7
 800a5ec:	2501      	movs	r5, #1
 800a5ee:	e7c7      	b.n	800a580 <__gethex+0xba>
 800a5f0:	4604      	mov	r4, r0
 800a5f2:	e7fb      	b.n	800a5ec <__gethex+0x126>
 800a5f4:	f04f 0900 	mov.w	r9, #0
 800a5f8:	1cb1      	adds	r1, r6, #2
 800a5fa:	e7ce      	b.n	800a59a <__gethex+0xd4>
 800a5fc:	f04f 0901 	mov.w	r9, #1
 800a600:	e7fa      	b.n	800a5f8 <__gethex+0x132>
 800a602:	230a      	movs	r3, #10
 800a604:	fb03 0202 	mla	r2, r3, r2, r0
 800a608:	3a10      	subs	r2, #16
 800a60a:	e7cf      	b.n	800a5ac <__gethex+0xe6>
 800a60c:	4631      	mov	r1, r6
 800a60e:	e7da      	b.n	800a5c6 <__gethex+0x100>
 800a610:	1bf3      	subs	r3, r6, r7
 800a612:	3b01      	subs	r3, #1
 800a614:	4629      	mov	r1, r5
 800a616:	2b07      	cmp	r3, #7
 800a618:	dc49      	bgt.n	800a6ae <__gethex+0x1e8>
 800a61a:	9802      	ldr	r0, [sp, #8]
 800a61c:	f000 fa63 	bl	800aae6 <_Balloc>
 800a620:	9b01      	ldr	r3, [sp, #4]
 800a622:	f100 0914 	add.w	r9, r0, #20
 800a626:	f04f 0b00 	mov.w	fp, #0
 800a62a:	f1c3 0301 	rsb	r3, r3, #1
 800a62e:	4605      	mov	r5, r0
 800a630:	f8cd 9010 	str.w	r9, [sp, #16]
 800a634:	46da      	mov	sl, fp
 800a636:	9308      	str	r3, [sp, #32]
 800a638:	42b7      	cmp	r7, r6
 800a63a:	d33b      	bcc.n	800a6b4 <__gethex+0x1ee>
 800a63c:	9804      	ldr	r0, [sp, #16]
 800a63e:	f840 ab04 	str.w	sl, [r0], #4
 800a642:	eba0 0009 	sub.w	r0, r0, r9
 800a646:	1080      	asrs	r0, r0, #2
 800a648:	6128      	str	r0, [r5, #16]
 800a64a:	0147      	lsls	r7, r0, #5
 800a64c:	4650      	mov	r0, sl
 800a64e:	f000 fb0e 	bl	800ac6e <__hi0bits>
 800a652:	f8d8 6000 	ldr.w	r6, [r8]
 800a656:	1a3f      	subs	r7, r7, r0
 800a658:	42b7      	cmp	r7, r6
 800a65a:	dd64      	ble.n	800a726 <__gethex+0x260>
 800a65c:	1bbf      	subs	r7, r7, r6
 800a65e:	4639      	mov	r1, r7
 800a660:	4628      	mov	r0, r5
 800a662:	f000 fe1d 	bl	800b2a0 <__any_on>
 800a666:	4682      	mov	sl, r0
 800a668:	b178      	cbz	r0, 800a68a <__gethex+0x1c4>
 800a66a:	1e7b      	subs	r3, r7, #1
 800a66c:	1159      	asrs	r1, r3, #5
 800a66e:	f003 021f 	and.w	r2, r3, #31
 800a672:	f04f 0a01 	mov.w	sl, #1
 800a676:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a67a:	fa0a f202 	lsl.w	r2, sl, r2
 800a67e:	420a      	tst	r2, r1
 800a680:	d003      	beq.n	800a68a <__gethex+0x1c4>
 800a682:	4553      	cmp	r3, sl
 800a684:	dc46      	bgt.n	800a714 <__gethex+0x24e>
 800a686:	f04f 0a02 	mov.w	sl, #2
 800a68a:	4639      	mov	r1, r7
 800a68c:	4628      	mov	r0, r5
 800a68e:	f7ff fecb 	bl	800a428 <rshift>
 800a692:	443c      	add	r4, r7
 800a694:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a698:	42a3      	cmp	r3, r4
 800a69a:	da52      	bge.n	800a742 <__gethex+0x27c>
 800a69c:	4629      	mov	r1, r5
 800a69e:	9802      	ldr	r0, [sp, #8]
 800a6a0:	f000 fa55 	bl	800ab4e <_Bfree>
 800a6a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	6013      	str	r3, [r2, #0]
 800a6aa:	27a3      	movs	r7, #163	; 0xa3
 800a6ac:	e793      	b.n	800a5d6 <__gethex+0x110>
 800a6ae:	3101      	adds	r1, #1
 800a6b0:	105b      	asrs	r3, r3, #1
 800a6b2:	e7b0      	b.n	800a616 <__gethex+0x150>
 800a6b4:	1e73      	subs	r3, r6, #1
 800a6b6:	9305      	str	r3, [sp, #20]
 800a6b8:	9a07      	ldr	r2, [sp, #28]
 800a6ba:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a6be:	4293      	cmp	r3, r2
 800a6c0:	d018      	beq.n	800a6f4 <__gethex+0x22e>
 800a6c2:	f1bb 0f20 	cmp.w	fp, #32
 800a6c6:	d107      	bne.n	800a6d8 <__gethex+0x212>
 800a6c8:	9b04      	ldr	r3, [sp, #16]
 800a6ca:	f8c3 a000 	str.w	sl, [r3]
 800a6ce:	3304      	adds	r3, #4
 800a6d0:	f04f 0a00 	mov.w	sl, #0
 800a6d4:	9304      	str	r3, [sp, #16]
 800a6d6:	46d3      	mov	fp, sl
 800a6d8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a6dc:	f7ff fede 	bl	800a49c <__hexdig_fun>
 800a6e0:	f000 000f 	and.w	r0, r0, #15
 800a6e4:	fa00 f00b 	lsl.w	r0, r0, fp
 800a6e8:	ea4a 0a00 	orr.w	sl, sl, r0
 800a6ec:	f10b 0b04 	add.w	fp, fp, #4
 800a6f0:	9b05      	ldr	r3, [sp, #20]
 800a6f2:	e00d      	b.n	800a710 <__gethex+0x24a>
 800a6f4:	9b05      	ldr	r3, [sp, #20]
 800a6f6:	9a08      	ldr	r2, [sp, #32]
 800a6f8:	4413      	add	r3, r2
 800a6fa:	42bb      	cmp	r3, r7
 800a6fc:	d3e1      	bcc.n	800a6c2 <__gethex+0x1fc>
 800a6fe:	4618      	mov	r0, r3
 800a700:	9a01      	ldr	r2, [sp, #4]
 800a702:	9903      	ldr	r1, [sp, #12]
 800a704:	9309      	str	r3, [sp, #36]	; 0x24
 800a706:	f001 f805 	bl	800b714 <strncmp>
 800a70a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a70c:	2800      	cmp	r0, #0
 800a70e:	d1d8      	bne.n	800a6c2 <__gethex+0x1fc>
 800a710:	461e      	mov	r6, r3
 800a712:	e791      	b.n	800a638 <__gethex+0x172>
 800a714:	1eb9      	subs	r1, r7, #2
 800a716:	4628      	mov	r0, r5
 800a718:	f000 fdc2 	bl	800b2a0 <__any_on>
 800a71c:	2800      	cmp	r0, #0
 800a71e:	d0b2      	beq.n	800a686 <__gethex+0x1c0>
 800a720:	f04f 0a03 	mov.w	sl, #3
 800a724:	e7b1      	b.n	800a68a <__gethex+0x1c4>
 800a726:	da09      	bge.n	800a73c <__gethex+0x276>
 800a728:	1bf7      	subs	r7, r6, r7
 800a72a:	4629      	mov	r1, r5
 800a72c:	463a      	mov	r2, r7
 800a72e:	9802      	ldr	r0, [sp, #8]
 800a730:	f000 fbd8 	bl	800aee4 <__lshift>
 800a734:	1be4      	subs	r4, r4, r7
 800a736:	4605      	mov	r5, r0
 800a738:	f100 0914 	add.w	r9, r0, #20
 800a73c:	f04f 0a00 	mov.w	sl, #0
 800a740:	e7a8      	b.n	800a694 <__gethex+0x1ce>
 800a742:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a746:	42a0      	cmp	r0, r4
 800a748:	dd6a      	ble.n	800a820 <__gethex+0x35a>
 800a74a:	1b04      	subs	r4, r0, r4
 800a74c:	42a6      	cmp	r6, r4
 800a74e:	dc2e      	bgt.n	800a7ae <__gethex+0x2e8>
 800a750:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a754:	2b02      	cmp	r3, #2
 800a756:	d022      	beq.n	800a79e <__gethex+0x2d8>
 800a758:	2b03      	cmp	r3, #3
 800a75a:	d024      	beq.n	800a7a6 <__gethex+0x2e0>
 800a75c:	2b01      	cmp	r3, #1
 800a75e:	d115      	bne.n	800a78c <__gethex+0x2c6>
 800a760:	42a6      	cmp	r6, r4
 800a762:	d113      	bne.n	800a78c <__gethex+0x2c6>
 800a764:	2e01      	cmp	r6, #1
 800a766:	dc0b      	bgt.n	800a780 <__gethex+0x2ba>
 800a768:	9a06      	ldr	r2, [sp, #24]
 800a76a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a76e:	6013      	str	r3, [r2, #0]
 800a770:	2301      	movs	r3, #1
 800a772:	612b      	str	r3, [r5, #16]
 800a774:	f8c9 3000 	str.w	r3, [r9]
 800a778:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a77a:	2762      	movs	r7, #98	; 0x62
 800a77c:	601d      	str	r5, [r3, #0]
 800a77e:	e72a      	b.n	800a5d6 <__gethex+0x110>
 800a780:	1e71      	subs	r1, r6, #1
 800a782:	4628      	mov	r0, r5
 800a784:	f000 fd8c 	bl	800b2a0 <__any_on>
 800a788:	2800      	cmp	r0, #0
 800a78a:	d1ed      	bne.n	800a768 <__gethex+0x2a2>
 800a78c:	4629      	mov	r1, r5
 800a78e:	9802      	ldr	r0, [sp, #8]
 800a790:	f000 f9dd 	bl	800ab4e <_Bfree>
 800a794:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a796:	2300      	movs	r3, #0
 800a798:	6013      	str	r3, [r2, #0]
 800a79a:	2750      	movs	r7, #80	; 0x50
 800a79c:	e71b      	b.n	800a5d6 <__gethex+0x110>
 800a79e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d0e1      	beq.n	800a768 <__gethex+0x2a2>
 800a7a4:	e7f2      	b.n	800a78c <__gethex+0x2c6>
 800a7a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d1dd      	bne.n	800a768 <__gethex+0x2a2>
 800a7ac:	e7ee      	b.n	800a78c <__gethex+0x2c6>
 800a7ae:	1e67      	subs	r7, r4, #1
 800a7b0:	f1ba 0f00 	cmp.w	sl, #0
 800a7b4:	d131      	bne.n	800a81a <__gethex+0x354>
 800a7b6:	b127      	cbz	r7, 800a7c2 <__gethex+0x2fc>
 800a7b8:	4639      	mov	r1, r7
 800a7ba:	4628      	mov	r0, r5
 800a7bc:	f000 fd70 	bl	800b2a0 <__any_on>
 800a7c0:	4682      	mov	sl, r0
 800a7c2:	117a      	asrs	r2, r7, #5
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	f007 071f 	and.w	r7, r7, #31
 800a7ca:	fa03 f707 	lsl.w	r7, r3, r7
 800a7ce:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800a7d2:	4621      	mov	r1, r4
 800a7d4:	421f      	tst	r7, r3
 800a7d6:	4628      	mov	r0, r5
 800a7d8:	bf18      	it	ne
 800a7da:	f04a 0a02 	orrne.w	sl, sl, #2
 800a7de:	1b36      	subs	r6, r6, r4
 800a7e0:	f7ff fe22 	bl	800a428 <rshift>
 800a7e4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800a7e8:	2702      	movs	r7, #2
 800a7ea:	f1ba 0f00 	cmp.w	sl, #0
 800a7ee:	d048      	beq.n	800a882 <__gethex+0x3bc>
 800a7f0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a7f4:	2b02      	cmp	r3, #2
 800a7f6:	d015      	beq.n	800a824 <__gethex+0x35e>
 800a7f8:	2b03      	cmp	r3, #3
 800a7fa:	d017      	beq.n	800a82c <__gethex+0x366>
 800a7fc:	2b01      	cmp	r3, #1
 800a7fe:	d109      	bne.n	800a814 <__gethex+0x34e>
 800a800:	f01a 0f02 	tst.w	sl, #2
 800a804:	d006      	beq.n	800a814 <__gethex+0x34e>
 800a806:	f8d9 3000 	ldr.w	r3, [r9]
 800a80a:	ea4a 0a03 	orr.w	sl, sl, r3
 800a80e:	f01a 0f01 	tst.w	sl, #1
 800a812:	d10e      	bne.n	800a832 <__gethex+0x36c>
 800a814:	f047 0710 	orr.w	r7, r7, #16
 800a818:	e033      	b.n	800a882 <__gethex+0x3bc>
 800a81a:	f04f 0a01 	mov.w	sl, #1
 800a81e:	e7d0      	b.n	800a7c2 <__gethex+0x2fc>
 800a820:	2701      	movs	r7, #1
 800a822:	e7e2      	b.n	800a7ea <__gethex+0x324>
 800a824:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a826:	f1c3 0301 	rsb	r3, r3, #1
 800a82a:	9315      	str	r3, [sp, #84]	; 0x54
 800a82c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d0f0      	beq.n	800a814 <__gethex+0x34e>
 800a832:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800a836:	f105 0314 	add.w	r3, r5, #20
 800a83a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800a83e:	eb03 010a 	add.w	r1, r3, sl
 800a842:	f04f 0c00 	mov.w	ip, #0
 800a846:	4618      	mov	r0, r3
 800a848:	f853 2b04 	ldr.w	r2, [r3], #4
 800a84c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a850:	d01c      	beq.n	800a88c <__gethex+0x3c6>
 800a852:	3201      	adds	r2, #1
 800a854:	6002      	str	r2, [r0, #0]
 800a856:	2f02      	cmp	r7, #2
 800a858:	f105 0314 	add.w	r3, r5, #20
 800a85c:	d138      	bne.n	800a8d0 <__gethex+0x40a>
 800a85e:	f8d8 2000 	ldr.w	r2, [r8]
 800a862:	3a01      	subs	r2, #1
 800a864:	42b2      	cmp	r2, r6
 800a866:	d10a      	bne.n	800a87e <__gethex+0x3b8>
 800a868:	1171      	asrs	r1, r6, #5
 800a86a:	2201      	movs	r2, #1
 800a86c:	f006 061f 	and.w	r6, r6, #31
 800a870:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a874:	fa02 f606 	lsl.w	r6, r2, r6
 800a878:	421e      	tst	r6, r3
 800a87a:	bf18      	it	ne
 800a87c:	4617      	movne	r7, r2
 800a87e:	f047 0720 	orr.w	r7, r7, #32
 800a882:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a884:	601d      	str	r5, [r3, #0]
 800a886:	9b06      	ldr	r3, [sp, #24]
 800a888:	601c      	str	r4, [r3, #0]
 800a88a:	e6a4      	b.n	800a5d6 <__gethex+0x110>
 800a88c:	4299      	cmp	r1, r3
 800a88e:	f843 cc04 	str.w	ip, [r3, #-4]
 800a892:	d8d8      	bhi.n	800a846 <__gethex+0x380>
 800a894:	68ab      	ldr	r3, [r5, #8]
 800a896:	4599      	cmp	r9, r3
 800a898:	db12      	blt.n	800a8c0 <__gethex+0x3fa>
 800a89a:	6869      	ldr	r1, [r5, #4]
 800a89c:	9802      	ldr	r0, [sp, #8]
 800a89e:	3101      	adds	r1, #1
 800a8a0:	f000 f921 	bl	800aae6 <_Balloc>
 800a8a4:	692a      	ldr	r2, [r5, #16]
 800a8a6:	3202      	adds	r2, #2
 800a8a8:	f105 010c 	add.w	r1, r5, #12
 800a8ac:	4683      	mov	fp, r0
 800a8ae:	0092      	lsls	r2, r2, #2
 800a8b0:	300c      	adds	r0, #12
 800a8b2:	f000 f90d 	bl	800aad0 <memcpy>
 800a8b6:	4629      	mov	r1, r5
 800a8b8:	9802      	ldr	r0, [sp, #8]
 800a8ba:	f000 f948 	bl	800ab4e <_Bfree>
 800a8be:	465d      	mov	r5, fp
 800a8c0:	692b      	ldr	r3, [r5, #16]
 800a8c2:	1c5a      	adds	r2, r3, #1
 800a8c4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800a8c8:	612a      	str	r2, [r5, #16]
 800a8ca:	2201      	movs	r2, #1
 800a8cc:	615a      	str	r2, [r3, #20]
 800a8ce:	e7c2      	b.n	800a856 <__gethex+0x390>
 800a8d0:	692a      	ldr	r2, [r5, #16]
 800a8d2:	454a      	cmp	r2, r9
 800a8d4:	dd0b      	ble.n	800a8ee <__gethex+0x428>
 800a8d6:	2101      	movs	r1, #1
 800a8d8:	4628      	mov	r0, r5
 800a8da:	f7ff fda5 	bl	800a428 <rshift>
 800a8de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a8e2:	3401      	adds	r4, #1
 800a8e4:	42a3      	cmp	r3, r4
 800a8e6:	f6ff aed9 	blt.w	800a69c <__gethex+0x1d6>
 800a8ea:	2701      	movs	r7, #1
 800a8ec:	e7c7      	b.n	800a87e <__gethex+0x3b8>
 800a8ee:	f016 061f 	ands.w	r6, r6, #31
 800a8f2:	d0fa      	beq.n	800a8ea <__gethex+0x424>
 800a8f4:	449a      	add	sl, r3
 800a8f6:	f1c6 0620 	rsb	r6, r6, #32
 800a8fa:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800a8fe:	f000 f9b6 	bl	800ac6e <__hi0bits>
 800a902:	42b0      	cmp	r0, r6
 800a904:	dbe7      	blt.n	800a8d6 <__gethex+0x410>
 800a906:	e7f0      	b.n	800a8ea <__gethex+0x424>

0800a908 <L_shift>:
 800a908:	f1c2 0208 	rsb	r2, r2, #8
 800a90c:	0092      	lsls	r2, r2, #2
 800a90e:	b570      	push	{r4, r5, r6, lr}
 800a910:	f1c2 0620 	rsb	r6, r2, #32
 800a914:	6843      	ldr	r3, [r0, #4]
 800a916:	6804      	ldr	r4, [r0, #0]
 800a918:	fa03 f506 	lsl.w	r5, r3, r6
 800a91c:	432c      	orrs	r4, r5
 800a91e:	40d3      	lsrs	r3, r2
 800a920:	6004      	str	r4, [r0, #0]
 800a922:	f840 3f04 	str.w	r3, [r0, #4]!
 800a926:	4288      	cmp	r0, r1
 800a928:	d3f4      	bcc.n	800a914 <L_shift+0xc>
 800a92a:	bd70      	pop	{r4, r5, r6, pc}

0800a92c <__match>:
 800a92c:	b530      	push	{r4, r5, lr}
 800a92e:	6803      	ldr	r3, [r0, #0]
 800a930:	3301      	adds	r3, #1
 800a932:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a936:	b914      	cbnz	r4, 800a93e <__match+0x12>
 800a938:	6003      	str	r3, [r0, #0]
 800a93a:	2001      	movs	r0, #1
 800a93c:	bd30      	pop	{r4, r5, pc}
 800a93e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a942:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a946:	2d19      	cmp	r5, #25
 800a948:	bf98      	it	ls
 800a94a:	3220      	addls	r2, #32
 800a94c:	42a2      	cmp	r2, r4
 800a94e:	d0f0      	beq.n	800a932 <__match+0x6>
 800a950:	2000      	movs	r0, #0
 800a952:	e7f3      	b.n	800a93c <__match+0x10>

0800a954 <__hexnan>:
 800a954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a958:	680b      	ldr	r3, [r1, #0]
 800a95a:	6801      	ldr	r1, [r0, #0]
 800a95c:	115f      	asrs	r7, r3, #5
 800a95e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800a962:	f013 031f 	ands.w	r3, r3, #31
 800a966:	b087      	sub	sp, #28
 800a968:	bf18      	it	ne
 800a96a:	3704      	addne	r7, #4
 800a96c:	2500      	movs	r5, #0
 800a96e:	1f3e      	subs	r6, r7, #4
 800a970:	4682      	mov	sl, r0
 800a972:	4690      	mov	r8, r2
 800a974:	9301      	str	r3, [sp, #4]
 800a976:	f847 5c04 	str.w	r5, [r7, #-4]
 800a97a:	46b1      	mov	r9, r6
 800a97c:	4634      	mov	r4, r6
 800a97e:	9502      	str	r5, [sp, #8]
 800a980:	46ab      	mov	fp, r5
 800a982:	784a      	ldrb	r2, [r1, #1]
 800a984:	1c4b      	adds	r3, r1, #1
 800a986:	9303      	str	r3, [sp, #12]
 800a988:	b342      	cbz	r2, 800a9dc <__hexnan+0x88>
 800a98a:	4610      	mov	r0, r2
 800a98c:	9105      	str	r1, [sp, #20]
 800a98e:	9204      	str	r2, [sp, #16]
 800a990:	f7ff fd84 	bl	800a49c <__hexdig_fun>
 800a994:	2800      	cmp	r0, #0
 800a996:	d143      	bne.n	800aa20 <__hexnan+0xcc>
 800a998:	9a04      	ldr	r2, [sp, #16]
 800a99a:	9905      	ldr	r1, [sp, #20]
 800a99c:	2a20      	cmp	r2, #32
 800a99e:	d818      	bhi.n	800a9d2 <__hexnan+0x7e>
 800a9a0:	9b02      	ldr	r3, [sp, #8]
 800a9a2:	459b      	cmp	fp, r3
 800a9a4:	dd13      	ble.n	800a9ce <__hexnan+0x7a>
 800a9a6:	454c      	cmp	r4, r9
 800a9a8:	d206      	bcs.n	800a9b8 <__hexnan+0x64>
 800a9aa:	2d07      	cmp	r5, #7
 800a9ac:	dc04      	bgt.n	800a9b8 <__hexnan+0x64>
 800a9ae:	462a      	mov	r2, r5
 800a9b0:	4649      	mov	r1, r9
 800a9b2:	4620      	mov	r0, r4
 800a9b4:	f7ff ffa8 	bl	800a908 <L_shift>
 800a9b8:	4544      	cmp	r4, r8
 800a9ba:	d944      	bls.n	800aa46 <__hexnan+0xf2>
 800a9bc:	2300      	movs	r3, #0
 800a9be:	f1a4 0904 	sub.w	r9, r4, #4
 800a9c2:	f844 3c04 	str.w	r3, [r4, #-4]
 800a9c6:	f8cd b008 	str.w	fp, [sp, #8]
 800a9ca:	464c      	mov	r4, r9
 800a9cc:	461d      	mov	r5, r3
 800a9ce:	9903      	ldr	r1, [sp, #12]
 800a9d0:	e7d7      	b.n	800a982 <__hexnan+0x2e>
 800a9d2:	2a29      	cmp	r2, #41	; 0x29
 800a9d4:	d14a      	bne.n	800aa6c <__hexnan+0x118>
 800a9d6:	3102      	adds	r1, #2
 800a9d8:	f8ca 1000 	str.w	r1, [sl]
 800a9dc:	f1bb 0f00 	cmp.w	fp, #0
 800a9e0:	d044      	beq.n	800aa6c <__hexnan+0x118>
 800a9e2:	454c      	cmp	r4, r9
 800a9e4:	d206      	bcs.n	800a9f4 <__hexnan+0xa0>
 800a9e6:	2d07      	cmp	r5, #7
 800a9e8:	dc04      	bgt.n	800a9f4 <__hexnan+0xa0>
 800a9ea:	462a      	mov	r2, r5
 800a9ec:	4649      	mov	r1, r9
 800a9ee:	4620      	mov	r0, r4
 800a9f0:	f7ff ff8a 	bl	800a908 <L_shift>
 800a9f4:	4544      	cmp	r4, r8
 800a9f6:	d928      	bls.n	800aa4a <__hexnan+0xf6>
 800a9f8:	4643      	mov	r3, r8
 800a9fa:	f854 2b04 	ldr.w	r2, [r4], #4
 800a9fe:	f843 2b04 	str.w	r2, [r3], #4
 800aa02:	42a6      	cmp	r6, r4
 800aa04:	d2f9      	bcs.n	800a9fa <__hexnan+0xa6>
 800aa06:	2200      	movs	r2, #0
 800aa08:	f843 2b04 	str.w	r2, [r3], #4
 800aa0c:	429e      	cmp	r6, r3
 800aa0e:	d2fb      	bcs.n	800aa08 <__hexnan+0xb4>
 800aa10:	6833      	ldr	r3, [r6, #0]
 800aa12:	b91b      	cbnz	r3, 800aa1c <__hexnan+0xc8>
 800aa14:	4546      	cmp	r6, r8
 800aa16:	d127      	bne.n	800aa68 <__hexnan+0x114>
 800aa18:	2301      	movs	r3, #1
 800aa1a:	6033      	str	r3, [r6, #0]
 800aa1c:	2005      	movs	r0, #5
 800aa1e:	e026      	b.n	800aa6e <__hexnan+0x11a>
 800aa20:	3501      	adds	r5, #1
 800aa22:	2d08      	cmp	r5, #8
 800aa24:	f10b 0b01 	add.w	fp, fp, #1
 800aa28:	dd06      	ble.n	800aa38 <__hexnan+0xe4>
 800aa2a:	4544      	cmp	r4, r8
 800aa2c:	d9cf      	bls.n	800a9ce <__hexnan+0x7a>
 800aa2e:	2300      	movs	r3, #0
 800aa30:	f844 3c04 	str.w	r3, [r4, #-4]
 800aa34:	2501      	movs	r5, #1
 800aa36:	3c04      	subs	r4, #4
 800aa38:	6822      	ldr	r2, [r4, #0]
 800aa3a:	f000 000f 	and.w	r0, r0, #15
 800aa3e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800aa42:	6020      	str	r0, [r4, #0]
 800aa44:	e7c3      	b.n	800a9ce <__hexnan+0x7a>
 800aa46:	2508      	movs	r5, #8
 800aa48:	e7c1      	b.n	800a9ce <__hexnan+0x7a>
 800aa4a:	9b01      	ldr	r3, [sp, #4]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d0df      	beq.n	800aa10 <__hexnan+0xbc>
 800aa50:	f04f 32ff 	mov.w	r2, #4294967295
 800aa54:	f1c3 0320 	rsb	r3, r3, #32
 800aa58:	fa22 f303 	lsr.w	r3, r2, r3
 800aa5c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800aa60:	401a      	ands	r2, r3
 800aa62:	f847 2c04 	str.w	r2, [r7, #-4]
 800aa66:	e7d3      	b.n	800aa10 <__hexnan+0xbc>
 800aa68:	3e04      	subs	r6, #4
 800aa6a:	e7d1      	b.n	800aa10 <__hexnan+0xbc>
 800aa6c:	2004      	movs	r0, #4
 800aa6e:	b007      	add	sp, #28
 800aa70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aa74 <__locale_ctype_ptr_l>:
 800aa74:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800aa78:	4770      	bx	lr

0800aa7a <__localeconv_l>:
 800aa7a:	30f0      	adds	r0, #240	; 0xf0
 800aa7c:	4770      	bx	lr
	...

0800aa80 <_localeconv_r>:
 800aa80:	4b04      	ldr	r3, [pc, #16]	; (800aa94 <_localeconv_r+0x14>)
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	6a18      	ldr	r0, [r3, #32]
 800aa86:	4b04      	ldr	r3, [pc, #16]	; (800aa98 <_localeconv_r+0x18>)
 800aa88:	2800      	cmp	r0, #0
 800aa8a:	bf08      	it	eq
 800aa8c:	4618      	moveq	r0, r3
 800aa8e:	30f0      	adds	r0, #240	; 0xf0
 800aa90:	4770      	bx	lr
 800aa92:	bf00      	nop
 800aa94:	2000000c 	.word	0x2000000c
 800aa98:	20000070 	.word	0x20000070

0800aa9c <malloc>:
 800aa9c:	4b02      	ldr	r3, [pc, #8]	; (800aaa8 <malloc+0xc>)
 800aa9e:	4601      	mov	r1, r0
 800aaa0:	6818      	ldr	r0, [r3, #0]
 800aaa2:	f000 bc7b 	b.w	800b39c <_malloc_r>
 800aaa6:	bf00      	nop
 800aaa8:	2000000c 	.word	0x2000000c

0800aaac <__ascii_mbtowc>:
 800aaac:	b082      	sub	sp, #8
 800aaae:	b901      	cbnz	r1, 800aab2 <__ascii_mbtowc+0x6>
 800aab0:	a901      	add	r1, sp, #4
 800aab2:	b142      	cbz	r2, 800aac6 <__ascii_mbtowc+0x1a>
 800aab4:	b14b      	cbz	r3, 800aaca <__ascii_mbtowc+0x1e>
 800aab6:	7813      	ldrb	r3, [r2, #0]
 800aab8:	600b      	str	r3, [r1, #0]
 800aaba:	7812      	ldrb	r2, [r2, #0]
 800aabc:	1c10      	adds	r0, r2, #0
 800aabe:	bf18      	it	ne
 800aac0:	2001      	movne	r0, #1
 800aac2:	b002      	add	sp, #8
 800aac4:	4770      	bx	lr
 800aac6:	4610      	mov	r0, r2
 800aac8:	e7fb      	b.n	800aac2 <__ascii_mbtowc+0x16>
 800aaca:	f06f 0001 	mvn.w	r0, #1
 800aace:	e7f8      	b.n	800aac2 <__ascii_mbtowc+0x16>

0800aad0 <memcpy>:
 800aad0:	b510      	push	{r4, lr}
 800aad2:	1e43      	subs	r3, r0, #1
 800aad4:	440a      	add	r2, r1
 800aad6:	4291      	cmp	r1, r2
 800aad8:	d100      	bne.n	800aadc <memcpy+0xc>
 800aada:	bd10      	pop	{r4, pc}
 800aadc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aae0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aae4:	e7f7      	b.n	800aad6 <memcpy+0x6>

0800aae6 <_Balloc>:
 800aae6:	b570      	push	{r4, r5, r6, lr}
 800aae8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800aaea:	4604      	mov	r4, r0
 800aaec:	460e      	mov	r6, r1
 800aaee:	b93d      	cbnz	r5, 800ab00 <_Balloc+0x1a>
 800aaf0:	2010      	movs	r0, #16
 800aaf2:	f7ff ffd3 	bl	800aa9c <malloc>
 800aaf6:	6260      	str	r0, [r4, #36]	; 0x24
 800aaf8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800aafc:	6005      	str	r5, [r0, #0]
 800aafe:	60c5      	str	r5, [r0, #12]
 800ab00:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800ab02:	68eb      	ldr	r3, [r5, #12]
 800ab04:	b183      	cbz	r3, 800ab28 <_Balloc+0x42>
 800ab06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab08:	68db      	ldr	r3, [r3, #12]
 800ab0a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800ab0e:	b9b8      	cbnz	r0, 800ab40 <_Balloc+0x5a>
 800ab10:	2101      	movs	r1, #1
 800ab12:	fa01 f506 	lsl.w	r5, r1, r6
 800ab16:	1d6a      	adds	r2, r5, #5
 800ab18:	0092      	lsls	r2, r2, #2
 800ab1a:	4620      	mov	r0, r4
 800ab1c:	f000 fbe1 	bl	800b2e2 <_calloc_r>
 800ab20:	b160      	cbz	r0, 800ab3c <_Balloc+0x56>
 800ab22:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800ab26:	e00e      	b.n	800ab46 <_Balloc+0x60>
 800ab28:	2221      	movs	r2, #33	; 0x21
 800ab2a:	2104      	movs	r1, #4
 800ab2c:	4620      	mov	r0, r4
 800ab2e:	f000 fbd8 	bl	800b2e2 <_calloc_r>
 800ab32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab34:	60e8      	str	r0, [r5, #12]
 800ab36:	68db      	ldr	r3, [r3, #12]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d1e4      	bne.n	800ab06 <_Balloc+0x20>
 800ab3c:	2000      	movs	r0, #0
 800ab3e:	bd70      	pop	{r4, r5, r6, pc}
 800ab40:	6802      	ldr	r2, [r0, #0]
 800ab42:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800ab46:	2300      	movs	r3, #0
 800ab48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ab4c:	e7f7      	b.n	800ab3e <_Balloc+0x58>

0800ab4e <_Bfree>:
 800ab4e:	b570      	push	{r4, r5, r6, lr}
 800ab50:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ab52:	4606      	mov	r6, r0
 800ab54:	460d      	mov	r5, r1
 800ab56:	b93c      	cbnz	r4, 800ab68 <_Bfree+0x1a>
 800ab58:	2010      	movs	r0, #16
 800ab5a:	f7ff ff9f 	bl	800aa9c <malloc>
 800ab5e:	6270      	str	r0, [r6, #36]	; 0x24
 800ab60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ab64:	6004      	str	r4, [r0, #0]
 800ab66:	60c4      	str	r4, [r0, #12]
 800ab68:	b13d      	cbz	r5, 800ab7a <_Bfree+0x2c>
 800ab6a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ab6c:	686a      	ldr	r2, [r5, #4]
 800ab6e:	68db      	ldr	r3, [r3, #12]
 800ab70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ab74:	6029      	str	r1, [r5, #0]
 800ab76:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800ab7a:	bd70      	pop	{r4, r5, r6, pc}

0800ab7c <__multadd>:
 800ab7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab80:	690d      	ldr	r5, [r1, #16]
 800ab82:	461f      	mov	r7, r3
 800ab84:	4606      	mov	r6, r0
 800ab86:	460c      	mov	r4, r1
 800ab88:	f101 0c14 	add.w	ip, r1, #20
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	f8dc 0000 	ldr.w	r0, [ip]
 800ab92:	b281      	uxth	r1, r0
 800ab94:	fb02 7101 	mla	r1, r2, r1, r7
 800ab98:	0c0f      	lsrs	r7, r1, #16
 800ab9a:	0c00      	lsrs	r0, r0, #16
 800ab9c:	fb02 7000 	mla	r0, r2, r0, r7
 800aba0:	b289      	uxth	r1, r1
 800aba2:	3301      	adds	r3, #1
 800aba4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800aba8:	429d      	cmp	r5, r3
 800abaa:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800abae:	f84c 1b04 	str.w	r1, [ip], #4
 800abb2:	dcec      	bgt.n	800ab8e <__multadd+0x12>
 800abb4:	b1d7      	cbz	r7, 800abec <__multadd+0x70>
 800abb6:	68a3      	ldr	r3, [r4, #8]
 800abb8:	42ab      	cmp	r3, r5
 800abba:	dc12      	bgt.n	800abe2 <__multadd+0x66>
 800abbc:	6861      	ldr	r1, [r4, #4]
 800abbe:	4630      	mov	r0, r6
 800abc0:	3101      	adds	r1, #1
 800abc2:	f7ff ff90 	bl	800aae6 <_Balloc>
 800abc6:	6922      	ldr	r2, [r4, #16]
 800abc8:	3202      	adds	r2, #2
 800abca:	f104 010c 	add.w	r1, r4, #12
 800abce:	4680      	mov	r8, r0
 800abd0:	0092      	lsls	r2, r2, #2
 800abd2:	300c      	adds	r0, #12
 800abd4:	f7ff ff7c 	bl	800aad0 <memcpy>
 800abd8:	4621      	mov	r1, r4
 800abda:	4630      	mov	r0, r6
 800abdc:	f7ff ffb7 	bl	800ab4e <_Bfree>
 800abe0:	4644      	mov	r4, r8
 800abe2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800abe6:	3501      	adds	r5, #1
 800abe8:	615f      	str	r7, [r3, #20]
 800abea:	6125      	str	r5, [r4, #16]
 800abec:	4620      	mov	r0, r4
 800abee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800abf2 <__s2b>:
 800abf2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abf6:	460c      	mov	r4, r1
 800abf8:	4615      	mov	r5, r2
 800abfa:	461f      	mov	r7, r3
 800abfc:	2209      	movs	r2, #9
 800abfe:	3308      	adds	r3, #8
 800ac00:	4606      	mov	r6, r0
 800ac02:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac06:	2100      	movs	r1, #0
 800ac08:	2201      	movs	r2, #1
 800ac0a:	429a      	cmp	r2, r3
 800ac0c:	db20      	blt.n	800ac50 <__s2b+0x5e>
 800ac0e:	4630      	mov	r0, r6
 800ac10:	f7ff ff69 	bl	800aae6 <_Balloc>
 800ac14:	9b08      	ldr	r3, [sp, #32]
 800ac16:	6143      	str	r3, [r0, #20]
 800ac18:	2d09      	cmp	r5, #9
 800ac1a:	f04f 0301 	mov.w	r3, #1
 800ac1e:	6103      	str	r3, [r0, #16]
 800ac20:	dd19      	ble.n	800ac56 <__s2b+0x64>
 800ac22:	f104 0809 	add.w	r8, r4, #9
 800ac26:	46c1      	mov	r9, r8
 800ac28:	442c      	add	r4, r5
 800ac2a:	f819 3b01 	ldrb.w	r3, [r9], #1
 800ac2e:	4601      	mov	r1, r0
 800ac30:	3b30      	subs	r3, #48	; 0x30
 800ac32:	220a      	movs	r2, #10
 800ac34:	4630      	mov	r0, r6
 800ac36:	f7ff ffa1 	bl	800ab7c <__multadd>
 800ac3a:	45a1      	cmp	r9, r4
 800ac3c:	d1f5      	bne.n	800ac2a <__s2b+0x38>
 800ac3e:	eb08 0405 	add.w	r4, r8, r5
 800ac42:	3c08      	subs	r4, #8
 800ac44:	1b2d      	subs	r5, r5, r4
 800ac46:	1963      	adds	r3, r4, r5
 800ac48:	42bb      	cmp	r3, r7
 800ac4a:	db07      	blt.n	800ac5c <__s2b+0x6a>
 800ac4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac50:	0052      	lsls	r2, r2, #1
 800ac52:	3101      	adds	r1, #1
 800ac54:	e7d9      	b.n	800ac0a <__s2b+0x18>
 800ac56:	340a      	adds	r4, #10
 800ac58:	2509      	movs	r5, #9
 800ac5a:	e7f3      	b.n	800ac44 <__s2b+0x52>
 800ac5c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ac60:	4601      	mov	r1, r0
 800ac62:	3b30      	subs	r3, #48	; 0x30
 800ac64:	220a      	movs	r2, #10
 800ac66:	4630      	mov	r0, r6
 800ac68:	f7ff ff88 	bl	800ab7c <__multadd>
 800ac6c:	e7eb      	b.n	800ac46 <__s2b+0x54>

0800ac6e <__hi0bits>:
 800ac6e:	0c02      	lsrs	r2, r0, #16
 800ac70:	0412      	lsls	r2, r2, #16
 800ac72:	4603      	mov	r3, r0
 800ac74:	b9b2      	cbnz	r2, 800aca4 <__hi0bits+0x36>
 800ac76:	0403      	lsls	r3, r0, #16
 800ac78:	2010      	movs	r0, #16
 800ac7a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ac7e:	bf04      	itt	eq
 800ac80:	021b      	lsleq	r3, r3, #8
 800ac82:	3008      	addeq	r0, #8
 800ac84:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ac88:	bf04      	itt	eq
 800ac8a:	011b      	lsleq	r3, r3, #4
 800ac8c:	3004      	addeq	r0, #4
 800ac8e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ac92:	bf04      	itt	eq
 800ac94:	009b      	lsleq	r3, r3, #2
 800ac96:	3002      	addeq	r0, #2
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	db06      	blt.n	800acaa <__hi0bits+0x3c>
 800ac9c:	005b      	lsls	r3, r3, #1
 800ac9e:	d503      	bpl.n	800aca8 <__hi0bits+0x3a>
 800aca0:	3001      	adds	r0, #1
 800aca2:	4770      	bx	lr
 800aca4:	2000      	movs	r0, #0
 800aca6:	e7e8      	b.n	800ac7a <__hi0bits+0xc>
 800aca8:	2020      	movs	r0, #32
 800acaa:	4770      	bx	lr

0800acac <__lo0bits>:
 800acac:	6803      	ldr	r3, [r0, #0]
 800acae:	f013 0207 	ands.w	r2, r3, #7
 800acb2:	4601      	mov	r1, r0
 800acb4:	d00b      	beq.n	800acce <__lo0bits+0x22>
 800acb6:	07da      	lsls	r2, r3, #31
 800acb8:	d423      	bmi.n	800ad02 <__lo0bits+0x56>
 800acba:	0798      	lsls	r0, r3, #30
 800acbc:	bf49      	itett	mi
 800acbe:	085b      	lsrmi	r3, r3, #1
 800acc0:	089b      	lsrpl	r3, r3, #2
 800acc2:	2001      	movmi	r0, #1
 800acc4:	600b      	strmi	r3, [r1, #0]
 800acc6:	bf5c      	itt	pl
 800acc8:	600b      	strpl	r3, [r1, #0]
 800acca:	2002      	movpl	r0, #2
 800accc:	4770      	bx	lr
 800acce:	b298      	uxth	r0, r3
 800acd0:	b9a8      	cbnz	r0, 800acfe <__lo0bits+0x52>
 800acd2:	0c1b      	lsrs	r3, r3, #16
 800acd4:	2010      	movs	r0, #16
 800acd6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800acda:	bf04      	itt	eq
 800acdc:	0a1b      	lsreq	r3, r3, #8
 800acde:	3008      	addeq	r0, #8
 800ace0:	071a      	lsls	r2, r3, #28
 800ace2:	bf04      	itt	eq
 800ace4:	091b      	lsreq	r3, r3, #4
 800ace6:	3004      	addeq	r0, #4
 800ace8:	079a      	lsls	r2, r3, #30
 800acea:	bf04      	itt	eq
 800acec:	089b      	lsreq	r3, r3, #2
 800acee:	3002      	addeq	r0, #2
 800acf0:	07da      	lsls	r2, r3, #31
 800acf2:	d402      	bmi.n	800acfa <__lo0bits+0x4e>
 800acf4:	085b      	lsrs	r3, r3, #1
 800acf6:	d006      	beq.n	800ad06 <__lo0bits+0x5a>
 800acf8:	3001      	adds	r0, #1
 800acfa:	600b      	str	r3, [r1, #0]
 800acfc:	4770      	bx	lr
 800acfe:	4610      	mov	r0, r2
 800ad00:	e7e9      	b.n	800acd6 <__lo0bits+0x2a>
 800ad02:	2000      	movs	r0, #0
 800ad04:	4770      	bx	lr
 800ad06:	2020      	movs	r0, #32
 800ad08:	4770      	bx	lr

0800ad0a <__i2b>:
 800ad0a:	b510      	push	{r4, lr}
 800ad0c:	460c      	mov	r4, r1
 800ad0e:	2101      	movs	r1, #1
 800ad10:	f7ff fee9 	bl	800aae6 <_Balloc>
 800ad14:	2201      	movs	r2, #1
 800ad16:	6144      	str	r4, [r0, #20]
 800ad18:	6102      	str	r2, [r0, #16]
 800ad1a:	bd10      	pop	{r4, pc}

0800ad1c <__multiply>:
 800ad1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad20:	4614      	mov	r4, r2
 800ad22:	690a      	ldr	r2, [r1, #16]
 800ad24:	6923      	ldr	r3, [r4, #16]
 800ad26:	429a      	cmp	r2, r3
 800ad28:	bfb8      	it	lt
 800ad2a:	460b      	movlt	r3, r1
 800ad2c:	4688      	mov	r8, r1
 800ad2e:	bfbc      	itt	lt
 800ad30:	46a0      	movlt	r8, r4
 800ad32:	461c      	movlt	r4, r3
 800ad34:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ad38:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ad3c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ad40:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ad44:	eb07 0609 	add.w	r6, r7, r9
 800ad48:	42b3      	cmp	r3, r6
 800ad4a:	bfb8      	it	lt
 800ad4c:	3101      	addlt	r1, #1
 800ad4e:	f7ff feca 	bl	800aae6 <_Balloc>
 800ad52:	f100 0514 	add.w	r5, r0, #20
 800ad56:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800ad5a:	462b      	mov	r3, r5
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	4573      	cmp	r3, lr
 800ad60:	d316      	bcc.n	800ad90 <__multiply+0x74>
 800ad62:	f104 0214 	add.w	r2, r4, #20
 800ad66:	f108 0114 	add.w	r1, r8, #20
 800ad6a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800ad6e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800ad72:	9300      	str	r3, [sp, #0]
 800ad74:	9b00      	ldr	r3, [sp, #0]
 800ad76:	9201      	str	r2, [sp, #4]
 800ad78:	4293      	cmp	r3, r2
 800ad7a:	d80c      	bhi.n	800ad96 <__multiply+0x7a>
 800ad7c:	2e00      	cmp	r6, #0
 800ad7e:	dd03      	ble.n	800ad88 <__multiply+0x6c>
 800ad80:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d05d      	beq.n	800ae44 <__multiply+0x128>
 800ad88:	6106      	str	r6, [r0, #16]
 800ad8a:	b003      	add	sp, #12
 800ad8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad90:	f843 2b04 	str.w	r2, [r3], #4
 800ad94:	e7e3      	b.n	800ad5e <__multiply+0x42>
 800ad96:	f8b2 b000 	ldrh.w	fp, [r2]
 800ad9a:	f1bb 0f00 	cmp.w	fp, #0
 800ad9e:	d023      	beq.n	800ade8 <__multiply+0xcc>
 800ada0:	4689      	mov	r9, r1
 800ada2:	46ac      	mov	ip, r5
 800ada4:	f04f 0800 	mov.w	r8, #0
 800ada8:	f859 4b04 	ldr.w	r4, [r9], #4
 800adac:	f8dc a000 	ldr.w	sl, [ip]
 800adb0:	b2a3      	uxth	r3, r4
 800adb2:	fa1f fa8a 	uxth.w	sl, sl
 800adb6:	fb0b a303 	mla	r3, fp, r3, sl
 800adba:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800adbe:	f8dc 4000 	ldr.w	r4, [ip]
 800adc2:	4443      	add	r3, r8
 800adc4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800adc8:	fb0b 840a 	mla	r4, fp, sl, r8
 800adcc:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800add0:	46e2      	mov	sl, ip
 800add2:	b29b      	uxth	r3, r3
 800add4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800add8:	454f      	cmp	r7, r9
 800adda:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800adde:	f84a 3b04 	str.w	r3, [sl], #4
 800ade2:	d82b      	bhi.n	800ae3c <__multiply+0x120>
 800ade4:	f8cc 8004 	str.w	r8, [ip, #4]
 800ade8:	9b01      	ldr	r3, [sp, #4]
 800adea:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800adee:	3204      	adds	r2, #4
 800adf0:	f1ba 0f00 	cmp.w	sl, #0
 800adf4:	d020      	beq.n	800ae38 <__multiply+0x11c>
 800adf6:	682b      	ldr	r3, [r5, #0]
 800adf8:	4689      	mov	r9, r1
 800adfa:	46a8      	mov	r8, r5
 800adfc:	f04f 0b00 	mov.w	fp, #0
 800ae00:	f8b9 c000 	ldrh.w	ip, [r9]
 800ae04:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800ae08:	fb0a 440c 	mla	r4, sl, ip, r4
 800ae0c:	445c      	add	r4, fp
 800ae0e:	46c4      	mov	ip, r8
 800ae10:	b29b      	uxth	r3, r3
 800ae12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ae16:	f84c 3b04 	str.w	r3, [ip], #4
 800ae1a:	f859 3b04 	ldr.w	r3, [r9], #4
 800ae1e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800ae22:	0c1b      	lsrs	r3, r3, #16
 800ae24:	fb0a b303 	mla	r3, sl, r3, fp
 800ae28:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800ae2c:	454f      	cmp	r7, r9
 800ae2e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800ae32:	d805      	bhi.n	800ae40 <__multiply+0x124>
 800ae34:	f8c8 3004 	str.w	r3, [r8, #4]
 800ae38:	3504      	adds	r5, #4
 800ae3a:	e79b      	b.n	800ad74 <__multiply+0x58>
 800ae3c:	46d4      	mov	ip, sl
 800ae3e:	e7b3      	b.n	800ada8 <__multiply+0x8c>
 800ae40:	46e0      	mov	r8, ip
 800ae42:	e7dd      	b.n	800ae00 <__multiply+0xe4>
 800ae44:	3e01      	subs	r6, #1
 800ae46:	e799      	b.n	800ad7c <__multiply+0x60>

0800ae48 <__pow5mult>:
 800ae48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae4c:	4615      	mov	r5, r2
 800ae4e:	f012 0203 	ands.w	r2, r2, #3
 800ae52:	4606      	mov	r6, r0
 800ae54:	460f      	mov	r7, r1
 800ae56:	d007      	beq.n	800ae68 <__pow5mult+0x20>
 800ae58:	3a01      	subs	r2, #1
 800ae5a:	4c21      	ldr	r4, [pc, #132]	; (800aee0 <__pow5mult+0x98>)
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ae62:	f7ff fe8b 	bl	800ab7c <__multadd>
 800ae66:	4607      	mov	r7, r0
 800ae68:	10ad      	asrs	r5, r5, #2
 800ae6a:	d035      	beq.n	800aed8 <__pow5mult+0x90>
 800ae6c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ae6e:	b93c      	cbnz	r4, 800ae80 <__pow5mult+0x38>
 800ae70:	2010      	movs	r0, #16
 800ae72:	f7ff fe13 	bl	800aa9c <malloc>
 800ae76:	6270      	str	r0, [r6, #36]	; 0x24
 800ae78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ae7c:	6004      	str	r4, [r0, #0]
 800ae7e:	60c4      	str	r4, [r0, #12]
 800ae80:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ae84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ae88:	b94c      	cbnz	r4, 800ae9e <__pow5mult+0x56>
 800ae8a:	f240 2171 	movw	r1, #625	; 0x271
 800ae8e:	4630      	mov	r0, r6
 800ae90:	f7ff ff3b 	bl	800ad0a <__i2b>
 800ae94:	2300      	movs	r3, #0
 800ae96:	f8c8 0008 	str.w	r0, [r8, #8]
 800ae9a:	4604      	mov	r4, r0
 800ae9c:	6003      	str	r3, [r0, #0]
 800ae9e:	f04f 0800 	mov.w	r8, #0
 800aea2:	07eb      	lsls	r3, r5, #31
 800aea4:	d50a      	bpl.n	800aebc <__pow5mult+0x74>
 800aea6:	4639      	mov	r1, r7
 800aea8:	4622      	mov	r2, r4
 800aeaa:	4630      	mov	r0, r6
 800aeac:	f7ff ff36 	bl	800ad1c <__multiply>
 800aeb0:	4639      	mov	r1, r7
 800aeb2:	4681      	mov	r9, r0
 800aeb4:	4630      	mov	r0, r6
 800aeb6:	f7ff fe4a 	bl	800ab4e <_Bfree>
 800aeba:	464f      	mov	r7, r9
 800aebc:	106d      	asrs	r5, r5, #1
 800aebe:	d00b      	beq.n	800aed8 <__pow5mult+0x90>
 800aec0:	6820      	ldr	r0, [r4, #0]
 800aec2:	b938      	cbnz	r0, 800aed4 <__pow5mult+0x8c>
 800aec4:	4622      	mov	r2, r4
 800aec6:	4621      	mov	r1, r4
 800aec8:	4630      	mov	r0, r6
 800aeca:	f7ff ff27 	bl	800ad1c <__multiply>
 800aece:	6020      	str	r0, [r4, #0]
 800aed0:	f8c0 8000 	str.w	r8, [r0]
 800aed4:	4604      	mov	r4, r0
 800aed6:	e7e4      	b.n	800aea2 <__pow5mult+0x5a>
 800aed8:	4638      	mov	r0, r7
 800aeda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aede:	bf00      	nop
 800aee0:	0800b9d0 	.word	0x0800b9d0

0800aee4 <__lshift>:
 800aee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aee8:	460c      	mov	r4, r1
 800aeea:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aeee:	6923      	ldr	r3, [r4, #16]
 800aef0:	6849      	ldr	r1, [r1, #4]
 800aef2:	eb0a 0903 	add.w	r9, sl, r3
 800aef6:	68a3      	ldr	r3, [r4, #8]
 800aef8:	4607      	mov	r7, r0
 800aefa:	4616      	mov	r6, r2
 800aefc:	f109 0501 	add.w	r5, r9, #1
 800af00:	42ab      	cmp	r3, r5
 800af02:	db32      	blt.n	800af6a <__lshift+0x86>
 800af04:	4638      	mov	r0, r7
 800af06:	f7ff fdee 	bl	800aae6 <_Balloc>
 800af0a:	2300      	movs	r3, #0
 800af0c:	4680      	mov	r8, r0
 800af0e:	f100 0114 	add.w	r1, r0, #20
 800af12:	461a      	mov	r2, r3
 800af14:	4553      	cmp	r3, sl
 800af16:	db2b      	blt.n	800af70 <__lshift+0x8c>
 800af18:	6920      	ldr	r0, [r4, #16]
 800af1a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800af1e:	f104 0314 	add.w	r3, r4, #20
 800af22:	f016 021f 	ands.w	r2, r6, #31
 800af26:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800af2a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800af2e:	d025      	beq.n	800af7c <__lshift+0x98>
 800af30:	f1c2 0e20 	rsb	lr, r2, #32
 800af34:	2000      	movs	r0, #0
 800af36:	681e      	ldr	r6, [r3, #0]
 800af38:	468a      	mov	sl, r1
 800af3a:	4096      	lsls	r6, r2
 800af3c:	4330      	orrs	r0, r6
 800af3e:	f84a 0b04 	str.w	r0, [sl], #4
 800af42:	f853 0b04 	ldr.w	r0, [r3], #4
 800af46:	459c      	cmp	ip, r3
 800af48:	fa20 f00e 	lsr.w	r0, r0, lr
 800af4c:	d814      	bhi.n	800af78 <__lshift+0x94>
 800af4e:	6048      	str	r0, [r1, #4]
 800af50:	b108      	cbz	r0, 800af56 <__lshift+0x72>
 800af52:	f109 0502 	add.w	r5, r9, #2
 800af56:	3d01      	subs	r5, #1
 800af58:	4638      	mov	r0, r7
 800af5a:	f8c8 5010 	str.w	r5, [r8, #16]
 800af5e:	4621      	mov	r1, r4
 800af60:	f7ff fdf5 	bl	800ab4e <_Bfree>
 800af64:	4640      	mov	r0, r8
 800af66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af6a:	3101      	adds	r1, #1
 800af6c:	005b      	lsls	r3, r3, #1
 800af6e:	e7c7      	b.n	800af00 <__lshift+0x1c>
 800af70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800af74:	3301      	adds	r3, #1
 800af76:	e7cd      	b.n	800af14 <__lshift+0x30>
 800af78:	4651      	mov	r1, sl
 800af7a:	e7dc      	b.n	800af36 <__lshift+0x52>
 800af7c:	3904      	subs	r1, #4
 800af7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800af82:	f841 2f04 	str.w	r2, [r1, #4]!
 800af86:	459c      	cmp	ip, r3
 800af88:	d8f9      	bhi.n	800af7e <__lshift+0x9a>
 800af8a:	e7e4      	b.n	800af56 <__lshift+0x72>

0800af8c <__mcmp>:
 800af8c:	6903      	ldr	r3, [r0, #16]
 800af8e:	690a      	ldr	r2, [r1, #16]
 800af90:	1a9b      	subs	r3, r3, r2
 800af92:	b530      	push	{r4, r5, lr}
 800af94:	d10c      	bne.n	800afb0 <__mcmp+0x24>
 800af96:	0092      	lsls	r2, r2, #2
 800af98:	3014      	adds	r0, #20
 800af9a:	3114      	adds	r1, #20
 800af9c:	1884      	adds	r4, r0, r2
 800af9e:	4411      	add	r1, r2
 800afa0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800afa4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800afa8:	4295      	cmp	r5, r2
 800afaa:	d003      	beq.n	800afb4 <__mcmp+0x28>
 800afac:	d305      	bcc.n	800afba <__mcmp+0x2e>
 800afae:	2301      	movs	r3, #1
 800afb0:	4618      	mov	r0, r3
 800afb2:	bd30      	pop	{r4, r5, pc}
 800afb4:	42a0      	cmp	r0, r4
 800afb6:	d3f3      	bcc.n	800afa0 <__mcmp+0x14>
 800afb8:	e7fa      	b.n	800afb0 <__mcmp+0x24>
 800afba:	f04f 33ff 	mov.w	r3, #4294967295
 800afbe:	e7f7      	b.n	800afb0 <__mcmp+0x24>

0800afc0 <__mdiff>:
 800afc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afc4:	460d      	mov	r5, r1
 800afc6:	4607      	mov	r7, r0
 800afc8:	4611      	mov	r1, r2
 800afca:	4628      	mov	r0, r5
 800afcc:	4614      	mov	r4, r2
 800afce:	f7ff ffdd 	bl	800af8c <__mcmp>
 800afd2:	1e06      	subs	r6, r0, #0
 800afd4:	d108      	bne.n	800afe8 <__mdiff+0x28>
 800afd6:	4631      	mov	r1, r6
 800afd8:	4638      	mov	r0, r7
 800afda:	f7ff fd84 	bl	800aae6 <_Balloc>
 800afde:	2301      	movs	r3, #1
 800afe0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800afe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afe8:	bfa4      	itt	ge
 800afea:	4623      	movge	r3, r4
 800afec:	462c      	movge	r4, r5
 800afee:	4638      	mov	r0, r7
 800aff0:	6861      	ldr	r1, [r4, #4]
 800aff2:	bfa6      	itte	ge
 800aff4:	461d      	movge	r5, r3
 800aff6:	2600      	movge	r6, #0
 800aff8:	2601      	movlt	r6, #1
 800affa:	f7ff fd74 	bl	800aae6 <_Balloc>
 800affe:	692b      	ldr	r3, [r5, #16]
 800b000:	60c6      	str	r6, [r0, #12]
 800b002:	6926      	ldr	r6, [r4, #16]
 800b004:	f105 0914 	add.w	r9, r5, #20
 800b008:	f104 0214 	add.w	r2, r4, #20
 800b00c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b010:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b014:	f100 0514 	add.w	r5, r0, #20
 800b018:	f04f 0e00 	mov.w	lr, #0
 800b01c:	f852 ab04 	ldr.w	sl, [r2], #4
 800b020:	f859 4b04 	ldr.w	r4, [r9], #4
 800b024:	fa1e f18a 	uxtah	r1, lr, sl
 800b028:	b2a3      	uxth	r3, r4
 800b02a:	1ac9      	subs	r1, r1, r3
 800b02c:	0c23      	lsrs	r3, r4, #16
 800b02e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800b032:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b036:	b289      	uxth	r1, r1
 800b038:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b03c:	45c8      	cmp	r8, r9
 800b03e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b042:	4694      	mov	ip, r2
 800b044:	f845 3b04 	str.w	r3, [r5], #4
 800b048:	d8e8      	bhi.n	800b01c <__mdiff+0x5c>
 800b04a:	45bc      	cmp	ip, r7
 800b04c:	d304      	bcc.n	800b058 <__mdiff+0x98>
 800b04e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800b052:	b183      	cbz	r3, 800b076 <__mdiff+0xb6>
 800b054:	6106      	str	r6, [r0, #16]
 800b056:	e7c5      	b.n	800afe4 <__mdiff+0x24>
 800b058:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b05c:	fa1e f381 	uxtah	r3, lr, r1
 800b060:	141a      	asrs	r2, r3, #16
 800b062:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b066:	b29b      	uxth	r3, r3
 800b068:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b06c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800b070:	f845 3b04 	str.w	r3, [r5], #4
 800b074:	e7e9      	b.n	800b04a <__mdiff+0x8a>
 800b076:	3e01      	subs	r6, #1
 800b078:	e7e9      	b.n	800b04e <__mdiff+0x8e>
	...

0800b07c <__ulp>:
 800b07c:	4b12      	ldr	r3, [pc, #72]	; (800b0c8 <__ulp+0x4c>)
 800b07e:	ee10 2a90 	vmov	r2, s1
 800b082:	401a      	ands	r2, r3
 800b084:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800b088:	2b00      	cmp	r3, #0
 800b08a:	dd04      	ble.n	800b096 <__ulp+0x1a>
 800b08c:	2000      	movs	r0, #0
 800b08e:	4619      	mov	r1, r3
 800b090:	ec41 0b10 	vmov	d0, r0, r1
 800b094:	4770      	bx	lr
 800b096:	425b      	negs	r3, r3
 800b098:	151b      	asrs	r3, r3, #20
 800b09a:	2b13      	cmp	r3, #19
 800b09c:	f04f 0000 	mov.w	r0, #0
 800b0a0:	f04f 0100 	mov.w	r1, #0
 800b0a4:	dc04      	bgt.n	800b0b0 <__ulp+0x34>
 800b0a6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b0aa:	fa42 f103 	asr.w	r1, r2, r3
 800b0ae:	e7ef      	b.n	800b090 <__ulp+0x14>
 800b0b0:	3b14      	subs	r3, #20
 800b0b2:	2b1e      	cmp	r3, #30
 800b0b4:	f04f 0201 	mov.w	r2, #1
 800b0b8:	bfda      	itte	le
 800b0ba:	f1c3 031f 	rsble	r3, r3, #31
 800b0be:	fa02 f303 	lslle.w	r3, r2, r3
 800b0c2:	4613      	movgt	r3, r2
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	e7e3      	b.n	800b090 <__ulp+0x14>
 800b0c8:	7ff00000 	.word	0x7ff00000

0800b0cc <__b2d>:
 800b0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0ce:	6905      	ldr	r5, [r0, #16]
 800b0d0:	f100 0714 	add.w	r7, r0, #20
 800b0d4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b0d8:	1f2e      	subs	r6, r5, #4
 800b0da:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b0de:	4620      	mov	r0, r4
 800b0e0:	f7ff fdc5 	bl	800ac6e <__hi0bits>
 800b0e4:	f1c0 0320 	rsb	r3, r0, #32
 800b0e8:	280a      	cmp	r0, #10
 800b0ea:	600b      	str	r3, [r1, #0]
 800b0ec:	f8df c074 	ldr.w	ip, [pc, #116]	; 800b164 <__b2d+0x98>
 800b0f0:	dc14      	bgt.n	800b11c <__b2d+0x50>
 800b0f2:	f1c0 0e0b 	rsb	lr, r0, #11
 800b0f6:	fa24 f10e 	lsr.w	r1, r4, lr
 800b0fa:	42b7      	cmp	r7, r6
 800b0fc:	ea41 030c 	orr.w	r3, r1, ip
 800b100:	bf34      	ite	cc
 800b102:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b106:	2100      	movcs	r1, #0
 800b108:	3015      	adds	r0, #21
 800b10a:	fa04 f000 	lsl.w	r0, r4, r0
 800b10e:	fa21 f10e 	lsr.w	r1, r1, lr
 800b112:	ea40 0201 	orr.w	r2, r0, r1
 800b116:	ec43 2b10 	vmov	d0, r2, r3
 800b11a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b11c:	42b7      	cmp	r7, r6
 800b11e:	bf3a      	itte	cc
 800b120:	f1a5 0608 	subcc.w	r6, r5, #8
 800b124:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b128:	2100      	movcs	r1, #0
 800b12a:	380b      	subs	r0, #11
 800b12c:	d015      	beq.n	800b15a <__b2d+0x8e>
 800b12e:	4084      	lsls	r4, r0
 800b130:	f1c0 0520 	rsb	r5, r0, #32
 800b134:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800b138:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800b13c:	42be      	cmp	r6, r7
 800b13e:	fa21 fc05 	lsr.w	ip, r1, r5
 800b142:	ea44 030c 	orr.w	r3, r4, ip
 800b146:	bf8c      	ite	hi
 800b148:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b14c:	2400      	movls	r4, #0
 800b14e:	fa01 f000 	lsl.w	r0, r1, r0
 800b152:	40ec      	lsrs	r4, r5
 800b154:	ea40 0204 	orr.w	r2, r0, r4
 800b158:	e7dd      	b.n	800b116 <__b2d+0x4a>
 800b15a:	ea44 030c 	orr.w	r3, r4, ip
 800b15e:	460a      	mov	r2, r1
 800b160:	e7d9      	b.n	800b116 <__b2d+0x4a>
 800b162:	bf00      	nop
 800b164:	3ff00000 	.word	0x3ff00000

0800b168 <__d2b>:
 800b168:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b16c:	460e      	mov	r6, r1
 800b16e:	2101      	movs	r1, #1
 800b170:	ec59 8b10 	vmov	r8, r9, d0
 800b174:	4615      	mov	r5, r2
 800b176:	f7ff fcb6 	bl	800aae6 <_Balloc>
 800b17a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b17e:	4607      	mov	r7, r0
 800b180:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b184:	bb34      	cbnz	r4, 800b1d4 <__d2b+0x6c>
 800b186:	9301      	str	r3, [sp, #4]
 800b188:	f1b8 0300 	subs.w	r3, r8, #0
 800b18c:	d027      	beq.n	800b1de <__d2b+0x76>
 800b18e:	a802      	add	r0, sp, #8
 800b190:	f840 3d08 	str.w	r3, [r0, #-8]!
 800b194:	f7ff fd8a 	bl	800acac <__lo0bits>
 800b198:	9900      	ldr	r1, [sp, #0]
 800b19a:	b1f0      	cbz	r0, 800b1da <__d2b+0x72>
 800b19c:	9a01      	ldr	r2, [sp, #4]
 800b19e:	f1c0 0320 	rsb	r3, r0, #32
 800b1a2:	fa02 f303 	lsl.w	r3, r2, r3
 800b1a6:	430b      	orrs	r3, r1
 800b1a8:	40c2      	lsrs	r2, r0
 800b1aa:	617b      	str	r3, [r7, #20]
 800b1ac:	9201      	str	r2, [sp, #4]
 800b1ae:	9b01      	ldr	r3, [sp, #4]
 800b1b0:	61bb      	str	r3, [r7, #24]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	bf14      	ite	ne
 800b1b6:	2102      	movne	r1, #2
 800b1b8:	2101      	moveq	r1, #1
 800b1ba:	6139      	str	r1, [r7, #16]
 800b1bc:	b1c4      	cbz	r4, 800b1f0 <__d2b+0x88>
 800b1be:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b1c2:	4404      	add	r4, r0
 800b1c4:	6034      	str	r4, [r6, #0]
 800b1c6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b1ca:	6028      	str	r0, [r5, #0]
 800b1cc:	4638      	mov	r0, r7
 800b1ce:	b003      	add	sp, #12
 800b1d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b1d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b1d8:	e7d5      	b.n	800b186 <__d2b+0x1e>
 800b1da:	6179      	str	r1, [r7, #20]
 800b1dc:	e7e7      	b.n	800b1ae <__d2b+0x46>
 800b1de:	a801      	add	r0, sp, #4
 800b1e0:	f7ff fd64 	bl	800acac <__lo0bits>
 800b1e4:	9b01      	ldr	r3, [sp, #4]
 800b1e6:	617b      	str	r3, [r7, #20]
 800b1e8:	2101      	movs	r1, #1
 800b1ea:	6139      	str	r1, [r7, #16]
 800b1ec:	3020      	adds	r0, #32
 800b1ee:	e7e5      	b.n	800b1bc <__d2b+0x54>
 800b1f0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b1f4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b1f8:	6030      	str	r0, [r6, #0]
 800b1fa:	6918      	ldr	r0, [r3, #16]
 800b1fc:	f7ff fd37 	bl	800ac6e <__hi0bits>
 800b200:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b204:	e7e1      	b.n	800b1ca <__d2b+0x62>

0800b206 <__ratio>:
 800b206:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b20a:	4688      	mov	r8, r1
 800b20c:	4669      	mov	r1, sp
 800b20e:	4681      	mov	r9, r0
 800b210:	f7ff ff5c 	bl	800b0cc <__b2d>
 800b214:	a901      	add	r1, sp, #4
 800b216:	4640      	mov	r0, r8
 800b218:	ec57 6b10 	vmov	r6, r7, d0
 800b21c:	f7ff ff56 	bl	800b0cc <__b2d>
 800b220:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b224:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b228:	eba3 0c02 	sub.w	ip, r3, r2
 800b22c:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b230:	1a9b      	subs	r3, r3, r2
 800b232:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b236:	ec5b ab10 	vmov	sl, fp, d0
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	bfce      	itee	gt
 800b23e:	463a      	movgt	r2, r7
 800b240:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b244:	465a      	movle	r2, fp
 800b246:	4659      	mov	r1, fp
 800b248:	463d      	mov	r5, r7
 800b24a:	bfd4      	ite	le
 800b24c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800b250:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800b254:	4630      	mov	r0, r6
 800b256:	ee10 2a10 	vmov	r2, s0
 800b25a:	460b      	mov	r3, r1
 800b25c:	4629      	mov	r1, r5
 800b25e:	f7f5 fb15 	bl	800088c <__aeabi_ddiv>
 800b262:	ec41 0b10 	vmov	d0, r0, r1
 800b266:	b003      	add	sp, #12
 800b268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b26c <__copybits>:
 800b26c:	3901      	subs	r1, #1
 800b26e:	b510      	push	{r4, lr}
 800b270:	1149      	asrs	r1, r1, #5
 800b272:	6914      	ldr	r4, [r2, #16]
 800b274:	3101      	adds	r1, #1
 800b276:	f102 0314 	add.w	r3, r2, #20
 800b27a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b27e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b282:	42a3      	cmp	r3, r4
 800b284:	4602      	mov	r2, r0
 800b286:	d303      	bcc.n	800b290 <__copybits+0x24>
 800b288:	2300      	movs	r3, #0
 800b28a:	428a      	cmp	r2, r1
 800b28c:	d305      	bcc.n	800b29a <__copybits+0x2e>
 800b28e:	bd10      	pop	{r4, pc}
 800b290:	f853 2b04 	ldr.w	r2, [r3], #4
 800b294:	f840 2b04 	str.w	r2, [r0], #4
 800b298:	e7f3      	b.n	800b282 <__copybits+0x16>
 800b29a:	f842 3b04 	str.w	r3, [r2], #4
 800b29e:	e7f4      	b.n	800b28a <__copybits+0x1e>

0800b2a0 <__any_on>:
 800b2a0:	f100 0214 	add.w	r2, r0, #20
 800b2a4:	6900      	ldr	r0, [r0, #16]
 800b2a6:	114b      	asrs	r3, r1, #5
 800b2a8:	4298      	cmp	r0, r3
 800b2aa:	b510      	push	{r4, lr}
 800b2ac:	db11      	blt.n	800b2d2 <__any_on+0x32>
 800b2ae:	dd0a      	ble.n	800b2c6 <__any_on+0x26>
 800b2b0:	f011 011f 	ands.w	r1, r1, #31
 800b2b4:	d007      	beq.n	800b2c6 <__any_on+0x26>
 800b2b6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b2ba:	fa24 f001 	lsr.w	r0, r4, r1
 800b2be:	fa00 f101 	lsl.w	r1, r0, r1
 800b2c2:	428c      	cmp	r4, r1
 800b2c4:	d10b      	bne.n	800b2de <__any_on+0x3e>
 800b2c6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b2ca:	4293      	cmp	r3, r2
 800b2cc:	d803      	bhi.n	800b2d6 <__any_on+0x36>
 800b2ce:	2000      	movs	r0, #0
 800b2d0:	bd10      	pop	{r4, pc}
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	e7f7      	b.n	800b2c6 <__any_on+0x26>
 800b2d6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b2da:	2900      	cmp	r1, #0
 800b2dc:	d0f5      	beq.n	800b2ca <__any_on+0x2a>
 800b2de:	2001      	movs	r0, #1
 800b2e0:	e7f6      	b.n	800b2d0 <__any_on+0x30>

0800b2e2 <_calloc_r>:
 800b2e2:	b538      	push	{r3, r4, r5, lr}
 800b2e4:	fb02 f401 	mul.w	r4, r2, r1
 800b2e8:	4621      	mov	r1, r4
 800b2ea:	f000 f857 	bl	800b39c <_malloc_r>
 800b2ee:	4605      	mov	r5, r0
 800b2f0:	b118      	cbz	r0, 800b2fa <_calloc_r+0x18>
 800b2f2:	4622      	mov	r2, r4
 800b2f4:	2100      	movs	r1, #0
 800b2f6:	f7fc fd21 	bl	8007d3c <memset>
 800b2fa:	4628      	mov	r0, r5
 800b2fc:	bd38      	pop	{r3, r4, r5, pc}
	...

0800b300 <_free_r>:
 800b300:	b538      	push	{r3, r4, r5, lr}
 800b302:	4605      	mov	r5, r0
 800b304:	2900      	cmp	r1, #0
 800b306:	d045      	beq.n	800b394 <_free_r+0x94>
 800b308:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b30c:	1f0c      	subs	r4, r1, #4
 800b30e:	2b00      	cmp	r3, #0
 800b310:	bfb8      	it	lt
 800b312:	18e4      	addlt	r4, r4, r3
 800b314:	f000 fa36 	bl	800b784 <__malloc_lock>
 800b318:	4a1f      	ldr	r2, [pc, #124]	; (800b398 <_free_r+0x98>)
 800b31a:	6813      	ldr	r3, [r2, #0]
 800b31c:	4610      	mov	r0, r2
 800b31e:	b933      	cbnz	r3, 800b32e <_free_r+0x2e>
 800b320:	6063      	str	r3, [r4, #4]
 800b322:	6014      	str	r4, [r2, #0]
 800b324:	4628      	mov	r0, r5
 800b326:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b32a:	f000 ba2c 	b.w	800b786 <__malloc_unlock>
 800b32e:	42a3      	cmp	r3, r4
 800b330:	d90c      	bls.n	800b34c <_free_r+0x4c>
 800b332:	6821      	ldr	r1, [r4, #0]
 800b334:	1862      	adds	r2, r4, r1
 800b336:	4293      	cmp	r3, r2
 800b338:	bf04      	itt	eq
 800b33a:	681a      	ldreq	r2, [r3, #0]
 800b33c:	685b      	ldreq	r3, [r3, #4]
 800b33e:	6063      	str	r3, [r4, #4]
 800b340:	bf04      	itt	eq
 800b342:	1852      	addeq	r2, r2, r1
 800b344:	6022      	streq	r2, [r4, #0]
 800b346:	6004      	str	r4, [r0, #0]
 800b348:	e7ec      	b.n	800b324 <_free_r+0x24>
 800b34a:	4613      	mov	r3, r2
 800b34c:	685a      	ldr	r2, [r3, #4]
 800b34e:	b10a      	cbz	r2, 800b354 <_free_r+0x54>
 800b350:	42a2      	cmp	r2, r4
 800b352:	d9fa      	bls.n	800b34a <_free_r+0x4a>
 800b354:	6819      	ldr	r1, [r3, #0]
 800b356:	1858      	adds	r0, r3, r1
 800b358:	42a0      	cmp	r0, r4
 800b35a:	d10b      	bne.n	800b374 <_free_r+0x74>
 800b35c:	6820      	ldr	r0, [r4, #0]
 800b35e:	4401      	add	r1, r0
 800b360:	1858      	adds	r0, r3, r1
 800b362:	4282      	cmp	r2, r0
 800b364:	6019      	str	r1, [r3, #0]
 800b366:	d1dd      	bne.n	800b324 <_free_r+0x24>
 800b368:	6810      	ldr	r0, [r2, #0]
 800b36a:	6852      	ldr	r2, [r2, #4]
 800b36c:	605a      	str	r2, [r3, #4]
 800b36e:	4401      	add	r1, r0
 800b370:	6019      	str	r1, [r3, #0]
 800b372:	e7d7      	b.n	800b324 <_free_r+0x24>
 800b374:	d902      	bls.n	800b37c <_free_r+0x7c>
 800b376:	230c      	movs	r3, #12
 800b378:	602b      	str	r3, [r5, #0]
 800b37a:	e7d3      	b.n	800b324 <_free_r+0x24>
 800b37c:	6820      	ldr	r0, [r4, #0]
 800b37e:	1821      	adds	r1, r4, r0
 800b380:	428a      	cmp	r2, r1
 800b382:	bf04      	itt	eq
 800b384:	6811      	ldreq	r1, [r2, #0]
 800b386:	6852      	ldreq	r2, [r2, #4]
 800b388:	6062      	str	r2, [r4, #4]
 800b38a:	bf04      	itt	eq
 800b38c:	1809      	addeq	r1, r1, r0
 800b38e:	6021      	streq	r1, [r4, #0]
 800b390:	605c      	str	r4, [r3, #4]
 800b392:	e7c7      	b.n	800b324 <_free_r+0x24>
 800b394:	bd38      	pop	{r3, r4, r5, pc}
 800b396:	bf00      	nop
 800b398:	200001fc 	.word	0x200001fc

0800b39c <_malloc_r>:
 800b39c:	b570      	push	{r4, r5, r6, lr}
 800b39e:	1ccd      	adds	r5, r1, #3
 800b3a0:	f025 0503 	bic.w	r5, r5, #3
 800b3a4:	3508      	adds	r5, #8
 800b3a6:	2d0c      	cmp	r5, #12
 800b3a8:	bf38      	it	cc
 800b3aa:	250c      	movcc	r5, #12
 800b3ac:	2d00      	cmp	r5, #0
 800b3ae:	4606      	mov	r6, r0
 800b3b0:	db01      	blt.n	800b3b6 <_malloc_r+0x1a>
 800b3b2:	42a9      	cmp	r1, r5
 800b3b4:	d903      	bls.n	800b3be <_malloc_r+0x22>
 800b3b6:	230c      	movs	r3, #12
 800b3b8:	6033      	str	r3, [r6, #0]
 800b3ba:	2000      	movs	r0, #0
 800b3bc:	bd70      	pop	{r4, r5, r6, pc}
 800b3be:	f000 f9e1 	bl	800b784 <__malloc_lock>
 800b3c2:	4a21      	ldr	r2, [pc, #132]	; (800b448 <_malloc_r+0xac>)
 800b3c4:	6814      	ldr	r4, [r2, #0]
 800b3c6:	4621      	mov	r1, r4
 800b3c8:	b991      	cbnz	r1, 800b3f0 <_malloc_r+0x54>
 800b3ca:	4c20      	ldr	r4, [pc, #128]	; (800b44c <_malloc_r+0xb0>)
 800b3cc:	6823      	ldr	r3, [r4, #0]
 800b3ce:	b91b      	cbnz	r3, 800b3d8 <_malloc_r+0x3c>
 800b3d0:	4630      	mov	r0, r6
 800b3d2:	f000 f98f 	bl	800b6f4 <_sbrk_r>
 800b3d6:	6020      	str	r0, [r4, #0]
 800b3d8:	4629      	mov	r1, r5
 800b3da:	4630      	mov	r0, r6
 800b3dc:	f000 f98a 	bl	800b6f4 <_sbrk_r>
 800b3e0:	1c43      	adds	r3, r0, #1
 800b3e2:	d124      	bne.n	800b42e <_malloc_r+0x92>
 800b3e4:	230c      	movs	r3, #12
 800b3e6:	6033      	str	r3, [r6, #0]
 800b3e8:	4630      	mov	r0, r6
 800b3ea:	f000 f9cc 	bl	800b786 <__malloc_unlock>
 800b3ee:	e7e4      	b.n	800b3ba <_malloc_r+0x1e>
 800b3f0:	680b      	ldr	r3, [r1, #0]
 800b3f2:	1b5b      	subs	r3, r3, r5
 800b3f4:	d418      	bmi.n	800b428 <_malloc_r+0x8c>
 800b3f6:	2b0b      	cmp	r3, #11
 800b3f8:	d90f      	bls.n	800b41a <_malloc_r+0x7e>
 800b3fa:	600b      	str	r3, [r1, #0]
 800b3fc:	50cd      	str	r5, [r1, r3]
 800b3fe:	18cc      	adds	r4, r1, r3
 800b400:	4630      	mov	r0, r6
 800b402:	f000 f9c0 	bl	800b786 <__malloc_unlock>
 800b406:	f104 000b 	add.w	r0, r4, #11
 800b40a:	1d23      	adds	r3, r4, #4
 800b40c:	f020 0007 	bic.w	r0, r0, #7
 800b410:	1ac3      	subs	r3, r0, r3
 800b412:	d0d3      	beq.n	800b3bc <_malloc_r+0x20>
 800b414:	425a      	negs	r2, r3
 800b416:	50e2      	str	r2, [r4, r3]
 800b418:	e7d0      	b.n	800b3bc <_malloc_r+0x20>
 800b41a:	428c      	cmp	r4, r1
 800b41c:	684b      	ldr	r3, [r1, #4]
 800b41e:	bf16      	itet	ne
 800b420:	6063      	strne	r3, [r4, #4]
 800b422:	6013      	streq	r3, [r2, #0]
 800b424:	460c      	movne	r4, r1
 800b426:	e7eb      	b.n	800b400 <_malloc_r+0x64>
 800b428:	460c      	mov	r4, r1
 800b42a:	6849      	ldr	r1, [r1, #4]
 800b42c:	e7cc      	b.n	800b3c8 <_malloc_r+0x2c>
 800b42e:	1cc4      	adds	r4, r0, #3
 800b430:	f024 0403 	bic.w	r4, r4, #3
 800b434:	42a0      	cmp	r0, r4
 800b436:	d005      	beq.n	800b444 <_malloc_r+0xa8>
 800b438:	1a21      	subs	r1, r4, r0
 800b43a:	4630      	mov	r0, r6
 800b43c:	f000 f95a 	bl	800b6f4 <_sbrk_r>
 800b440:	3001      	adds	r0, #1
 800b442:	d0cf      	beq.n	800b3e4 <_malloc_r+0x48>
 800b444:	6025      	str	r5, [r4, #0]
 800b446:	e7db      	b.n	800b400 <_malloc_r+0x64>
 800b448:	200001fc 	.word	0x200001fc
 800b44c:	20000200 	.word	0x20000200

0800b450 <__ssputs_r>:
 800b450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b454:	688e      	ldr	r6, [r1, #8]
 800b456:	429e      	cmp	r6, r3
 800b458:	4682      	mov	sl, r0
 800b45a:	460c      	mov	r4, r1
 800b45c:	4690      	mov	r8, r2
 800b45e:	4699      	mov	r9, r3
 800b460:	d837      	bhi.n	800b4d2 <__ssputs_r+0x82>
 800b462:	898a      	ldrh	r2, [r1, #12]
 800b464:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b468:	d031      	beq.n	800b4ce <__ssputs_r+0x7e>
 800b46a:	6825      	ldr	r5, [r4, #0]
 800b46c:	6909      	ldr	r1, [r1, #16]
 800b46e:	1a6f      	subs	r7, r5, r1
 800b470:	6965      	ldr	r5, [r4, #20]
 800b472:	2302      	movs	r3, #2
 800b474:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b478:	fb95 f5f3 	sdiv	r5, r5, r3
 800b47c:	f109 0301 	add.w	r3, r9, #1
 800b480:	443b      	add	r3, r7
 800b482:	429d      	cmp	r5, r3
 800b484:	bf38      	it	cc
 800b486:	461d      	movcc	r5, r3
 800b488:	0553      	lsls	r3, r2, #21
 800b48a:	d530      	bpl.n	800b4ee <__ssputs_r+0x9e>
 800b48c:	4629      	mov	r1, r5
 800b48e:	f7ff ff85 	bl	800b39c <_malloc_r>
 800b492:	4606      	mov	r6, r0
 800b494:	b950      	cbnz	r0, 800b4ac <__ssputs_r+0x5c>
 800b496:	230c      	movs	r3, #12
 800b498:	f8ca 3000 	str.w	r3, [sl]
 800b49c:	89a3      	ldrh	r3, [r4, #12]
 800b49e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4a2:	81a3      	strh	r3, [r4, #12]
 800b4a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b4a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4ac:	463a      	mov	r2, r7
 800b4ae:	6921      	ldr	r1, [r4, #16]
 800b4b0:	f7ff fb0e 	bl	800aad0 <memcpy>
 800b4b4:	89a3      	ldrh	r3, [r4, #12]
 800b4b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b4ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4be:	81a3      	strh	r3, [r4, #12]
 800b4c0:	6126      	str	r6, [r4, #16]
 800b4c2:	6165      	str	r5, [r4, #20]
 800b4c4:	443e      	add	r6, r7
 800b4c6:	1bed      	subs	r5, r5, r7
 800b4c8:	6026      	str	r6, [r4, #0]
 800b4ca:	60a5      	str	r5, [r4, #8]
 800b4cc:	464e      	mov	r6, r9
 800b4ce:	454e      	cmp	r6, r9
 800b4d0:	d900      	bls.n	800b4d4 <__ssputs_r+0x84>
 800b4d2:	464e      	mov	r6, r9
 800b4d4:	4632      	mov	r2, r6
 800b4d6:	4641      	mov	r1, r8
 800b4d8:	6820      	ldr	r0, [r4, #0]
 800b4da:	f000 f93a 	bl	800b752 <memmove>
 800b4de:	68a3      	ldr	r3, [r4, #8]
 800b4e0:	1b9b      	subs	r3, r3, r6
 800b4e2:	60a3      	str	r3, [r4, #8]
 800b4e4:	6823      	ldr	r3, [r4, #0]
 800b4e6:	441e      	add	r6, r3
 800b4e8:	6026      	str	r6, [r4, #0]
 800b4ea:	2000      	movs	r0, #0
 800b4ec:	e7dc      	b.n	800b4a8 <__ssputs_r+0x58>
 800b4ee:	462a      	mov	r2, r5
 800b4f0:	f000 f94a 	bl	800b788 <_realloc_r>
 800b4f4:	4606      	mov	r6, r0
 800b4f6:	2800      	cmp	r0, #0
 800b4f8:	d1e2      	bne.n	800b4c0 <__ssputs_r+0x70>
 800b4fa:	6921      	ldr	r1, [r4, #16]
 800b4fc:	4650      	mov	r0, sl
 800b4fe:	f7ff feff 	bl	800b300 <_free_r>
 800b502:	e7c8      	b.n	800b496 <__ssputs_r+0x46>

0800b504 <_svfiprintf_r>:
 800b504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b508:	461d      	mov	r5, r3
 800b50a:	898b      	ldrh	r3, [r1, #12]
 800b50c:	061f      	lsls	r7, r3, #24
 800b50e:	b09d      	sub	sp, #116	; 0x74
 800b510:	4680      	mov	r8, r0
 800b512:	460c      	mov	r4, r1
 800b514:	4616      	mov	r6, r2
 800b516:	d50f      	bpl.n	800b538 <_svfiprintf_r+0x34>
 800b518:	690b      	ldr	r3, [r1, #16]
 800b51a:	b96b      	cbnz	r3, 800b538 <_svfiprintf_r+0x34>
 800b51c:	2140      	movs	r1, #64	; 0x40
 800b51e:	f7ff ff3d 	bl	800b39c <_malloc_r>
 800b522:	6020      	str	r0, [r4, #0]
 800b524:	6120      	str	r0, [r4, #16]
 800b526:	b928      	cbnz	r0, 800b534 <_svfiprintf_r+0x30>
 800b528:	230c      	movs	r3, #12
 800b52a:	f8c8 3000 	str.w	r3, [r8]
 800b52e:	f04f 30ff 	mov.w	r0, #4294967295
 800b532:	e0c8      	b.n	800b6c6 <_svfiprintf_r+0x1c2>
 800b534:	2340      	movs	r3, #64	; 0x40
 800b536:	6163      	str	r3, [r4, #20]
 800b538:	2300      	movs	r3, #0
 800b53a:	9309      	str	r3, [sp, #36]	; 0x24
 800b53c:	2320      	movs	r3, #32
 800b53e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b542:	2330      	movs	r3, #48	; 0x30
 800b544:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b548:	9503      	str	r5, [sp, #12]
 800b54a:	f04f 0b01 	mov.w	fp, #1
 800b54e:	4637      	mov	r7, r6
 800b550:	463d      	mov	r5, r7
 800b552:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b556:	b10b      	cbz	r3, 800b55c <_svfiprintf_r+0x58>
 800b558:	2b25      	cmp	r3, #37	; 0x25
 800b55a:	d13e      	bne.n	800b5da <_svfiprintf_r+0xd6>
 800b55c:	ebb7 0a06 	subs.w	sl, r7, r6
 800b560:	d00b      	beq.n	800b57a <_svfiprintf_r+0x76>
 800b562:	4653      	mov	r3, sl
 800b564:	4632      	mov	r2, r6
 800b566:	4621      	mov	r1, r4
 800b568:	4640      	mov	r0, r8
 800b56a:	f7ff ff71 	bl	800b450 <__ssputs_r>
 800b56e:	3001      	adds	r0, #1
 800b570:	f000 80a4 	beq.w	800b6bc <_svfiprintf_r+0x1b8>
 800b574:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b576:	4453      	add	r3, sl
 800b578:	9309      	str	r3, [sp, #36]	; 0x24
 800b57a:	783b      	ldrb	r3, [r7, #0]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	f000 809d 	beq.w	800b6bc <_svfiprintf_r+0x1b8>
 800b582:	2300      	movs	r3, #0
 800b584:	f04f 32ff 	mov.w	r2, #4294967295
 800b588:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b58c:	9304      	str	r3, [sp, #16]
 800b58e:	9307      	str	r3, [sp, #28]
 800b590:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b594:	931a      	str	r3, [sp, #104]	; 0x68
 800b596:	462f      	mov	r7, r5
 800b598:	2205      	movs	r2, #5
 800b59a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b59e:	4850      	ldr	r0, [pc, #320]	; (800b6e0 <_svfiprintf_r+0x1dc>)
 800b5a0:	f7f4 fe3e 	bl	8000220 <memchr>
 800b5a4:	9b04      	ldr	r3, [sp, #16]
 800b5a6:	b9d0      	cbnz	r0, 800b5de <_svfiprintf_r+0xda>
 800b5a8:	06d9      	lsls	r1, r3, #27
 800b5aa:	bf44      	itt	mi
 800b5ac:	2220      	movmi	r2, #32
 800b5ae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b5b2:	071a      	lsls	r2, r3, #28
 800b5b4:	bf44      	itt	mi
 800b5b6:	222b      	movmi	r2, #43	; 0x2b
 800b5b8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b5bc:	782a      	ldrb	r2, [r5, #0]
 800b5be:	2a2a      	cmp	r2, #42	; 0x2a
 800b5c0:	d015      	beq.n	800b5ee <_svfiprintf_r+0xea>
 800b5c2:	9a07      	ldr	r2, [sp, #28]
 800b5c4:	462f      	mov	r7, r5
 800b5c6:	2000      	movs	r0, #0
 800b5c8:	250a      	movs	r5, #10
 800b5ca:	4639      	mov	r1, r7
 800b5cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b5d0:	3b30      	subs	r3, #48	; 0x30
 800b5d2:	2b09      	cmp	r3, #9
 800b5d4:	d94d      	bls.n	800b672 <_svfiprintf_r+0x16e>
 800b5d6:	b1b8      	cbz	r0, 800b608 <_svfiprintf_r+0x104>
 800b5d8:	e00f      	b.n	800b5fa <_svfiprintf_r+0xf6>
 800b5da:	462f      	mov	r7, r5
 800b5dc:	e7b8      	b.n	800b550 <_svfiprintf_r+0x4c>
 800b5de:	4a40      	ldr	r2, [pc, #256]	; (800b6e0 <_svfiprintf_r+0x1dc>)
 800b5e0:	1a80      	subs	r0, r0, r2
 800b5e2:	fa0b f000 	lsl.w	r0, fp, r0
 800b5e6:	4318      	orrs	r0, r3
 800b5e8:	9004      	str	r0, [sp, #16]
 800b5ea:	463d      	mov	r5, r7
 800b5ec:	e7d3      	b.n	800b596 <_svfiprintf_r+0x92>
 800b5ee:	9a03      	ldr	r2, [sp, #12]
 800b5f0:	1d11      	adds	r1, r2, #4
 800b5f2:	6812      	ldr	r2, [r2, #0]
 800b5f4:	9103      	str	r1, [sp, #12]
 800b5f6:	2a00      	cmp	r2, #0
 800b5f8:	db01      	blt.n	800b5fe <_svfiprintf_r+0xfa>
 800b5fa:	9207      	str	r2, [sp, #28]
 800b5fc:	e004      	b.n	800b608 <_svfiprintf_r+0x104>
 800b5fe:	4252      	negs	r2, r2
 800b600:	f043 0302 	orr.w	r3, r3, #2
 800b604:	9207      	str	r2, [sp, #28]
 800b606:	9304      	str	r3, [sp, #16]
 800b608:	783b      	ldrb	r3, [r7, #0]
 800b60a:	2b2e      	cmp	r3, #46	; 0x2e
 800b60c:	d10c      	bne.n	800b628 <_svfiprintf_r+0x124>
 800b60e:	787b      	ldrb	r3, [r7, #1]
 800b610:	2b2a      	cmp	r3, #42	; 0x2a
 800b612:	d133      	bne.n	800b67c <_svfiprintf_r+0x178>
 800b614:	9b03      	ldr	r3, [sp, #12]
 800b616:	1d1a      	adds	r2, r3, #4
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	9203      	str	r2, [sp, #12]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	bfb8      	it	lt
 800b620:	f04f 33ff 	movlt.w	r3, #4294967295
 800b624:	3702      	adds	r7, #2
 800b626:	9305      	str	r3, [sp, #20]
 800b628:	4d2e      	ldr	r5, [pc, #184]	; (800b6e4 <_svfiprintf_r+0x1e0>)
 800b62a:	7839      	ldrb	r1, [r7, #0]
 800b62c:	2203      	movs	r2, #3
 800b62e:	4628      	mov	r0, r5
 800b630:	f7f4 fdf6 	bl	8000220 <memchr>
 800b634:	b138      	cbz	r0, 800b646 <_svfiprintf_r+0x142>
 800b636:	2340      	movs	r3, #64	; 0x40
 800b638:	1b40      	subs	r0, r0, r5
 800b63a:	fa03 f000 	lsl.w	r0, r3, r0
 800b63e:	9b04      	ldr	r3, [sp, #16]
 800b640:	4303      	orrs	r3, r0
 800b642:	3701      	adds	r7, #1
 800b644:	9304      	str	r3, [sp, #16]
 800b646:	7839      	ldrb	r1, [r7, #0]
 800b648:	4827      	ldr	r0, [pc, #156]	; (800b6e8 <_svfiprintf_r+0x1e4>)
 800b64a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b64e:	2206      	movs	r2, #6
 800b650:	1c7e      	adds	r6, r7, #1
 800b652:	f7f4 fde5 	bl	8000220 <memchr>
 800b656:	2800      	cmp	r0, #0
 800b658:	d038      	beq.n	800b6cc <_svfiprintf_r+0x1c8>
 800b65a:	4b24      	ldr	r3, [pc, #144]	; (800b6ec <_svfiprintf_r+0x1e8>)
 800b65c:	bb13      	cbnz	r3, 800b6a4 <_svfiprintf_r+0x1a0>
 800b65e:	9b03      	ldr	r3, [sp, #12]
 800b660:	3307      	adds	r3, #7
 800b662:	f023 0307 	bic.w	r3, r3, #7
 800b666:	3308      	adds	r3, #8
 800b668:	9303      	str	r3, [sp, #12]
 800b66a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b66c:	444b      	add	r3, r9
 800b66e:	9309      	str	r3, [sp, #36]	; 0x24
 800b670:	e76d      	b.n	800b54e <_svfiprintf_r+0x4a>
 800b672:	fb05 3202 	mla	r2, r5, r2, r3
 800b676:	2001      	movs	r0, #1
 800b678:	460f      	mov	r7, r1
 800b67a:	e7a6      	b.n	800b5ca <_svfiprintf_r+0xc6>
 800b67c:	2300      	movs	r3, #0
 800b67e:	3701      	adds	r7, #1
 800b680:	9305      	str	r3, [sp, #20]
 800b682:	4619      	mov	r1, r3
 800b684:	250a      	movs	r5, #10
 800b686:	4638      	mov	r0, r7
 800b688:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b68c:	3a30      	subs	r2, #48	; 0x30
 800b68e:	2a09      	cmp	r2, #9
 800b690:	d903      	bls.n	800b69a <_svfiprintf_r+0x196>
 800b692:	2b00      	cmp	r3, #0
 800b694:	d0c8      	beq.n	800b628 <_svfiprintf_r+0x124>
 800b696:	9105      	str	r1, [sp, #20]
 800b698:	e7c6      	b.n	800b628 <_svfiprintf_r+0x124>
 800b69a:	fb05 2101 	mla	r1, r5, r1, r2
 800b69e:	2301      	movs	r3, #1
 800b6a0:	4607      	mov	r7, r0
 800b6a2:	e7f0      	b.n	800b686 <_svfiprintf_r+0x182>
 800b6a4:	ab03      	add	r3, sp, #12
 800b6a6:	9300      	str	r3, [sp, #0]
 800b6a8:	4622      	mov	r2, r4
 800b6aa:	4b11      	ldr	r3, [pc, #68]	; (800b6f0 <_svfiprintf_r+0x1ec>)
 800b6ac:	a904      	add	r1, sp, #16
 800b6ae:	4640      	mov	r0, r8
 800b6b0:	f7fc fbe0 	bl	8007e74 <_printf_float>
 800b6b4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b6b8:	4681      	mov	r9, r0
 800b6ba:	d1d6      	bne.n	800b66a <_svfiprintf_r+0x166>
 800b6bc:	89a3      	ldrh	r3, [r4, #12]
 800b6be:	065b      	lsls	r3, r3, #25
 800b6c0:	f53f af35 	bmi.w	800b52e <_svfiprintf_r+0x2a>
 800b6c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b6c6:	b01d      	add	sp, #116	; 0x74
 800b6c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6cc:	ab03      	add	r3, sp, #12
 800b6ce:	9300      	str	r3, [sp, #0]
 800b6d0:	4622      	mov	r2, r4
 800b6d2:	4b07      	ldr	r3, [pc, #28]	; (800b6f0 <_svfiprintf_r+0x1ec>)
 800b6d4:	a904      	add	r1, sp, #16
 800b6d6:	4640      	mov	r0, r8
 800b6d8:	f7fc fe82 	bl	80083e0 <_printf_i>
 800b6dc:	e7ea      	b.n	800b6b4 <_svfiprintf_r+0x1b0>
 800b6de:	bf00      	nop
 800b6e0:	0800b9dc 	.word	0x0800b9dc
 800b6e4:	0800b9e2 	.word	0x0800b9e2
 800b6e8:	0800b9e6 	.word	0x0800b9e6
 800b6ec:	08007e75 	.word	0x08007e75
 800b6f0:	0800b451 	.word	0x0800b451

0800b6f4 <_sbrk_r>:
 800b6f4:	b538      	push	{r3, r4, r5, lr}
 800b6f6:	4c06      	ldr	r4, [pc, #24]	; (800b710 <_sbrk_r+0x1c>)
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	4605      	mov	r5, r0
 800b6fc:	4608      	mov	r0, r1
 800b6fe:	6023      	str	r3, [r4, #0]
 800b700:	f7f6 fc40 	bl	8001f84 <_sbrk>
 800b704:	1c43      	adds	r3, r0, #1
 800b706:	d102      	bne.n	800b70e <_sbrk_r+0x1a>
 800b708:	6823      	ldr	r3, [r4, #0]
 800b70a:	b103      	cbz	r3, 800b70e <_sbrk_r+0x1a>
 800b70c:	602b      	str	r3, [r5, #0]
 800b70e:	bd38      	pop	{r3, r4, r5, pc}
 800b710:	200007ec 	.word	0x200007ec

0800b714 <strncmp>:
 800b714:	b510      	push	{r4, lr}
 800b716:	b16a      	cbz	r2, 800b734 <strncmp+0x20>
 800b718:	3901      	subs	r1, #1
 800b71a:	1884      	adds	r4, r0, r2
 800b71c:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b720:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b724:	4293      	cmp	r3, r2
 800b726:	d103      	bne.n	800b730 <strncmp+0x1c>
 800b728:	42a0      	cmp	r0, r4
 800b72a:	d001      	beq.n	800b730 <strncmp+0x1c>
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d1f5      	bne.n	800b71c <strncmp+0x8>
 800b730:	1a98      	subs	r0, r3, r2
 800b732:	bd10      	pop	{r4, pc}
 800b734:	4610      	mov	r0, r2
 800b736:	e7fc      	b.n	800b732 <strncmp+0x1e>

0800b738 <__ascii_wctomb>:
 800b738:	b149      	cbz	r1, 800b74e <__ascii_wctomb+0x16>
 800b73a:	2aff      	cmp	r2, #255	; 0xff
 800b73c:	bf85      	ittet	hi
 800b73e:	238a      	movhi	r3, #138	; 0x8a
 800b740:	6003      	strhi	r3, [r0, #0]
 800b742:	700a      	strbls	r2, [r1, #0]
 800b744:	f04f 30ff 	movhi.w	r0, #4294967295
 800b748:	bf98      	it	ls
 800b74a:	2001      	movls	r0, #1
 800b74c:	4770      	bx	lr
 800b74e:	4608      	mov	r0, r1
 800b750:	4770      	bx	lr

0800b752 <memmove>:
 800b752:	4288      	cmp	r0, r1
 800b754:	b510      	push	{r4, lr}
 800b756:	eb01 0302 	add.w	r3, r1, r2
 800b75a:	d807      	bhi.n	800b76c <memmove+0x1a>
 800b75c:	1e42      	subs	r2, r0, #1
 800b75e:	4299      	cmp	r1, r3
 800b760:	d00a      	beq.n	800b778 <memmove+0x26>
 800b762:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b766:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b76a:	e7f8      	b.n	800b75e <memmove+0xc>
 800b76c:	4283      	cmp	r3, r0
 800b76e:	d9f5      	bls.n	800b75c <memmove+0xa>
 800b770:	1881      	adds	r1, r0, r2
 800b772:	1ad2      	subs	r2, r2, r3
 800b774:	42d3      	cmn	r3, r2
 800b776:	d100      	bne.n	800b77a <memmove+0x28>
 800b778:	bd10      	pop	{r4, pc}
 800b77a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b77e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b782:	e7f7      	b.n	800b774 <memmove+0x22>

0800b784 <__malloc_lock>:
 800b784:	4770      	bx	lr

0800b786 <__malloc_unlock>:
 800b786:	4770      	bx	lr

0800b788 <_realloc_r>:
 800b788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b78a:	4607      	mov	r7, r0
 800b78c:	4614      	mov	r4, r2
 800b78e:	460e      	mov	r6, r1
 800b790:	b921      	cbnz	r1, 800b79c <_realloc_r+0x14>
 800b792:	4611      	mov	r1, r2
 800b794:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b798:	f7ff be00 	b.w	800b39c <_malloc_r>
 800b79c:	b922      	cbnz	r2, 800b7a8 <_realloc_r+0x20>
 800b79e:	f7ff fdaf 	bl	800b300 <_free_r>
 800b7a2:	4625      	mov	r5, r4
 800b7a4:	4628      	mov	r0, r5
 800b7a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7a8:	f000 f814 	bl	800b7d4 <_malloc_usable_size_r>
 800b7ac:	42a0      	cmp	r0, r4
 800b7ae:	d20f      	bcs.n	800b7d0 <_realloc_r+0x48>
 800b7b0:	4621      	mov	r1, r4
 800b7b2:	4638      	mov	r0, r7
 800b7b4:	f7ff fdf2 	bl	800b39c <_malloc_r>
 800b7b8:	4605      	mov	r5, r0
 800b7ba:	2800      	cmp	r0, #0
 800b7bc:	d0f2      	beq.n	800b7a4 <_realloc_r+0x1c>
 800b7be:	4631      	mov	r1, r6
 800b7c0:	4622      	mov	r2, r4
 800b7c2:	f7ff f985 	bl	800aad0 <memcpy>
 800b7c6:	4631      	mov	r1, r6
 800b7c8:	4638      	mov	r0, r7
 800b7ca:	f7ff fd99 	bl	800b300 <_free_r>
 800b7ce:	e7e9      	b.n	800b7a4 <_realloc_r+0x1c>
 800b7d0:	4635      	mov	r5, r6
 800b7d2:	e7e7      	b.n	800b7a4 <_realloc_r+0x1c>

0800b7d4 <_malloc_usable_size_r>:
 800b7d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b7d8:	1f18      	subs	r0, r3, #4
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	bfbc      	itt	lt
 800b7de:	580b      	ldrlt	r3, [r1, r0]
 800b7e0:	18c0      	addlt	r0, r0, r3
 800b7e2:	4770      	bx	lr

0800b7e4 <_init>:
 800b7e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7e6:	bf00      	nop
 800b7e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7ea:	bc08      	pop	{r3}
 800b7ec:	469e      	mov	lr, r3
 800b7ee:	4770      	bx	lr

0800b7f0 <_fini>:
 800b7f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7f2:	bf00      	nop
 800b7f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7f6:	bc08      	pop	{r3}
 800b7f8:	469e      	mov	lr, r3
 800b7fa:	4770      	bx	lr
